define(["three","@jupyter-widgets/base"],(function(e,t){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=20)}([function(t,n){t.exports=e},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(33));function o(e){if(document.body.createTextRange){const t=document.body.createTextRange();t.moveToElementText(e),t.select()}else if(window.getSelection){const t=window.getSelection(),n=document.createRange();n.selectNodeContents(e),t.removeAllRanges(),t.addRange(n)}}t.semver_range=n(34).version,t.is_typedarray=function(e){return i.default(e)},t.is_arraybuffer=function(e){return ArrayBuffer.isView(e)},t.get_array_dimension=function(e){let t=0;for(;void 0!==e[0];)e=e[0],t+=1;return t},t.download_image=function(e){const t=document.createElement("a");if(t.download="ipyvolume.png",t.href=e,document.createEvent){const e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,0,0,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}else t.fireEvent&&t.fireEvent("onclick")},t.select_text=o,t.copy_image_to_clipboard=function(e){const t=document.createElement("img");t.contentEditable="true",t.src=e;const n=document.createElement("div");n.contentEditable="true",n.appendChild(t),document.body.appendChild(n),o(t),document.execCommand("Copy"),document.body.removeChild(n)},t.materialToLightingModel=function(e){return"MeshPhysicalMaterial"===e.type?"PHYSICAL":"MeshLambertMaterial"===e.type?"LAMBERT":"MeshPhongMaterial"===e.type?"PHONG":"DEFAULT"}},function(e,n){e.exports=t},function(e,t,n){(function(e,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o,a=200,s="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",u="Expected a function",c="__lodash_hash_undefined__",l=500,f="__lodash_placeholder__",h=1,d=2,_=4,p=1,m=2,v=1,g=2,y=4,b=8,x=16,w=32,E=64,A=128,M=256,S=512,T=30,C="...",k=800,O=16,L=1,j=2,z=1/0,N=9007199254740991,P=17976931348623157e292,R=NaN,D=4294967295,I=D-1,U=D>>>1,F=[["ary",A],["bind",v],["bindKey",g],["curry",b],["curryRight",x],["flip",S],["partial",w],["partialRight",E],["rearg",M]],H="[object Arguments]",B="[object Array]",V="[object AsyncFunction]",q="[object Boolean]",Y="[object Date]",X="[object DOMException]",G="[object Error]",W="[object Function]",Z="[object GeneratorFunction]",$="[object Map]",K="[object Number]",Q="[object Null]",J="[object Object]",ee="[object Proxy]",te="[object RegExp]",ne="[object Set]",re="[object String]",ie="[object Symbol]",oe="[object Undefined]",ae="[object WeakMap]",se="[object WeakSet]",ue="[object ArrayBuffer]",ce="[object DataView]",le="[object Float32Array]",fe="[object Float64Array]",he="[object Int8Array]",de="[object Int16Array]",_e="[object Int32Array]",pe="[object Uint8Array]",me="[object Uint8ClampedArray]",ve="[object Uint16Array]",ge="[object Uint32Array]",ye=/\b__p \+= '';/g,be=/\b(__p \+=) '' \+/g,xe=/(__e\(.*?\)|\b__t\)) \+\n'';/g,we=/&(?:amp|lt|gt|quot|#39);/g,Ee=/[&<>"']/g,Ae=RegExp(we.source),Me=RegExp(Ee.source),Se=/<%-([\s\S]+?)%>/g,Te=/<%([\s\S]+?)%>/g,Ce=/<%=([\s\S]+?)%>/g,ke=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Oe=/^\w*$/,Le=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,je=/[\\^$.*+?()[\]{}|]/g,ze=RegExp(je.source),Ne=/^\s+|\s+$/g,Pe=/^\s+/,Re=/\s+$/,De=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Ie=/\{\n\/\* \[wrapped with (.+)\] \*/,Ue=/,? & /,Fe=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,He=/\\(\\)?/g,Be=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Ve=/\w*$/,qe=/^[-+]0x[0-9a-f]+$/i,Ye=/^0b[01]+$/i,Xe=/^\[object .+?Constructor\]$/,Ge=/^0o[0-7]+$/i,We=/^(?:0|[1-9]\d*)$/,Ze=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,$e=/($^)/,Ke=/['\n\r\u2028\u2029\\]/g,Qe="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Je="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",et="[\\ud800-\\udfff]",tt="["+Je+"]",nt="["+Qe+"]",rt="\\d+",it="[\\u2700-\\u27bf]",ot="[a-z\\xdf-\\xf6\\xf8-\\xff]",at="[^\\ud800-\\udfff"+Je+rt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",st="\\ud83c[\\udffb-\\udfff]",ut="[^\\ud800-\\udfff]",ct="(?:\\ud83c[\\udde6-\\uddff]){2}",lt="[\\ud800-\\udbff][\\udc00-\\udfff]",ft="[A-Z\\xc0-\\xd6\\xd8-\\xde]",ht="(?:"+ot+"|"+at+")",dt="(?:"+ft+"|"+at+")",_t="(?:"+nt+"|"+st+")"+"?",pt="[\\ufe0e\\ufe0f]?"+_t+("(?:\\u200d(?:"+[ut,ct,lt].join("|")+")[\\ufe0e\\ufe0f]?"+_t+")*"),mt="(?:"+[it,ct,lt].join("|")+")"+pt,vt="(?:"+[ut+nt+"?",nt,ct,lt,et].join("|")+")",gt=RegExp("['’]","g"),yt=RegExp(nt,"g"),bt=RegExp(st+"(?="+st+")|"+vt+pt,"g"),xt=RegExp([ft+"?"+ot+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[tt,ft,"$"].join("|")+")",dt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[tt,ft+ht,"$"].join("|")+")",ft+"?"+ht+"+(?:['’](?:d|ll|m|re|s|t|ve))?",ft+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",rt,mt].join("|"),"g"),wt=RegExp("[\\u200d\\ud800-\\udfff"+Qe+"\\ufe0e\\ufe0f]"),Et=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,At=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Mt=-1,St={};St[le]=St[fe]=St[he]=St[de]=St[_e]=St[pe]=St[me]=St[ve]=St[ge]=!0,St[H]=St[B]=St[ue]=St[q]=St[ce]=St[Y]=St[G]=St[W]=St[$]=St[K]=St[J]=St[te]=St[ne]=St[re]=St[ae]=!1;var Tt={};Tt[H]=Tt[B]=Tt[ue]=Tt[ce]=Tt[q]=Tt[Y]=Tt[le]=Tt[fe]=Tt[he]=Tt[de]=Tt[_e]=Tt[$]=Tt[K]=Tt[J]=Tt[te]=Tt[ne]=Tt[re]=Tt[ie]=Tt[pe]=Tt[me]=Tt[ve]=Tt[ge]=!0,Tt[G]=Tt[W]=Tt[ae]=!1;var Ct={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},kt=parseFloat,Ot=parseInt,Lt="object"==typeof e&&e&&e.Object===Object&&e,jt="object"==typeof self&&self&&self.Object===Object&&self,zt=Lt||jt||Function("return this")(),Nt=t&&!t.nodeType&&t,Pt=Nt&&"object"==typeof r&&r&&!r.nodeType&&r,Rt=Pt&&Pt.exports===Nt,Dt=Rt&&Lt.process,It=function(){try{var e=Pt&&Pt.require&&Pt.require("util").types;return e||Dt&&Dt.binding&&Dt.binding("util")}catch(e){}}(),Ut=It&&It.isArrayBuffer,Ft=It&&It.isDate,Ht=It&&It.isMap,Bt=It&&It.isRegExp,Vt=It&&It.isSet,qt=It&&It.isTypedArray;function Yt(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function Xt(e,t,n,r){for(var i=-1,o=null==e?0:e.length;++i<o;){var a=e[i];t(r,a,n(a),e)}return r}function Gt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function Wt(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function Zt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function $t(e,t){for(var n=-1,r=null==e?0:e.length,i=0,o=[];++n<r;){var a=e[n];t(a,n,e)&&(o[i++]=a)}return o}function Kt(e,t){return!!(null==e?0:e.length)&&un(e,t,0)>-1}function Qt(e,t,n){for(var r=-1,i=null==e?0:e.length;++r<i;)if(n(t,e[r]))return!0;return!1}function Jt(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i}function en(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}function tn(e,t,n,r){var i=-1,o=null==e?0:e.length;for(r&&o&&(n=e[++i]);++i<o;)n=t(n,e[i],i,e);return n}function nn(e,t,n,r){var i=null==e?0:e.length;for(r&&i&&(n=e[--i]);i--;)n=t(n,e[i],i,e);return n}function rn(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var on=hn("length");function an(e,t,n){var r;return n(e,(function(e,n,i){if(t(e,n,i))return r=n,!1})),r}function sn(e,t,n,r){for(var i=e.length,o=n+(r?1:-1);r?o--:++o<i;)if(t(e[o],o,e))return o;return-1}function un(e,t,n){return t==t?function(e,t,n){var r=n-1,i=e.length;for(;++r<i;)if(e[r]===t)return r;return-1}(e,t,n):sn(e,ln,n)}function cn(e,t,n,r){for(var i=n-1,o=e.length;++i<o;)if(r(e[i],t))return i;return-1}function ln(e){return e!=e}function fn(e,t){var n=null==e?0:e.length;return n?pn(e,t)/n:R}function hn(e){return function(t){return null==t?o:t[e]}}function dn(e){return function(t){return null==e?o:e[t]}}function _n(e,t,n,r,i){return i(e,(function(e,i,o){n=r?(r=!1,e):t(n,e,i,o)})),n}function pn(e,t){for(var n,r=-1,i=e.length;++r<i;){var a=t(e[r]);a!==o&&(n=n===o?a:n+a)}return n}function mn(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function vn(e){return function(t){return e(t)}}function gn(e,t){return Jt(t,(function(t){return e[t]}))}function yn(e,t){return e.has(t)}function bn(e,t){for(var n=-1,r=e.length;++n<r&&un(t,e[n],0)>-1;);return n}function xn(e,t){for(var n=e.length;n--&&un(t,e[n],0)>-1;);return n}var wn=dn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),En=dn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function An(e){return"\\"+Ct[e]}function Mn(e){return wt.test(e)}function Sn(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function Tn(e,t){return function(n){return e(t(n))}}function Cn(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var a=e[n];a!==t&&a!==f||(e[n]=f,o[i++]=n)}return o}function kn(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}function On(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=[e,e]})),n}function Ln(e){return Mn(e)?function(e){var t=bt.lastIndex=0;for(;bt.test(e);)++t;return t}(e):on(e)}function jn(e){return Mn(e)?function(e){return e.match(bt)||[]}(e):function(e){return e.split("")}(e)}var zn=dn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Nn=function e(t){var n,r=(t=null==t?zt:Nn.defaults(zt.Object(),t,Nn.pick(zt,At))).Array,i=t.Date,Qe=t.Error,Je=t.Function,et=t.Math,tt=t.Object,nt=t.RegExp,rt=t.String,it=t.TypeError,ot=r.prototype,at=Je.prototype,st=tt.prototype,ut=t["__core-js_shared__"],ct=at.toString,lt=st.hasOwnProperty,ft=0,ht=(n=/[^.]+$/.exec(ut&&ut.keys&&ut.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",dt=st.toString,_t=ct.call(tt),pt=zt._,mt=nt("^"+ct.call(lt).replace(je,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),vt=Rt?t.Buffer:o,bt=t.Symbol,wt=t.Uint8Array,Ct=vt?vt.allocUnsafe:o,Lt=Tn(tt.getPrototypeOf,tt),jt=tt.create,Nt=st.propertyIsEnumerable,Pt=ot.splice,Dt=bt?bt.isConcatSpreadable:o,It=bt?bt.iterator:o,on=bt?bt.toStringTag:o,dn=function(){try{var e=Uo(tt,"defineProperty");return e({},"",{}),e}catch(e){}}(),Pn=t.clearTimeout!==zt.clearTimeout&&t.clearTimeout,Rn=i&&i.now!==zt.Date.now&&i.now,Dn=t.setTimeout!==zt.setTimeout&&t.setTimeout,In=et.ceil,Un=et.floor,Fn=tt.getOwnPropertySymbols,Hn=vt?vt.isBuffer:o,Bn=t.isFinite,Vn=ot.join,qn=Tn(tt.keys,tt),Yn=et.max,Xn=et.min,Gn=i.now,Wn=t.parseInt,Zn=et.random,$n=ot.reverse,Kn=Uo(t,"DataView"),Qn=Uo(t,"Map"),Jn=Uo(t,"Promise"),er=Uo(t,"Set"),tr=Uo(t,"WeakMap"),nr=Uo(tt,"create"),rr=tr&&new tr,ir={},or=fa(Kn),ar=fa(Qn),sr=fa(Jn),ur=fa(er),cr=fa(tr),lr=bt?bt.prototype:o,fr=lr?lr.valueOf:o,hr=lr?lr.toString:o;function dr(e){if(Cs(e)&&!vs(e)&&!(e instanceof vr)){if(e instanceof mr)return e;if(lt.call(e,"__wrapped__"))return ha(e)}return new mr(e)}var _r=function(){function e(){}return function(t){if(!Ts(t))return{};if(jt)return jt(t);e.prototype=t;var n=new e;return e.prototype=o,n}}();function pr(){}function mr(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=o}function vr(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=D,this.__views__=[]}function gr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function yr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function br(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function xr(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new br;++t<n;)this.add(e[t])}function wr(e){var t=this.__data__=new yr(e);this.size=t.size}function Er(e,t){var n=vs(e),r=!n&&ms(e),i=!n&&!r&&xs(e),o=!n&&!r&&!i&&Rs(e),a=n||r||i||o,s=a?mn(e.length,rt):[],u=s.length;for(var c in e)!t&&!lt.call(e,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Xo(c,u))||s.push(c);return s}function Ar(e){var t=e.length;return t?e[xi(0,t-1)]:o}function Mr(e,t){return ua(no(e),Nr(t,0,e.length))}function Sr(e){return ua(no(e))}function Tr(e,t,n){(n===o||ds(e[t],n))&&(n!==o||t in e)||jr(e,t,n)}function Cr(e,t,n){var r=e[t];lt.call(e,t)&&ds(r,n)&&(n!==o||t in e)||jr(e,t,n)}function kr(e,t){for(var n=e.length;n--;)if(ds(e[n][0],t))return n;return-1}function Or(e,t,n,r){return Ur(e,(function(e,i,o){t(r,e,n(e),o)})),r}function Lr(e,t){return e&&ro(t,iu(t),e)}function jr(e,t,n){"__proto__"==t&&dn?dn(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function zr(e,t){for(var n=-1,i=t.length,a=r(i),s=null==e;++n<i;)a[n]=s?o:Js(e,t[n]);return a}function Nr(e,t,n){return e==e&&(n!==o&&(e=e<=n?e:n),t!==o&&(e=e>=t?e:t)),e}function Pr(e,t,n,r,i,a){var s,u=t&h,c=t&d,l=t&_;if(n&&(s=i?n(e,r,i,a):n(e)),s!==o)return s;if(!Ts(e))return e;var f=vs(e);if(f){if(s=function(e){var t=e.length,n=new e.constructor(t);t&&"string"==typeof e[0]&&lt.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!u)return no(e,s)}else{var p=Bo(e),m=p==W||p==Z;if(xs(e))return $i(e,u);if(p==J||p==H||m&&!i){if(s=c||m?{}:qo(e),!u)return c?function(e,t){return ro(e,Ho(e),t)}(e,function(e,t){return e&&ro(t,ou(t),e)}(s,e)):function(e,t){return ro(e,Fo(e),t)}(e,Lr(s,e))}else{if(!Tt[p])return i?e:{};s=function(e,t,n){var r=e.constructor;switch(t){case ue:return Ki(e);case q:case Y:return new r(+e);case ce:return function(e,t){var n=t?Ki(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case le:case fe:case he:case de:case _e:case pe:case me:case ve:case ge:return Qi(e,n);case $:return new r;case K:case re:return new r(e);case te:return function(e){var t=new e.constructor(e.source,Ve.exec(e));return t.lastIndex=e.lastIndex,t}(e);case ne:return new r;case ie:return i=e,fr?tt(fr.call(i)):{}}var i}(e,p,u)}}a||(a=new wr);var v=a.get(e);if(v)return v;a.set(e,s),zs(e)?e.forEach((function(r){s.add(Pr(r,t,n,r,e,a))})):ks(e)&&e.forEach((function(r,i){s.set(i,Pr(r,t,n,i,e,a))}));var g=f?o:(l?c?jo:Lo:c?ou:iu)(e);return Gt(g||e,(function(r,i){g&&(r=e[i=r]),Cr(s,i,Pr(r,t,n,i,e,a))})),s}function Rr(e,t,n){var r=n.length;if(null==e)return!r;for(e=tt(e);r--;){var i=n[r],a=t[i],s=e[i];if(s===o&&!(i in e)||!a(s))return!1}return!0}function Dr(e,t,n){if("function"!=typeof e)throw new it(u);return ia((function(){e.apply(o,n)}),t)}function Ir(e,t,n,r){var i=-1,o=Kt,s=!0,u=e.length,c=[],l=t.length;if(!u)return c;n&&(t=Jt(t,vn(n))),r?(o=Qt,s=!1):t.length>=a&&(o=yn,s=!1,t=new xr(t));e:for(;++i<u;){var f=e[i],h=null==n?f:n(f);if(f=r||0!==f?f:0,s&&h==h){for(var d=l;d--;)if(t[d]===h)continue e;c.push(f)}else o(t,h,r)||c.push(f)}return c}dr.templateSettings={escape:Se,evaluate:Te,interpolate:Ce,variable:"",imports:{_:dr}},dr.prototype=pr.prototype,dr.prototype.constructor=dr,mr.prototype=_r(pr.prototype),mr.prototype.constructor=mr,vr.prototype=_r(pr.prototype),vr.prototype.constructor=vr,gr.prototype.clear=function(){this.__data__=nr?nr(null):{},this.size=0},gr.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},gr.prototype.get=function(e){var t=this.__data__;if(nr){var n=t[e];return n===c?o:n}return lt.call(t,e)?t[e]:o},gr.prototype.has=function(e){var t=this.__data__;return nr?t[e]!==o:lt.call(t,e)},gr.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=nr&&t===o?c:t,this},yr.prototype.clear=function(){this.__data__=[],this.size=0},yr.prototype.delete=function(e){var t=this.__data__,n=kr(t,e);return!(n<0)&&(n==t.length-1?t.pop():Pt.call(t,n,1),--this.size,!0)},yr.prototype.get=function(e){var t=this.__data__,n=kr(t,e);return n<0?o:t[n][1]},yr.prototype.has=function(e){return kr(this.__data__,e)>-1},yr.prototype.set=function(e,t){var n=this.__data__,r=kr(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},br.prototype.clear=function(){this.size=0,this.__data__={hash:new gr,map:new(Qn||yr),string:new gr}},br.prototype.delete=function(e){var t=Do(this,e).delete(e);return this.size-=t?1:0,t},br.prototype.get=function(e){return Do(this,e).get(e)},br.prototype.has=function(e){return Do(this,e).has(e)},br.prototype.set=function(e,t){var n=Do(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},xr.prototype.add=xr.prototype.push=function(e){return this.__data__.set(e,c),this},xr.prototype.has=function(e){return this.__data__.has(e)},wr.prototype.clear=function(){this.__data__=new yr,this.size=0},wr.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},wr.prototype.get=function(e){return this.__data__.get(e)},wr.prototype.has=function(e){return this.__data__.has(e)},wr.prototype.set=function(e,t){var n=this.__data__;if(n instanceof yr){var r=n.__data__;if(!Qn||r.length<a-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new br(r)}return n.set(e,t),this.size=n.size,this};var Ur=ao(Gr),Fr=ao(Wr,!0);function Hr(e,t){var n=!0;return Ur(e,(function(e,r,i){return n=!!t(e,r,i)})),n}function Br(e,t,n){for(var r=-1,i=e.length;++r<i;){var a=e[r],s=t(a);if(null!=s&&(u===o?s==s&&!Ps(s):n(s,u)))var u=s,c=a}return c}function Vr(e,t){var n=[];return Ur(e,(function(e,r,i){t(e,r,i)&&n.push(e)})),n}function qr(e,t,n,r,i){var o=-1,a=e.length;for(n||(n=Yo),i||(i=[]);++o<a;){var s=e[o];t>0&&n(s)?t>1?qr(s,t-1,n,r,i):en(i,s):r||(i[i.length]=s)}return i}var Yr=so(),Xr=so(!0);function Gr(e,t){return e&&Yr(e,t,iu)}function Wr(e,t){return e&&Xr(e,t,iu)}function Zr(e,t){return $t(t,(function(t){return As(e[t])}))}function $r(e,t){for(var n=0,r=(t=Xi(t,e)).length;null!=e&&n<r;)e=e[la(t[n++])];return n&&n==r?e:o}function Kr(e,t,n){var r=t(e);return vs(e)?r:en(r,n(e))}function Qr(e){return null==e?e===o?oe:Q:on&&on in tt(e)?function(e){var t=lt.call(e,on),n=e[on];try{e[on]=o;var r=!0}catch(e){}var i=dt.call(e);r&&(t?e[on]=n:delete e[on]);return i}(e):function(e){return dt.call(e)}(e)}function Jr(e,t){return e>t}function ei(e,t){return null!=e&&lt.call(e,t)}function ti(e,t){return null!=e&&t in tt(e)}function ni(e,t,n){for(var i=n?Qt:Kt,a=e[0].length,s=e.length,u=s,c=r(s),l=1/0,f=[];u--;){var h=e[u];u&&t&&(h=Jt(h,vn(t))),l=Xn(h.length,l),c[u]=!n&&(t||a>=120&&h.length>=120)?new xr(u&&h):o}h=e[0];var d=-1,_=c[0];e:for(;++d<a&&f.length<l;){var p=h[d],m=t?t(p):p;if(p=n||0!==p?p:0,!(_?yn(_,m):i(f,m,n))){for(u=s;--u;){var v=c[u];if(!(v?yn(v,m):i(e[u],m,n)))continue e}_&&_.push(m),f.push(p)}}return f}function ri(e,t,n){var r=null==(e=ta(e,t=Xi(t,e)))?e:e[la(Ea(t))];return null==r?o:Yt(r,e,n)}function ii(e){return Cs(e)&&Qr(e)==H}function oi(e,t,n,r,i){return e===t||(null==e||null==t||!Cs(e)&&!Cs(t)?e!=e&&t!=t:function(e,t,n,r,i,a){var s=vs(e),u=vs(t),c=s?B:Bo(e),l=u?B:Bo(t),f=(c=c==H?J:c)==J,h=(l=l==H?J:l)==J,d=c==l;if(d&&xs(e)){if(!xs(t))return!1;s=!0,f=!1}if(d&&!f)return a||(a=new wr),s||Rs(e)?ko(e,t,n,r,i,a):function(e,t,n,r,i,o,a){switch(n){case ce:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case ue:return!(e.byteLength!=t.byteLength||!o(new wt(e),new wt(t)));case q:case Y:case K:return ds(+e,+t);case G:return e.name==t.name&&e.message==t.message;case te:case re:return e==t+"";case $:var s=Sn;case ne:var u=r&p;if(s||(s=kn),e.size!=t.size&&!u)return!1;var c=a.get(e);if(c)return c==t;r|=m,a.set(e,t);var l=ko(s(e),s(t),r,i,o,a);return a.delete(e),l;case ie:if(fr)return fr.call(e)==fr.call(t)}return!1}(e,t,c,n,r,i,a);if(!(n&p)){var _=f&&lt.call(e,"__wrapped__"),v=h&&lt.call(t,"__wrapped__");if(_||v){var g=_?e.value():e,y=v?t.value():t;return a||(a=new wr),i(g,y,n,r,a)}}if(!d)return!1;return a||(a=new wr),function(e,t,n,r,i,a){var s=n&p,u=Lo(e),c=u.length,l=Lo(t).length;if(c!=l&&!s)return!1;var f=c;for(;f--;){var h=u[f];if(!(s?h in t:lt.call(t,h)))return!1}var d=a.get(e);if(d&&a.get(t))return d==t;var _=!0;a.set(e,t),a.set(t,e);var m=s;for(;++f<c;){h=u[f];var v=e[h],g=t[h];if(r)var y=s?r(g,v,h,t,e,a):r(v,g,h,e,t,a);if(!(y===o?v===g||i(v,g,n,r,a):y)){_=!1;break}m||(m="constructor"==h)}if(_&&!m){var b=e.constructor,x=t.constructor;b!=x&&"constructor"in e&&"constructor"in t&&!("function"==typeof b&&b instanceof b&&"function"==typeof x&&x instanceof x)&&(_=!1)}return a.delete(e),a.delete(t),_}(e,t,n,r,i,a)}(e,t,n,r,oi,i))}function ai(e,t,n,r){var i=n.length,a=i,s=!r;if(null==e)return!a;for(e=tt(e);i--;){var u=n[i];if(s&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++i<a;){var c=(u=n[i])[0],l=e[c],f=u[1];if(s&&u[2]){if(l===o&&!(c in e))return!1}else{var h=new wr;if(r)var d=r(l,f,c,e,t,h);if(!(d===o?oi(f,l,p|m,r,h):d))return!1}}return!0}function si(e){return!(!Ts(e)||(t=e,ht&&ht in t))&&(As(e)?mt:Xe).test(fa(e));var t}function ui(e){return"function"==typeof e?e:null==e?Ou:"object"==typeof e?vs(e)?_i(e[0],e[1]):di(e):Uu(e)}function ci(e){if(!Ko(e))return qn(e);var t=[];for(var n in tt(e))lt.call(e,n)&&"constructor"!=n&&t.push(n);return t}function li(e){if(!Ts(e))return function(e){var t=[];if(null!=e)for(var n in tt(e))t.push(n);return t}(e);var t=Ko(e),n=[];for(var r in e)("constructor"!=r||!t&&lt.call(e,r))&&n.push(r);return n}function fi(e,t){return e<t}function hi(e,t){var n=-1,i=ys(e)?r(e.length):[];return Ur(e,(function(e,r,o){i[++n]=t(e,r,o)})),i}function di(e){var t=Io(e);return 1==t.length&&t[0][2]?Jo(t[0][0],t[0][1]):function(n){return n===e||ai(n,e,t)}}function _i(e,t){return Wo(e)&&Qo(t)?Jo(la(e),t):function(n){var r=Js(n,e);return r===o&&r===t?eu(n,e):oi(t,r,p|m)}}function pi(e,t,n,r,i){e!==t&&Yr(t,(function(a,s){if(i||(i=new wr),Ts(a))!function(e,t,n,r,i,a,s){var u=na(e,n),c=na(t,n),l=s.get(c);if(l)return void Tr(e,n,l);var f=a?a(u,c,n+"",e,t,s):o,h=f===o;if(h){var d=vs(c),_=!d&&xs(c),p=!d&&!_&&Rs(c);f=c,d||_||p?vs(u)?f=u:bs(u)?f=no(u):_?(h=!1,f=$i(c,!0)):p?(h=!1,f=Qi(c,!0)):f=[]:Ls(c)||ms(c)?(f=u,ms(u)?f=qs(u):Ts(u)&&!As(u)||(f=qo(c))):h=!1}h&&(s.set(c,f),i(f,c,r,a,s),s.delete(c));Tr(e,n,f)}(e,t,s,n,pi,r,i);else{var u=r?r(na(e,s),a,s+"",e,t,i):o;u===o&&(u=a),Tr(e,s,u)}}),ou)}function mi(e,t){var n=e.length;if(n)return Xo(t+=t<0?n:0,n)?e[t]:o}function vi(e,t,n){var r=-1;return t=Jt(t.length?t:[Ou],vn(Ro())),function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(hi(e,(function(e,n,i){return{criteria:Jt(t,(function(t){return t(e)})),index:++r,value:e}})),(function(e,t){return function(e,t,n){var r=-1,i=e.criteria,o=t.criteria,a=i.length,s=n.length;for(;++r<a;){var u=Ji(i[r],o[r]);if(u){if(r>=s)return u;var c=n[r];return u*("desc"==c?-1:1)}}return e.index-t.index}(e,t,n)}))}function gi(e,t,n){for(var r=-1,i=t.length,o={};++r<i;){var a=t[r],s=$r(e,a);n(s,a)&&Si(o,Xi(a,e),s)}return o}function yi(e,t,n,r){var i=r?cn:un,o=-1,a=t.length,s=e;for(e===t&&(t=no(t)),n&&(s=Jt(e,vn(n)));++o<a;)for(var u=0,c=t[o],l=n?n(c):c;(u=i(s,l,u,r))>-1;)s!==e&&Pt.call(s,u,1),Pt.call(e,u,1);return e}function bi(e,t){for(var n=e?t.length:0,r=n-1;n--;){var i=t[n];if(n==r||i!==o){var o=i;Xo(i)?Pt.call(e,i,1):Ii(e,i)}}return e}function xi(e,t){return e+Un(Zn()*(t-e+1))}function wi(e,t){var n="";if(!e||t<1||t>N)return n;do{t%2&&(n+=e),(t=Un(t/2))&&(e+=e)}while(t);return n}function Ei(e,t){return oa(ea(e,t,Ou),e+"")}function Ai(e){return Ar(du(e))}function Mi(e,t){var n=du(e);return ua(n,Nr(t,0,n.length))}function Si(e,t,n,r){if(!Ts(e))return e;for(var i=-1,a=(t=Xi(t,e)).length,s=a-1,u=e;null!=u&&++i<a;){var c=la(t[i]),l=n;if(i!=s){var f=u[c];(l=r?r(f,c,u):o)===o&&(l=Ts(f)?f:Xo(t[i+1])?[]:{})}Cr(u,c,l),u=u[c]}return e}var Ti=rr?function(e,t){return rr.set(e,t),e}:Ou,Ci=dn?function(e,t){return dn(e,"toString",{configurable:!0,enumerable:!1,value:Tu(t),writable:!0})}:Ou;function ki(e){return ua(du(e))}function Oi(e,t,n){var i=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(n=n>o?o:n)<0&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var a=r(o);++i<o;)a[i]=e[i+t];return a}function Li(e,t){var n;return Ur(e,(function(e,r,i){return!(n=t(e,r,i))})),!!n}function ji(e,t,n){var r=0,i=null==e?r:e.length;if("number"==typeof t&&t==t&&i<=U){for(;r<i;){var o=r+i>>>1,a=e[o];null!==a&&!Ps(a)&&(n?a<=t:a<t)?r=o+1:i=o}return i}return zi(e,t,Ou,n)}function zi(e,t,n,r){t=n(t);for(var i=0,a=null==e?0:e.length,s=t!=t,u=null===t,c=Ps(t),l=t===o;i<a;){var f=Un((i+a)/2),h=n(e[f]),d=h!==o,_=null===h,p=h==h,m=Ps(h);if(s)var v=r||p;else v=l?p&&(r||d):u?p&&d&&(r||!_):c?p&&d&&!_&&(r||!m):!_&&!m&&(r?h<=t:h<t);v?i=f+1:a=f}return Xn(a,I)}function Ni(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var a=e[n],s=t?t(a):a;if(!n||!ds(s,u)){var u=s;o[i++]=0===a?0:a}}return o}function Pi(e){return"number"==typeof e?e:Ps(e)?R:+e}function Ri(e){if("string"==typeof e)return e;if(vs(e))return Jt(e,Ri)+"";if(Ps(e))return hr?hr.call(e):"";var t=e+"";return"0"==t&&1/e==-z?"-0":t}function Di(e,t,n){var r=-1,i=Kt,o=e.length,s=!0,u=[],c=u;if(n)s=!1,i=Qt;else if(o>=a){var l=t?null:Eo(e);if(l)return kn(l);s=!1,i=yn,c=new xr}else c=t?[]:u;e:for(;++r<o;){var f=e[r],h=t?t(f):f;if(f=n||0!==f?f:0,s&&h==h){for(var d=c.length;d--;)if(c[d]===h)continue e;t&&c.push(h),u.push(f)}else i(c,h,n)||(c!==u&&c.push(h),u.push(f))}return u}function Ii(e,t){return null==(e=ta(e,t=Xi(t,e)))||delete e[la(Ea(t))]}function Ui(e,t,n,r){return Si(e,t,n($r(e,t)),r)}function Fi(e,t,n,r){for(var i=e.length,o=r?i:-1;(r?o--:++o<i)&&t(e[o],o,e););return n?Oi(e,r?0:o,r?o+1:i):Oi(e,r?o+1:0,r?i:o)}function Hi(e,t){var n=e;return n instanceof vr&&(n=n.value()),tn(t,(function(e,t){return t.func.apply(t.thisArg,en([e],t.args))}),n)}function Bi(e,t,n){var i=e.length;if(i<2)return i?Di(e[0]):[];for(var o=-1,a=r(i);++o<i;)for(var s=e[o],u=-1;++u<i;)u!=o&&(a[o]=Ir(a[o]||s,e[u],t,n));return Di(qr(a,1),t,n)}function Vi(e,t,n){for(var r=-1,i=e.length,a=t.length,s={};++r<i;){var u=r<a?t[r]:o;n(s,e[r],u)}return s}function qi(e){return bs(e)?e:[]}function Yi(e){return"function"==typeof e?e:Ou}function Xi(e,t){return vs(e)?e:Wo(e,t)?[e]:ca(Ys(e))}var Gi=Ei;function Wi(e,t,n){var r=e.length;return n=n===o?r:n,!t&&n>=r?e:Oi(e,t,n)}var Zi=Pn||function(e){return zt.clearTimeout(e)};function $i(e,t){if(t)return e.slice();var n=e.length,r=Ct?Ct(n):new e.constructor(n);return e.copy(r),r}function Ki(e){var t=new e.constructor(e.byteLength);return new wt(t).set(new wt(e)),t}function Qi(e,t){var n=t?Ki(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function Ji(e,t){if(e!==t){var n=e!==o,r=null===e,i=e==e,a=Ps(e),s=t!==o,u=null===t,c=t==t,l=Ps(t);if(!u&&!l&&!a&&e>t||a&&s&&c&&!u&&!l||r&&s&&c||!n&&c||!i)return 1;if(!r&&!a&&!l&&e<t||l&&n&&i&&!r&&!a||u&&n&&i||!s&&i||!c)return-1}return 0}function eo(e,t,n,i){for(var o=-1,a=e.length,s=n.length,u=-1,c=t.length,l=Yn(a-s,0),f=r(c+l),h=!i;++u<c;)f[u]=t[u];for(;++o<s;)(h||o<a)&&(f[n[o]]=e[o]);for(;l--;)f[u++]=e[o++];return f}function to(e,t,n,i){for(var o=-1,a=e.length,s=-1,u=n.length,c=-1,l=t.length,f=Yn(a-u,0),h=r(f+l),d=!i;++o<f;)h[o]=e[o];for(var _=o;++c<l;)h[_+c]=t[c];for(;++s<u;)(d||o<a)&&(h[_+n[s]]=e[o++]);return h}function no(e,t){var n=-1,i=e.length;for(t||(t=r(i));++n<i;)t[n]=e[n];return t}function ro(e,t,n,r){var i=!n;n||(n={});for(var a=-1,s=t.length;++a<s;){var u=t[a],c=r?r(n[u],e[u],u,n,e):o;c===o&&(c=e[u]),i?jr(n,u,c):Cr(n,u,c)}return n}function io(e,t){return function(n,r){var i=vs(n)?Xt:Or,o=t?t():{};return i(n,e,Ro(r,2),o)}}function oo(e){return Ei((function(t,n){var r=-1,i=n.length,a=i>1?n[i-1]:o,s=i>2?n[2]:o;for(a=e.length>3&&"function"==typeof a?(i--,a):o,s&&Go(n[0],n[1],s)&&(a=i<3?o:a,i=1),t=tt(t);++r<i;){var u=n[r];u&&e(t,u,r,a)}return t}))}function ao(e,t){return function(n,r){if(null==n)return n;if(!ys(n))return e(n,r);for(var i=n.length,o=t?i:-1,a=tt(n);(t?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function so(e){return function(t,n,r){for(var i=-1,o=tt(t),a=r(t),s=a.length;s--;){var u=a[e?s:++i];if(!1===n(o[u],u,o))break}return t}}function uo(e){return function(t){var n=Mn(t=Ys(t))?jn(t):o,r=n?n[0]:t.charAt(0),i=n?Wi(n,1).join(""):t.slice(1);return r[e]()+i}}function co(e){return function(t){return tn(Au(mu(t).replace(gt,"")),e,"")}}function lo(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=_r(e.prototype),r=e.apply(n,t);return Ts(r)?r:n}}function fo(e){return function(t,n,r){var i=tt(t);if(!ys(t)){var a=Ro(n,3);t=iu(t),n=function(e){return a(i[e],e,i)}}var s=e(t,n,r);return s>-1?i[a?t[s]:s]:o}}function ho(e){return Oo((function(t){var n=t.length,r=n,i=mr.prototype.thru;for(e&&t.reverse();r--;){var a=t[r];if("function"!=typeof a)throw new it(u);if(i&&!s&&"wrapper"==No(a))var s=new mr([],!0)}for(r=s?r:n;++r<n;){var c=No(a=t[r]),l="wrapper"==c?zo(a):o;s=l&&Zo(l[0])&&l[1]==(A|b|w|M)&&!l[4].length&&1==l[9]?s[No(l[0])].apply(s,l[3]):1==a.length&&Zo(a)?s[c]():s.thru(a)}return function(){var e=arguments,r=e[0];if(s&&1==e.length&&vs(r))return s.plant(r).value();for(var i=0,o=n?t[i].apply(this,e):r;++i<n;)o=t[i].call(this,o);return o}}))}function _o(e,t,n,i,a,s,u,c,l,f){var h=t&A,d=t&v,_=t&g,p=t&(b|x),m=t&S,y=_?o:lo(e);return function v(){for(var g=arguments.length,b=r(g),x=g;x--;)b[x]=arguments[x];if(p)var w=Po(v),E=function(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}(b,w);if(i&&(b=eo(b,i,a,p)),s&&(b=to(b,s,u,p)),g-=E,p&&g<f){var A=Cn(b,w);return xo(e,t,_o,v.placeholder,n,b,A,c,l,f-g)}var M=d?n:this,S=_?M[e]:e;return g=b.length,c?b=function(e,t){var n=e.length,r=Xn(t.length,n),i=no(e);for(;r--;){var a=t[r];e[r]=Xo(a,n)?i[a]:o}return e}(b,c):m&&g>1&&b.reverse(),h&&l<g&&(b.length=l),this&&this!==zt&&this instanceof v&&(S=y||lo(S)),S.apply(M,b)}}function po(e,t){return function(n,r){return function(e,t,n,r){return Gr(e,(function(e,i,o){t(r,n(e),i,o)})),r}(n,e,t(r),{})}}function mo(e,t){return function(n,r){var i;if(n===o&&r===o)return t;if(n!==o&&(i=n),r!==o){if(i===o)return r;"string"==typeof n||"string"==typeof r?(n=Ri(n),r=Ri(r)):(n=Pi(n),r=Pi(r)),i=e(n,r)}return i}}function vo(e){return Oo((function(t){return t=Jt(t,vn(Ro())),Ei((function(n){var r=this;return e(t,(function(e){return Yt(e,r,n)}))}))}))}function go(e,t){var n=(t=t===o?" ":Ri(t)).length;if(n<2)return n?wi(t,e):t;var r=wi(t,In(e/Ln(t)));return Mn(t)?Wi(jn(r),0,e).join(""):r.slice(0,e)}function yo(e){return function(t,n,i){return i&&"number"!=typeof i&&Go(t,n,i)&&(n=i=o),t=Fs(t),n===o?(n=t,t=0):n=Fs(n),function(e,t,n,i){for(var o=-1,a=Yn(In((t-e)/(n||1)),0),s=r(a);a--;)s[i?a:++o]=e,e+=n;return s}(t,n,i=i===o?t<n?1:-1:Fs(i),e)}}function bo(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=Vs(t),n=Vs(n)),e(t,n)}}function xo(e,t,n,r,i,a,s,u,c,l){var f=t&b;t|=f?w:E,(t&=~(f?E:w))&y||(t&=~(v|g));var h=[e,t,i,f?a:o,f?s:o,f?o:a,f?o:s,u,c,l],d=n.apply(o,h);return Zo(e)&&ra(d,h),d.placeholder=r,aa(d,e,t)}function wo(e){var t=et[e];return function(e,n){if(e=Vs(e),(n=null==n?0:Xn(Hs(n),292))&&Bn(e)){var r=(Ys(e)+"e").split("e");return+((r=(Ys(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var Eo=er&&1/kn(new er([,-0]))[1]==z?function(e){return new er(e)}:Pu;function Ao(e){return function(t){var n=Bo(t);return n==$?Sn(t):n==ne?On(t):function(e,t){return Jt(t,(function(t){return[t,e[t]]}))}(t,e(t))}}function Mo(e,t,n,i,a,s,c,l){var h=t&g;if(!h&&"function"!=typeof e)throw new it(u);var d=i?i.length:0;if(d||(t&=~(w|E),i=a=o),c=c===o?c:Yn(Hs(c),0),l=l===o?l:Hs(l),d-=a?a.length:0,t&E){var _=i,p=a;i=a=o}var m=h?o:zo(e),S=[e,t,n,i,a,_,p,s,c,l];if(m&&function(e,t){var n=e[1],r=t[1],i=n|r,o=i<(v|g|A),a=r==A&&n==b||r==A&&n==M&&e[7].length<=t[8]||r==(A|M)&&t[7].length<=t[8]&&n==b;if(!o&&!a)return e;r&v&&(e[2]=t[2],i|=n&v?0:y);var s=t[3];if(s){var u=e[3];e[3]=u?eo(u,s,t[4]):s,e[4]=u?Cn(e[3],f):t[4]}(s=t[5])&&(u=e[5],e[5]=u?to(u,s,t[6]):s,e[6]=u?Cn(e[5],f):t[6]);(s=t[7])&&(e[7]=s);r&A&&(e[8]=null==e[8]?t[8]:Xn(e[8],t[8]));null==e[9]&&(e[9]=t[9]);e[0]=t[0],e[1]=i}(S,m),e=S[0],t=S[1],n=S[2],i=S[3],a=S[4],!(l=S[9]=S[9]===o?h?0:e.length:Yn(S[9]-d,0))&&t&(b|x)&&(t&=~(b|x)),t&&t!=v)T=t==b||t==x?function(e,t,n){var i=lo(e);return function a(){for(var s=arguments.length,u=r(s),c=s,l=Po(a);c--;)u[c]=arguments[c];var f=s<3&&u[0]!==l&&u[s-1]!==l?[]:Cn(u,l);return(s-=f.length)<n?xo(e,t,_o,a.placeholder,o,u,f,o,o,n-s):Yt(this&&this!==zt&&this instanceof a?i:e,this,u)}}(e,t,l):t!=w&&t!=(v|w)||a.length?_o.apply(o,S):function(e,t,n,i){var o=t&v,a=lo(e);return function t(){for(var s=-1,u=arguments.length,c=-1,l=i.length,f=r(l+u),h=this&&this!==zt&&this instanceof t?a:e;++c<l;)f[c]=i[c];for(;u--;)f[c++]=arguments[++s];return Yt(h,o?n:this,f)}}(e,t,n,i);else var T=function(e,t,n){var r=t&v,i=lo(e);return function t(){return(this&&this!==zt&&this instanceof t?i:e).apply(r?n:this,arguments)}}(e,t,n);return aa((m?Ti:ra)(T,S),e,t)}function So(e,t,n,r){return e===o||ds(e,st[n])&&!lt.call(r,n)?t:e}function To(e,t,n,r,i,a){return Ts(e)&&Ts(t)&&(a.set(t,e),pi(e,t,o,To,a),a.delete(t)),e}function Co(e){return Ls(e)?o:e}function ko(e,t,n,r,i,a){var s=n&p,u=e.length,c=t.length;if(u!=c&&!(s&&c>u))return!1;var l=a.get(e);if(l&&a.get(t))return l==t;var f=-1,h=!0,d=n&m?new xr:o;for(a.set(e,t),a.set(t,e);++f<u;){var _=e[f],v=t[f];if(r)var g=s?r(v,_,f,t,e,a):r(_,v,f,e,t,a);if(g!==o){if(g)continue;h=!1;break}if(d){if(!rn(t,(function(e,t){if(!yn(d,t)&&(_===e||i(_,e,n,r,a)))return d.push(t)}))){h=!1;break}}else if(_!==v&&!i(_,v,n,r,a)){h=!1;break}}return a.delete(e),a.delete(t),h}function Oo(e){return oa(ea(e,o,ga),e+"")}function Lo(e){return Kr(e,iu,Fo)}function jo(e){return Kr(e,ou,Ho)}var zo=rr?function(e){return rr.get(e)}:Pu;function No(e){for(var t=e.name+"",n=ir[t],r=lt.call(ir,t)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==e)return i.name}return t}function Po(e){return(lt.call(dr,"placeholder")?dr:e).placeholder}function Ro(){var e=dr.iteratee||Lu;return e=e===Lu?ui:e,arguments.length?e(arguments[0],arguments[1]):e}function Do(e,t){var n,r,i=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof t?"string":"hash"]:i.map}function Io(e){for(var t=iu(e),n=t.length;n--;){var r=t[n],i=e[r];t[n]=[r,i,Qo(i)]}return t}function Uo(e,t){var n=function(e,t){return null==e?o:e[t]}(e,t);return si(n)?n:o}var Fo=Fn?function(e){return null==e?[]:(e=tt(e),$t(Fn(e),(function(t){return Nt.call(e,t)})))}:Bu,Ho=Fn?function(e){for(var t=[];e;)en(t,Fo(e)),e=Lt(e);return t}:Bu,Bo=Qr;function Vo(e,t,n){for(var r=-1,i=(t=Xi(t,e)).length,o=!1;++r<i;){var a=la(t[r]);if(!(o=null!=e&&n(e,a)))break;e=e[a]}return o||++r!=i?o:!!(i=null==e?0:e.length)&&Ss(i)&&Xo(a,i)&&(vs(e)||ms(e))}function qo(e){return"function"!=typeof e.constructor||Ko(e)?{}:_r(Lt(e))}function Yo(e){return vs(e)||ms(e)||!!(Dt&&e&&e[Dt])}function Xo(e,t){var n=typeof e;return!!(t=null==t?N:t)&&("number"==n||"symbol"!=n&&We.test(e))&&e>-1&&e%1==0&&e<t}function Go(e,t,n){if(!Ts(n))return!1;var r=typeof t;return!!("number"==r?ys(n)&&Xo(t,n.length):"string"==r&&t in n)&&ds(n[t],e)}function Wo(e,t){if(vs(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Ps(e))||(Oe.test(e)||!ke.test(e)||null!=t&&e in tt(t))}function Zo(e){var t=No(e),n=dr[t];if("function"!=typeof n||!(t in vr.prototype))return!1;if(e===n)return!0;var r=zo(n);return!!r&&e===r[0]}(Kn&&Bo(new Kn(new ArrayBuffer(1)))!=ce||Qn&&Bo(new Qn)!=$||Jn&&"[object Promise]"!=Bo(Jn.resolve())||er&&Bo(new er)!=ne||tr&&Bo(new tr)!=ae)&&(Bo=function(e){var t=Qr(e),n=t==J?e.constructor:o,r=n?fa(n):"";if(r)switch(r){case or:return ce;case ar:return $;case sr:return"[object Promise]";case ur:return ne;case cr:return ae}return t});var $o=ut?As:Vu;function Ko(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||st)}function Qo(e){return e==e&&!Ts(e)}function Jo(e,t){return function(n){return null!=n&&(n[e]===t&&(t!==o||e in tt(n)))}}function ea(e,t,n){return t=Yn(t===o?e.length-1:t,0),function(){for(var i=arguments,o=-1,a=Yn(i.length-t,0),s=r(a);++o<a;)s[o]=i[t+o];o=-1;for(var u=r(t+1);++o<t;)u[o]=i[o];return u[t]=n(s),Yt(e,this,u)}}function ta(e,t){return t.length<2?e:$r(e,Oi(t,0,-1))}function na(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var ra=sa(Ti),ia=Dn||function(e,t){return zt.setTimeout(e,t)},oa=sa(Ci);function aa(e,t,n){var r=t+"";return oa(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(De,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return Gt(F,(function(n){var r="_."+n[0];t&n[1]&&!Kt(e,r)&&e.push(r)})),e.sort()}(function(e){var t=e.match(Ie);return t?t[1].split(Ue):[]}(r),n)))}function sa(e){var t=0,n=0;return function(){var r=Gn(),i=O-(r-n);if(n=r,i>0){if(++t>=k)return arguments[0]}else t=0;return e.apply(o,arguments)}}function ua(e,t){var n=-1,r=e.length,i=r-1;for(t=t===o?r:t;++n<t;){var a=xi(n,i),s=e[a];e[a]=e[n],e[n]=s}return e.length=t,e}var ca=function(e){var t=ss(e,(function(e){return n.size===l&&n.clear(),e})),n=t.cache;return t}((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(Le,(function(e,n,r,i){t.push(r?i.replace(He,"$1"):n||e)})),t}));function la(e){if("string"==typeof e||Ps(e))return e;var t=e+"";return"0"==t&&1/e==-z?"-0":t}function fa(e){if(null!=e){try{return ct.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function ha(e){if(e instanceof vr)return e.clone();var t=new mr(e.__wrapped__,e.__chain__);return t.__actions__=no(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var da=Ei((function(e,t){return bs(e)?Ir(e,qr(t,1,bs,!0)):[]})),_a=Ei((function(e,t){var n=Ea(t);return bs(n)&&(n=o),bs(e)?Ir(e,qr(t,1,bs,!0),Ro(n,2)):[]})),pa=Ei((function(e,t){var n=Ea(t);return bs(n)&&(n=o),bs(e)?Ir(e,qr(t,1,bs,!0),o,n):[]}));function ma(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:Hs(n);return i<0&&(i=Yn(r+i,0)),sn(e,Ro(t,3),i)}function va(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=r-1;return n!==o&&(i=Hs(n),i=n<0?Yn(r+i,0):Xn(i,r-1)),sn(e,Ro(t,3),i,!0)}function ga(e){return(null==e?0:e.length)?qr(e,1):[]}function ya(e){return e&&e.length?e[0]:o}var ba=Ei((function(e){var t=Jt(e,qi);return t.length&&t[0]===e[0]?ni(t):[]})),xa=Ei((function(e){var t=Ea(e),n=Jt(e,qi);return t===Ea(n)?t=o:n.pop(),n.length&&n[0]===e[0]?ni(n,Ro(t,2)):[]})),wa=Ei((function(e){var t=Ea(e),n=Jt(e,qi);return(t="function"==typeof t?t:o)&&n.pop(),n.length&&n[0]===e[0]?ni(n,o,t):[]}));function Ea(e){var t=null==e?0:e.length;return t?e[t-1]:o}var Aa=Ei(Ma);function Ma(e,t){return e&&e.length&&t&&t.length?yi(e,t):e}var Sa=Oo((function(e,t){var n=null==e?0:e.length,r=zr(e,t);return bi(e,Jt(t,(function(e){return Xo(e,n)?+e:e})).sort(Ji)),r}));function Ta(e){return null==e?e:$n.call(e)}var Ca=Ei((function(e){return Di(qr(e,1,bs,!0))})),ka=Ei((function(e){var t=Ea(e);return bs(t)&&(t=o),Di(qr(e,1,bs,!0),Ro(t,2))})),Oa=Ei((function(e){var t=Ea(e);return t="function"==typeof t?t:o,Di(qr(e,1,bs,!0),o,t)}));function La(e){if(!e||!e.length)return[];var t=0;return e=$t(e,(function(e){if(bs(e))return t=Yn(e.length,t),!0})),mn(t,(function(t){return Jt(e,hn(t))}))}function ja(e,t){if(!e||!e.length)return[];var n=La(e);return null==t?n:Jt(n,(function(e){return Yt(t,o,e)}))}var za=Ei((function(e,t){return bs(e)?Ir(e,t):[]})),Na=Ei((function(e){return Bi($t(e,bs))})),Pa=Ei((function(e){var t=Ea(e);return bs(t)&&(t=o),Bi($t(e,bs),Ro(t,2))})),Ra=Ei((function(e){var t=Ea(e);return t="function"==typeof t?t:o,Bi($t(e,bs),o,t)})),Da=Ei(La);var Ia=Ei((function(e){var t=e.length,n=t>1?e[t-1]:o;return n="function"==typeof n?(e.pop(),n):o,ja(e,n)}));function Ua(e){var t=dr(e);return t.__chain__=!0,t}function Fa(e,t){return t(e)}var Ha=Oo((function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,i=function(t){return zr(t,e)};return!(t>1||this.__actions__.length)&&r instanceof vr&&Xo(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:Fa,args:[i],thisArg:o}),new mr(r,this.__chain__).thru((function(e){return t&&!e.length&&e.push(o),e}))):this.thru(i)}));var Ba=io((function(e,t,n){lt.call(e,n)?++e[n]:jr(e,n,1)}));var Va=fo(ma),qa=fo(va);function Ya(e,t){return(vs(e)?Gt:Ur)(e,Ro(t,3))}function Xa(e,t){return(vs(e)?Wt:Fr)(e,Ro(t,3))}var Ga=io((function(e,t,n){lt.call(e,n)?e[n].push(t):jr(e,n,[t])}));var Wa=Ei((function(e,t,n){var i=-1,o="function"==typeof t,a=ys(e)?r(e.length):[];return Ur(e,(function(e){a[++i]=o?Yt(t,e,n):ri(e,t,n)})),a})),Za=io((function(e,t,n){jr(e,n,t)}));function $a(e,t){return(vs(e)?Jt:hi)(e,Ro(t,3))}var Ka=io((function(e,t,n){e[n?0:1].push(t)}),(function(){return[[],[]]}));var Qa=Ei((function(e,t){if(null==e)return[];var n=t.length;return n>1&&Go(e,t[0],t[1])?t=[]:n>2&&Go(t[0],t[1],t[2])&&(t=[t[0]]),vi(e,qr(t,1),[])})),Ja=Rn||function(){return zt.Date.now()};function es(e,t,n){return t=n?o:t,t=e&&null==t?e.length:t,Mo(e,A,o,o,o,o,t)}function ts(e,t){var n;if("function"!=typeof t)throw new it(u);return e=Hs(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=o),n}}var ns=Ei((function(e,t,n){var r=v;if(n.length){var i=Cn(n,Po(ns));r|=w}return Mo(e,r,t,n,i)})),rs=Ei((function(e,t,n){var r=v|g;if(n.length){var i=Cn(n,Po(rs));r|=w}return Mo(t,r,e,n,i)}));function is(e,t,n){var r,i,a,s,c,l,f=0,h=!1,d=!1,_=!0;if("function"!=typeof e)throw new it(u);function p(t){var n=r,a=i;return r=i=o,f=t,s=e.apply(a,n)}function m(e){var n=e-l;return l===o||n>=t||n<0||d&&e-f>=a}function v(){var e=Ja();if(m(e))return g(e);c=ia(v,function(e){var n=t-(e-l);return d?Xn(n,a-(e-f)):n}(e))}function g(e){return c=o,_&&r?p(e):(r=i=o,s)}function y(){var e=Ja(),n=m(e);if(r=arguments,i=this,l=e,n){if(c===o)return function(e){return f=e,c=ia(v,t),h?p(e):s}(l);if(d)return Zi(c),c=ia(v,t),p(l)}return c===o&&(c=ia(v,t)),s}return t=Vs(t)||0,Ts(n)&&(h=!!n.leading,a=(d="maxWait"in n)?Yn(Vs(n.maxWait)||0,t):a,_="trailing"in n?!!n.trailing:_),y.cancel=function(){c!==o&&Zi(c),f=0,r=l=i=c=o},y.flush=function(){return c===o?s:g(Ja())},y}var os=Ei((function(e,t){return Dr(e,1,t)})),as=Ei((function(e,t,n){return Dr(e,Vs(t)||0,n)}));function ss(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new it(u);var n=function(){var r=arguments,i=t?t.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=e.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(ss.Cache||br),n}function us(e){if("function"!=typeof e)throw new it(u);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}ss.Cache=br;var cs=Gi((function(e,t){var n=(t=1==t.length&&vs(t[0])?Jt(t[0],vn(Ro())):Jt(qr(t,1),vn(Ro()))).length;return Ei((function(r){for(var i=-1,o=Xn(r.length,n);++i<o;)r[i]=t[i].call(this,r[i]);return Yt(e,this,r)}))})),ls=Ei((function(e,t){var n=Cn(t,Po(ls));return Mo(e,w,o,t,n)})),fs=Ei((function(e,t){var n=Cn(t,Po(fs));return Mo(e,E,o,t,n)})),hs=Oo((function(e,t){return Mo(e,M,o,o,o,t)}));function ds(e,t){return e===t||e!=e&&t!=t}var _s=bo(Jr),ps=bo((function(e,t){return e>=t})),ms=ii(function(){return arguments}())?ii:function(e){return Cs(e)&&lt.call(e,"callee")&&!Nt.call(e,"callee")},vs=r.isArray,gs=Ut?vn(Ut):function(e){return Cs(e)&&Qr(e)==ue};function ys(e){return null!=e&&Ss(e.length)&&!As(e)}function bs(e){return Cs(e)&&ys(e)}var xs=Hn||Vu,ws=Ft?vn(Ft):function(e){return Cs(e)&&Qr(e)==Y};function Es(e){if(!Cs(e))return!1;var t=Qr(e);return t==G||t==X||"string"==typeof e.message&&"string"==typeof e.name&&!Ls(e)}function As(e){if(!Ts(e))return!1;var t=Qr(e);return t==W||t==Z||t==V||t==ee}function Ms(e){return"number"==typeof e&&e==Hs(e)}function Ss(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=N}function Ts(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Cs(e){return null!=e&&"object"==typeof e}var ks=Ht?vn(Ht):function(e){return Cs(e)&&Bo(e)==$};function Os(e){return"number"==typeof e||Cs(e)&&Qr(e)==K}function Ls(e){if(!Cs(e)||Qr(e)!=J)return!1;var t=Lt(e);if(null===t)return!0;var n=lt.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&ct.call(n)==_t}var js=Bt?vn(Bt):function(e){return Cs(e)&&Qr(e)==te};var zs=Vt?vn(Vt):function(e){return Cs(e)&&Bo(e)==ne};function Ns(e){return"string"==typeof e||!vs(e)&&Cs(e)&&Qr(e)==re}function Ps(e){return"symbol"==typeof e||Cs(e)&&Qr(e)==ie}var Rs=qt?vn(qt):function(e){return Cs(e)&&Ss(e.length)&&!!St[Qr(e)]};var Ds=bo(fi),Is=bo((function(e,t){return e<=t}));function Us(e){if(!e)return[];if(ys(e))return Ns(e)?jn(e):no(e);if(It&&e[It])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[It]());var t=Bo(e);return(t==$?Sn:t==ne?kn:du)(e)}function Fs(e){return e?(e=Vs(e))===z||e===-z?(e<0?-1:1)*P:e==e?e:0:0===e?e:0}function Hs(e){var t=Fs(e),n=t%1;return t==t?n?t-n:t:0}function Bs(e){return e?Nr(Hs(e),0,D):0}function Vs(e){if("number"==typeof e)return e;if(Ps(e))return R;if(Ts(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Ts(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(Ne,"");var n=Ye.test(e);return n||Ge.test(e)?Ot(e.slice(2),n?2:8):qe.test(e)?R:+e}function qs(e){return ro(e,ou(e))}function Ys(e){return null==e?"":Ri(e)}var Xs=oo((function(e,t){if(Ko(t)||ys(t))ro(t,iu(t),e);else for(var n in t)lt.call(t,n)&&Cr(e,n,t[n])})),Gs=oo((function(e,t){ro(t,ou(t),e)})),Ws=oo((function(e,t,n,r){ro(t,ou(t),e,r)})),Zs=oo((function(e,t,n,r){ro(t,iu(t),e,r)})),$s=Oo(zr);var Ks=Ei((function(e,t){e=tt(e);var n=-1,r=t.length,i=r>2?t[2]:o;for(i&&Go(t[0],t[1],i)&&(r=1);++n<r;)for(var a=t[n],s=ou(a),u=-1,c=s.length;++u<c;){var l=s[u],f=e[l];(f===o||ds(f,st[l])&&!lt.call(e,l))&&(e[l]=a[l])}return e})),Qs=Ei((function(e){return e.push(o,To),Yt(su,o,e)}));function Js(e,t,n){var r=null==e?o:$r(e,t);return r===o?n:r}function eu(e,t){return null!=e&&Vo(e,t,ti)}var tu=po((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=dt.call(t)),e[t]=n}),Tu(Ou)),nu=po((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=dt.call(t)),lt.call(e,t)?e[t].push(n):e[t]=[n]}),Ro),ru=Ei(ri);function iu(e){return ys(e)?Er(e):ci(e)}function ou(e){return ys(e)?Er(e,!0):li(e)}var au=oo((function(e,t,n){pi(e,t,n)})),su=oo((function(e,t,n,r){pi(e,t,n,r)})),uu=Oo((function(e,t){var n={};if(null==e)return n;var r=!1;t=Jt(t,(function(t){return t=Xi(t,e),r||(r=t.length>1),t})),ro(e,jo(e),n),r&&(n=Pr(n,h|d|_,Co));for(var i=t.length;i--;)Ii(n,t[i]);return n}));var cu=Oo((function(e,t){return null==e?{}:function(e,t){return gi(e,t,(function(t,n){return eu(e,n)}))}(e,t)}));function lu(e,t){if(null==e)return{};var n=Jt(jo(e),(function(e){return[e]}));return t=Ro(t),gi(e,n,(function(e,n){return t(e,n[0])}))}var fu=Ao(iu),hu=Ao(ou);function du(e){return null==e?[]:gn(e,iu(e))}var _u=co((function(e,t,n){return t=t.toLowerCase(),e+(n?pu(t):t)}));function pu(e){return Eu(Ys(e).toLowerCase())}function mu(e){return(e=Ys(e))&&e.replace(Ze,wn).replace(yt,"")}var vu=co((function(e,t,n){return e+(n?"-":"")+t.toLowerCase()})),gu=co((function(e,t,n){return e+(n?" ":"")+t.toLowerCase()})),yu=uo("toLowerCase");var bu=co((function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}));var xu=co((function(e,t,n){return e+(n?" ":"")+Eu(t)}));var wu=co((function(e,t,n){return e+(n?" ":"")+t.toUpperCase()})),Eu=uo("toUpperCase");function Au(e,t,n){return e=Ys(e),(t=n?o:t)===o?function(e){return Et.test(e)}(e)?function(e){return e.match(xt)||[]}(e):function(e){return e.match(Fe)||[]}(e):e.match(t)||[]}var Mu=Ei((function(e,t){try{return Yt(e,o,t)}catch(e){return Es(e)?e:new Qe(e)}})),Su=Oo((function(e,t){return Gt(t,(function(t){t=la(t),jr(e,t,ns(e[t],e))})),e}));function Tu(e){return function(){return e}}var Cu=ho(),ku=ho(!0);function Ou(e){return e}function Lu(e){return ui("function"==typeof e?e:Pr(e,h))}var ju=Ei((function(e,t){return function(n){return ri(n,e,t)}})),zu=Ei((function(e,t){return function(n){return ri(e,n,t)}}));function Nu(e,t,n){var r=iu(t),i=Zr(t,r);null!=n||Ts(t)&&(i.length||!r.length)||(n=t,t=e,e=this,i=Zr(t,iu(t)));var o=!(Ts(n)&&"chain"in n&&!n.chain),a=As(e);return Gt(i,(function(n){var r=t[n];e[n]=r,a&&(e.prototype[n]=function(){var t=this.__chain__;if(o||t){var n=e(this.__wrapped__),i=n.__actions__=no(this.__actions__);return i.push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,en([this.value()],arguments))})})),e}function Pu(){}var Ru=vo(Jt),Du=vo(Zt),Iu=vo(rn);function Uu(e){return Wo(e)?hn(la(e)):function(e){return function(t){return $r(t,e)}}(e)}var Fu=yo(),Hu=yo(!0);function Bu(){return[]}function Vu(){return!1}var qu=mo((function(e,t){return e+t}),0),Yu=wo("ceil"),Xu=mo((function(e,t){return e/t}),1),Gu=wo("floor");var Wu,Zu=mo((function(e,t){return e*t}),1),$u=wo("round"),Ku=mo((function(e,t){return e-t}),0);return dr.after=function(e,t){if("function"!=typeof t)throw new it(u);return e=Hs(e),function(){if(--e<1)return t.apply(this,arguments)}},dr.ary=es,dr.assign=Xs,dr.assignIn=Gs,dr.assignInWith=Ws,dr.assignWith=Zs,dr.at=$s,dr.before=ts,dr.bind=ns,dr.bindAll=Su,dr.bindKey=rs,dr.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return vs(e)?e:[e]},dr.chain=Ua,dr.chunk=function(e,t,n){t=(n?Go(e,t,n):t===o)?1:Yn(Hs(t),0);var i=null==e?0:e.length;if(!i||t<1)return[];for(var a=0,s=0,u=r(In(i/t));a<i;)u[s++]=Oi(e,a,a+=t);return u},dr.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,i=[];++t<n;){var o=e[t];o&&(i[r++]=o)}return i},dr.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],i=e;i--;)t[i-1]=arguments[i];return en(vs(n)?no(n):[n],qr(t,1))},dr.cond=function(e){var t=null==e?0:e.length,n=Ro();return e=t?Jt(e,(function(e){if("function"!=typeof e[1])throw new it(u);return[n(e[0]),e[1]]})):[],Ei((function(n){for(var r=-1;++r<t;){var i=e[r];if(Yt(i[0],this,n))return Yt(i[1],this,n)}}))},dr.conforms=function(e){return function(e){var t=iu(e);return function(n){return Rr(n,e,t)}}(Pr(e,h))},dr.constant=Tu,dr.countBy=Ba,dr.create=function(e,t){var n=_r(e);return null==t?n:Lr(n,t)},dr.curry=function e(t,n,r){var i=Mo(t,b,o,o,o,o,o,n=r?o:n);return i.placeholder=e.placeholder,i},dr.curryRight=function e(t,n,r){var i=Mo(t,x,o,o,o,o,o,n=r?o:n);return i.placeholder=e.placeholder,i},dr.debounce=is,dr.defaults=Ks,dr.defaultsDeep=Qs,dr.defer=os,dr.delay=as,dr.difference=da,dr.differenceBy=_a,dr.differenceWith=pa,dr.drop=function(e,t,n){var r=null==e?0:e.length;return r?Oi(e,(t=n||t===o?1:Hs(t))<0?0:t,r):[]},dr.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?Oi(e,0,(t=r-(t=n||t===o?1:Hs(t)))<0?0:t):[]},dr.dropRightWhile=function(e,t){return e&&e.length?Fi(e,Ro(t,3),!0,!0):[]},dr.dropWhile=function(e,t){return e&&e.length?Fi(e,Ro(t,3),!0):[]},dr.fill=function(e,t,n,r){var i=null==e?0:e.length;return i?(n&&"number"!=typeof n&&Go(e,t,n)&&(n=0,r=i),function(e,t,n,r){var i=e.length;for((n=Hs(n))<0&&(n=-n>i?0:i+n),(r=r===o||r>i?i:Hs(r))<0&&(r+=i),r=n>r?0:Bs(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},dr.filter=function(e,t){return(vs(e)?$t:Vr)(e,Ro(t,3))},dr.flatMap=function(e,t){return qr($a(e,t),1)},dr.flatMapDeep=function(e,t){return qr($a(e,t),z)},dr.flatMapDepth=function(e,t,n){return n=n===o?1:Hs(n),qr($a(e,t),n)},dr.flatten=ga,dr.flattenDeep=function(e){return(null==e?0:e.length)?qr(e,z):[]},dr.flattenDepth=function(e,t){return(null==e?0:e.length)?qr(e,t=t===o?1:Hs(t)):[]},dr.flip=function(e){return Mo(e,S)},dr.flow=Cu,dr.flowRight=ku,dr.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var i=e[t];r[i[0]]=i[1]}return r},dr.functions=function(e){return null==e?[]:Zr(e,iu(e))},dr.functionsIn=function(e){return null==e?[]:Zr(e,ou(e))},dr.groupBy=Ga,dr.initial=function(e){return(null==e?0:e.length)?Oi(e,0,-1):[]},dr.intersection=ba,dr.intersectionBy=xa,dr.intersectionWith=wa,dr.invert=tu,dr.invertBy=nu,dr.invokeMap=Wa,dr.iteratee=Lu,dr.keyBy=Za,dr.keys=iu,dr.keysIn=ou,dr.map=$a,dr.mapKeys=function(e,t){var n={};return t=Ro(t,3),Gr(e,(function(e,r,i){jr(n,t(e,r,i),e)})),n},dr.mapValues=function(e,t){var n={};return t=Ro(t,3),Gr(e,(function(e,r,i){jr(n,r,t(e,r,i))})),n},dr.matches=function(e){return di(Pr(e,h))},dr.matchesProperty=function(e,t){return _i(e,Pr(t,h))},dr.memoize=ss,dr.merge=au,dr.mergeWith=su,dr.method=ju,dr.methodOf=zu,dr.mixin=Nu,dr.negate=us,dr.nthArg=function(e){return e=Hs(e),Ei((function(t){return mi(t,e)}))},dr.omit=uu,dr.omitBy=function(e,t){return lu(e,us(Ro(t)))},dr.once=function(e){return ts(2,e)},dr.orderBy=function(e,t,n,r){return null==e?[]:(vs(t)||(t=null==t?[]:[t]),vs(n=r?o:n)||(n=null==n?[]:[n]),vi(e,t,n))},dr.over=Ru,dr.overArgs=cs,dr.overEvery=Du,dr.overSome=Iu,dr.partial=ls,dr.partialRight=fs,dr.partition=Ka,dr.pick=cu,dr.pickBy=lu,dr.property=Uu,dr.propertyOf=function(e){return function(t){return null==e?o:$r(e,t)}},dr.pull=Aa,dr.pullAll=Ma,dr.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?yi(e,t,Ro(n,2)):e},dr.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?yi(e,t,o,n):e},dr.pullAt=Sa,dr.range=Fu,dr.rangeRight=Hu,dr.rearg=hs,dr.reject=function(e,t){return(vs(e)?$t:Vr)(e,us(Ro(t,3)))},dr.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,i=[],o=e.length;for(t=Ro(t,3);++r<o;){var a=e[r];t(a,r,e)&&(n.push(a),i.push(r))}return bi(e,i),n},dr.rest=function(e,t){if("function"!=typeof e)throw new it(u);return Ei(e,t=t===o?t:Hs(t))},dr.reverse=Ta,dr.sampleSize=function(e,t,n){return t=(n?Go(e,t,n):t===o)?1:Hs(t),(vs(e)?Mr:Mi)(e,t)},dr.set=function(e,t,n){return null==e?e:Si(e,t,n)},dr.setWith=function(e,t,n,r){return r="function"==typeof r?r:o,null==e?e:Si(e,t,n,r)},dr.shuffle=function(e){return(vs(e)?Sr:ki)(e)},dr.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&Go(e,t,n)?(t=0,n=r):(t=null==t?0:Hs(t),n=n===o?r:Hs(n)),Oi(e,t,n)):[]},dr.sortBy=Qa,dr.sortedUniq=function(e){return e&&e.length?Ni(e):[]},dr.sortedUniqBy=function(e,t){return e&&e.length?Ni(e,Ro(t,2)):[]},dr.split=function(e,t,n){return n&&"number"!=typeof n&&Go(e,t,n)&&(t=n=o),(n=n===o?D:n>>>0)?(e=Ys(e))&&("string"==typeof t||null!=t&&!js(t))&&!(t=Ri(t))&&Mn(e)?Wi(jn(e),0,n):e.split(t,n):[]},dr.spread=function(e,t){if("function"!=typeof e)throw new it(u);return t=null==t?0:Yn(Hs(t),0),Ei((function(n){var r=n[t],i=Wi(n,0,t);return r&&en(i,r),Yt(e,this,i)}))},dr.tail=function(e){var t=null==e?0:e.length;return t?Oi(e,1,t):[]},dr.take=function(e,t,n){return e&&e.length?Oi(e,0,(t=n||t===o?1:Hs(t))<0?0:t):[]},dr.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?Oi(e,(t=r-(t=n||t===o?1:Hs(t)))<0?0:t,r):[]},dr.takeRightWhile=function(e,t){return e&&e.length?Fi(e,Ro(t,3),!1,!0):[]},dr.takeWhile=function(e,t){return e&&e.length?Fi(e,Ro(t,3)):[]},dr.tap=function(e,t){return t(e),e},dr.throttle=function(e,t,n){var r=!0,i=!0;if("function"!=typeof e)throw new it(u);return Ts(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),is(e,t,{leading:r,maxWait:t,trailing:i})},dr.thru=Fa,dr.toArray=Us,dr.toPairs=fu,dr.toPairsIn=hu,dr.toPath=function(e){return vs(e)?Jt(e,la):Ps(e)?[e]:no(ca(Ys(e)))},dr.toPlainObject=qs,dr.transform=function(e,t,n){var r=vs(e),i=r||xs(e)||Rs(e);if(t=Ro(t,4),null==n){var o=e&&e.constructor;n=i?r?new o:[]:Ts(e)&&As(o)?_r(Lt(e)):{}}return(i?Gt:Gr)(e,(function(e,r,i){return t(n,e,r,i)})),n},dr.unary=function(e){return es(e,1)},dr.union=Ca,dr.unionBy=ka,dr.unionWith=Oa,dr.uniq=function(e){return e&&e.length?Di(e):[]},dr.uniqBy=function(e,t){return e&&e.length?Di(e,Ro(t,2)):[]},dr.uniqWith=function(e,t){return t="function"==typeof t?t:o,e&&e.length?Di(e,o,t):[]},dr.unset=function(e,t){return null==e||Ii(e,t)},dr.unzip=La,dr.unzipWith=ja,dr.update=function(e,t,n){return null==e?e:Ui(e,t,Yi(n))},dr.updateWith=function(e,t,n,r){return r="function"==typeof r?r:o,null==e?e:Ui(e,t,Yi(n),r)},dr.values=du,dr.valuesIn=function(e){return null==e?[]:gn(e,ou(e))},dr.without=za,dr.words=Au,dr.wrap=function(e,t){return ls(Yi(t),e)},dr.xor=Na,dr.xorBy=Pa,dr.xorWith=Ra,dr.zip=Da,dr.zipObject=function(e,t){return Vi(e||[],t||[],Cr)},dr.zipObjectDeep=function(e,t){return Vi(e||[],t||[],Si)},dr.zipWith=Ia,dr.entries=fu,dr.entriesIn=hu,dr.extend=Gs,dr.extendWith=Ws,Nu(dr,dr),dr.add=qu,dr.attempt=Mu,dr.camelCase=_u,dr.capitalize=pu,dr.ceil=Yu,dr.clamp=function(e,t,n){return n===o&&(n=t,t=o),n!==o&&(n=(n=Vs(n))==n?n:0),t!==o&&(t=(t=Vs(t))==t?t:0),Nr(Vs(e),t,n)},dr.clone=function(e){return Pr(e,_)},dr.cloneDeep=function(e){return Pr(e,h|_)},dr.cloneDeepWith=function(e,t){return Pr(e,h|_,t="function"==typeof t?t:o)},dr.cloneWith=function(e,t){return Pr(e,_,t="function"==typeof t?t:o)},dr.conformsTo=function(e,t){return null==t||Rr(e,t,iu(t))},dr.deburr=mu,dr.defaultTo=function(e,t){return null==e||e!=e?t:e},dr.divide=Xu,dr.endsWith=function(e,t,n){e=Ys(e),t=Ri(t);var r=e.length,i=n=n===o?r:Nr(Hs(n),0,r);return(n-=t.length)>=0&&e.slice(n,i)==t},dr.eq=ds,dr.escape=function(e){return(e=Ys(e))&&Me.test(e)?e.replace(Ee,En):e},dr.escapeRegExp=function(e){return(e=Ys(e))&&ze.test(e)?e.replace(je,"\\$&"):e},dr.every=function(e,t,n){var r=vs(e)?Zt:Hr;return n&&Go(e,t,n)&&(t=o),r(e,Ro(t,3))},dr.find=Va,dr.findIndex=ma,dr.findKey=function(e,t){return an(e,Ro(t,3),Gr)},dr.findLast=qa,dr.findLastIndex=va,dr.findLastKey=function(e,t){return an(e,Ro(t,3),Wr)},dr.floor=Gu,dr.forEach=Ya,dr.forEachRight=Xa,dr.forIn=function(e,t){return null==e?e:Yr(e,Ro(t,3),ou)},dr.forInRight=function(e,t){return null==e?e:Xr(e,Ro(t,3),ou)},dr.forOwn=function(e,t){return e&&Gr(e,Ro(t,3))},dr.forOwnRight=function(e,t){return e&&Wr(e,Ro(t,3))},dr.get=Js,dr.gt=_s,dr.gte=ps,dr.has=function(e,t){return null!=e&&Vo(e,t,ei)},dr.hasIn=eu,dr.head=ya,dr.identity=Ou,dr.includes=function(e,t,n,r){e=ys(e)?e:du(e),n=n&&!r?Hs(n):0;var i=e.length;return n<0&&(n=Yn(i+n,0)),Ns(e)?n<=i&&e.indexOf(t,n)>-1:!!i&&un(e,t,n)>-1},dr.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:Hs(n);return i<0&&(i=Yn(r+i,0)),un(e,t,i)},dr.inRange=function(e,t,n){return t=Fs(t),n===o?(n=t,t=0):n=Fs(n),function(e,t,n){return e>=Xn(t,n)&&e<Yn(t,n)}(e=Vs(e),t,n)},dr.invoke=ru,dr.isArguments=ms,dr.isArray=vs,dr.isArrayBuffer=gs,dr.isArrayLike=ys,dr.isArrayLikeObject=bs,dr.isBoolean=function(e){return!0===e||!1===e||Cs(e)&&Qr(e)==q},dr.isBuffer=xs,dr.isDate=ws,dr.isElement=function(e){return Cs(e)&&1===e.nodeType&&!Ls(e)},dr.isEmpty=function(e){if(null==e)return!0;if(ys(e)&&(vs(e)||"string"==typeof e||"function"==typeof e.splice||xs(e)||Rs(e)||ms(e)))return!e.length;var t=Bo(e);if(t==$||t==ne)return!e.size;if(Ko(e))return!ci(e).length;for(var n in e)if(lt.call(e,n))return!1;return!0},dr.isEqual=function(e,t){return oi(e,t)},dr.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:o)?n(e,t):o;return r===o?oi(e,t,o,n):!!r},dr.isError=Es,dr.isFinite=function(e){return"number"==typeof e&&Bn(e)},dr.isFunction=As,dr.isInteger=Ms,dr.isLength=Ss,dr.isMap=ks,dr.isMatch=function(e,t){return e===t||ai(e,t,Io(t))},dr.isMatchWith=function(e,t,n){return n="function"==typeof n?n:o,ai(e,t,Io(t),n)},dr.isNaN=function(e){return Os(e)&&e!=+e},dr.isNative=function(e){if($o(e))throw new Qe(s);return si(e)},dr.isNil=function(e){return null==e},dr.isNull=function(e){return null===e},dr.isNumber=Os,dr.isObject=Ts,dr.isObjectLike=Cs,dr.isPlainObject=Ls,dr.isRegExp=js,dr.isSafeInteger=function(e){return Ms(e)&&e>=-N&&e<=N},dr.isSet=zs,dr.isString=Ns,dr.isSymbol=Ps,dr.isTypedArray=Rs,dr.isUndefined=function(e){return e===o},dr.isWeakMap=function(e){return Cs(e)&&Bo(e)==ae},dr.isWeakSet=function(e){return Cs(e)&&Qr(e)==se},dr.join=function(e,t){return null==e?"":Vn.call(e,t)},dr.kebabCase=vu,dr.last=Ea,dr.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=r;return n!==o&&(i=(i=Hs(n))<0?Yn(r+i,0):Xn(i,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,i):sn(e,ln,i,!0)},dr.lowerCase=gu,dr.lowerFirst=yu,dr.lt=Ds,dr.lte=Is,dr.max=function(e){return e&&e.length?Br(e,Ou,Jr):o},dr.maxBy=function(e,t){return e&&e.length?Br(e,Ro(t,2),Jr):o},dr.mean=function(e){return fn(e,Ou)},dr.meanBy=function(e,t){return fn(e,Ro(t,2))},dr.min=function(e){return e&&e.length?Br(e,Ou,fi):o},dr.minBy=function(e,t){return e&&e.length?Br(e,Ro(t,2),fi):o},dr.stubArray=Bu,dr.stubFalse=Vu,dr.stubObject=function(){return{}},dr.stubString=function(){return""},dr.stubTrue=function(){return!0},dr.multiply=Zu,dr.nth=function(e,t){return e&&e.length?mi(e,Hs(t)):o},dr.noConflict=function(){return zt._===this&&(zt._=pt),this},dr.noop=Pu,dr.now=Ja,dr.pad=function(e,t,n){e=Ys(e);var r=(t=Hs(t))?Ln(e):0;if(!t||r>=t)return e;var i=(t-r)/2;return go(Un(i),n)+e+go(In(i),n)},dr.padEnd=function(e,t,n){e=Ys(e);var r=(t=Hs(t))?Ln(e):0;return t&&r<t?e+go(t-r,n):e},dr.padStart=function(e,t,n){e=Ys(e);var r=(t=Hs(t))?Ln(e):0;return t&&r<t?go(t-r,n)+e:e},dr.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),Wn(Ys(e).replace(Pe,""),t||0)},dr.random=function(e,t,n){if(n&&"boolean"!=typeof n&&Go(e,t,n)&&(t=n=o),n===o&&("boolean"==typeof t?(n=t,t=o):"boolean"==typeof e&&(n=e,e=o)),e===o&&t===o?(e=0,t=1):(e=Fs(e),t===o?(t=e,e=0):t=Fs(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var i=Zn();return Xn(e+i*(t-e+kt("1e-"+((i+"").length-1))),t)}return xi(e,t)},dr.reduce=function(e,t,n){var r=vs(e)?tn:_n,i=arguments.length<3;return r(e,Ro(t,4),n,i,Ur)},dr.reduceRight=function(e,t,n){var r=vs(e)?nn:_n,i=arguments.length<3;return r(e,Ro(t,4),n,i,Fr)},dr.repeat=function(e,t,n){return t=(n?Go(e,t,n):t===o)?1:Hs(t),wi(Ys(e),t)},dr.replace=function(){var e=arguments,t=Ys(e[0]);return e.length<3?t:t.replace(e[1],e[2])},dr.result=function(e,t,n){var r=-1,i=(t=Xi(t,e)).length;for(i||(i=1,e=o);++r<i;){var a=null==e?o:e[la(t[r])];a===o&&(r=i,a=n),e=As(a)?a.call(e):a}return e},dr.round=$u,dr.runInContext=e,dr.sample=function(e){return(vs(e)?Ar:Ai)(e)},dr.size=function(e){if(null==e)return 0;if(ys(e))return Ns(e)?Ln(e):e.length;var t=Bo(e);return t==$||t==ne?e.size:ci(e).length},dr.snakeCase=bu,dr.some=function(e,t,n){var r=vs(e)?rn:Li;return n&&Go(e,t,n)&&(t=o),r(e,Ro(t,3))},dr.sortedIndex=function(e,t){return ji(e,t)},dr.sortedIndexBy=function(e,t,n){return zi(e,t,Ro(n,2))},dr.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=ji(e,t);if(r<n&&ds(e[r],t))return r}return-1},dr.sortedLastIndex=function(e,t){return ji(e,t,!0)},dr.sortedLastIndexBy=function(e,t,n){return zi(e,t,Ro(n,2),!0)},dr.sortedLastIndexOf=function(e,t){if(null==e?0:e.length){var n=ji(e,t,!0)-1;if(ds(e[n],t))return n}return-1},dr.startCase=xu,dr.startsWith=function(e,t,n){return e=Ys(e),n=null==n?0:Nr(Hs(n),0,e.length),t=Ri(t),e.slice(n,n+t.length)==t},dr.subtract=Ku,dr.sum=function(e){return e&&e.length?pn(e,Ou):0},dr.sumBy=function(e,t){return e&&e.length?pn(e,Ro(t,2)):0},dr.template=function(e,t,n){var r=dr.templateSettings;n&&Go(e,t,n)&&(t=o),e=Ys(e),t=Ws({},t,r,So);var i,a,s=Ws({},t.imports,r.imports,So),u=iu(s),c=gn(s,u),l=0,f=t.interpolate||$e,h="__p += '",d=nt((t.escape||$e).source+"|"+f.source+"|"+(f===Ce?Be:$e).source+"|"+(t.evaluate||$e).source+"|$","g"),_="//# sourceURL="+(lt.call(t,"sourceURL")?(t.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++Mt+"]")+"\n";e.replace(d,(function(t,n,r,o,s,u){return r||(r=o),h+=e.slice(l,u).replace(Ke,An),n&&(i=!0,h+="' +\n__e("+n+") +\n'"),s&&(a=!0,h+="';\n"+s+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=u+t.length,t})),h+="';\n";var p=lt.call(t,"variable")&&t.variable;p||(h="with (obj) {\n"+h+"\n}\n"),h=(a?h.replace(ye,""):h).replace(be,"$1").replace(xe,"$1;"),h="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var m=Mu((function(){return Je(u,_+"return "+h).apply(o,c)}));if(m.source=h,Es(m))throw m;return m},dr.times=function(e,t){if((e=Hs(e))<1||e>N)return[];var n=D,r=Xn(e,D);t=Ro(t),e-=D;for(var i=mn(r,t);++n<e;)t(n);return i},dr.toFinite=Fs,dr.toInteger=Hs,dr.toLength=Bs,dr.toLower=function(e){return Ys(e).toLowerCase()},dr.toNumber=Vs,dr.toSafeInteger=function(e){return e?Nr(Hs(e),-N,N):0===e?e:0},dr.toString=Ys,dr.toUpper=function(e){return Ys(e).toUpperCase()},dr.trim=function(e,t,n){if((e=Ys(e))&&(n||t===o))return e.replace(Ne,"");if(!e||!(t=Ri(t)))return e;var r=jn(e),i=jn(t);return Wi(r,bn(r,i),xn(r,i)+1).join("")},dr.trimEnd=function(e,t,n){if((e=Ys(e))&&(n||t===o))return e.replace(Re,"");if(!e||!(t=Ri(t)))return e;var r=jn(e);return Wi(r,0,xn(r,jn(t))+1).join("")},dr.trimStart=function(e,t,n){if((e=Ys(e))&&(n||t===o))return e.replace(Pe,"");if(!e||!(t=Ri(t)))return e;var r=jn(e);return Wi(r,bn(r,jn(t))).join("")},dr.truncate=function(e,t){var n=T,r=C;if(Ts(t)){var i="separator"in t?t.separator:i;n="length"in t?Hs(t.length):n,r="omission"in t?Ri(t.omission):r}var a=(e=Ys(e)).length;if(Mn(e)){var s=jn(e);a=s.length}if(n>=a)return e;var u=n-Ln(r);if(u<1)return r;var c=s?Wi(s,0,u).join(""):e.slice(0,u);if(i===o)return c+r;if(s&&(u+=c.length-u),js(i)){if(e.slice(u).search(i)){var l,f=c;for(i.global||(i=nt(i.source,Ys(Ve.exec(i))+"g")),i.lastIndex=0;l=i.exec(f);)var h=l.index;c=c.slice(0,h===o?u:h)}}else if(e.indexOf(Ri(i),u)!=u){var d=c.lastIndexOf(i);d>-1&&(c=c.slice(0,d))}return c+r},dr.unescape=function(e){return(e=Ys(e))&&Ae.test(e)?e.replace(we,zn):e},dr.uniqueId=function(e){var t=++ft;return Ys(e)+t},dr.upperCase=wu,dr.upperFirst=Eu,dr.each=Ya,dr.eachRight=Xa,dr.first=ya,Nu(dr,(Wu={},Gr(dr,(function(e,t){lt.call(dr.prototype,t)||(Wu[t]=e)})),Wu),{chain:!1}),dr.VERSION="4.17.15",Gt(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){dr[e].placeholder=dr})),Gt(["drop","take"],(function(e,t){vr.prototype[e]=function(n){n=n===o?1:Yn(Hs(n),0);var r=this.__filtered__&&!t?new vr(this):this.clone();return r.__filtered__?r.__takeCount__=Xn(n,r.__takeCount__):r.__views__.push({size:Xn(n,D),type:e+(r.__dir__<0?"Right":"")}),r},vr.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}})),Gt(["filter","map","takeWhile"],(function(e,t){var n=t+1,r=n==L||3==n;vr.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:Ro(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}})),Gt(["head","last"],(function(e,t){var n="take"+(t?"Right":"");vr.prototype[e]=function(){return this[n](1).value()[0]}})),Gt(["initial","tail"],(function(e,t){var n="drop"+(t?"":"Right");vr.prototype[e]=function(){return this.__filtered__?new vr(this):this[n](1)}})),vr.prototype.compact=function(){return this.filter(Ou)},vr.prototype.find=function(e){return this.filter(e).head()},vr.prototype.findLast=function(e){return this.reverse().find(e)},vr.prototype.invokeMap=Ei((function(e,t){return"function"==typeof e?new vr(this):this.map((function(n){return ri(n,e,t)}))})),vr.prototype.reject=function(e){return this.filter(us(Ro(e)))},vr.prototype.slice=function(e,t){e=Hs(e);var n=this;return n.__filtered__&&(e>0||t<0)?new vr(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==o&&(n=(t=Hs(t))<0?n.dropRight(-t):n.take(t-e)),n)},vr.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},vr.prototype.toArray=function(){return this.take(D)},Gr(vr.prototype,(function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),i=dr[r?"take"+("last"==t?"Right":""):t],a=r||/^find/.test(t);i&&(dr.prototype[t]=function(){var t=this.__wrapped__,s=r?[1]:arguments,u=t instanceof vr,c=s[0],l=u||vs(t),f=function(e){var t=i.apply(dr,en([e],s));return r&&h?t[0]:t};l&&n&&"function"==typeof c&&1!=c.length&&(u=l=!1);var h=this.__chain__,d=!!this.__actions__.length,_=a&&!h,p=u&&!d;if(!a&&l){t=p?t:new vr(this);var m=e.apply(t,s);return m.__actions__.push({func:Fa,args:[f],thisArg:o}),new mr(m,h)}return _&&p?e.apply(this,s):(m=this.thru(f),_?r?m.value()[0]:m.value():m)})})),Gt(["pop","push","shift","sort","splice","unshift"],(function(e){var t=ot[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);dr.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var i=this.value();return t.apply(vs(i)?i:[],e)}return this[n]((function(n){return t.apply(vs(n)?n:[],e)}))}})),Gr(vr.prototype,(function(e,t){var n=dr[t];if(n){var r=n.name+"";lt.call(ir,r)||(ir[r]=[]),ir[r].push({name:t,func:n})}})),ir[_o(o,g).name]=[{name:"wrapper",func:o}],vr.prototype.clone=function(){var e=new vr(this.__wrapped__);return e.__actions__=no(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=no(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=no(this.__views__),e},vr.prototype.reverse=function(){if(this.__filtered__){var e=new vr(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},vr.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=vs(e),r=t<0,i=n?e.length:0,o=function(e,t,n){var r=-1,i=n.length;for(;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":e+=a;break;case"dropRight":t-=a;break;case"take":t=Xn(t,e+a);break;case"takeRight":e=Yn(e,t-a)}}return{start:e,end:t}}(0,i,this.__views__),a=o.start,s=o.end,u=s-a,c=r?s:a-1,l=this.__iteratees__,f=l.length,h=0,d=Xn(u,this.__takeCount__);if(!n||!r&&i==u&&d==u)return Hi(e,this.__actions__);var _=[];e:for(;u--&&h<d;){for(var p=-1,m=e[c+=t];++p<f;){var v=l[p],g=v.iteratee,y=v.type,b=g(m);if(y==j)m=b;else if(!b){if(y==L)continue e;break e}}_[h++]=m}return _},dr.prototype.at=Ha,dr.prototype.chain=function(){return Ua(this)},dr.prototype.commit=function(){return new mr(this.value(),this.__chain__)},dr.prototype.next=function(){this.__values__===o&&(this.__values__=Us(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?o:this.__values__[this.__index__++]}},dr.prototype.plant=function(e){for(var t,n=this;n instanceof pr;){var r=ha(n);r.__index__=0,r.__values__=o,t?i.__wrapped__=r:t=r;var i=r;n=n.__wrapped__}return i.__wrapped__=e,t},dr.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof vr){var t=e;return this.__actions__.length&&(t=new vr(this)),(t=t.reverse()).__actions__.push({func:Fa,args:[Ta],thisArg:o}),new mr(t,this.__chain__)}return this.thru(Ta)},dr.prototype.toJSON=dr.prototype.valueOf=dr.prototype.value=function(){return Hi(this.__wrapped__,this.__actions__)},dr.prototype.first=dr.prototype.head,It&&(dr.prototype[It]=function(){return this}),dr}();zt._=Nn,(i=function(){return Nn}.call(t,n,t,r))===o||(r.exports=i)}).call(this)}).call(this,n(28),n(29)(e))},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(19)),o=n(3),a=n(10).default,s=n(30).default;n(10);function u(e){return e.replace("#include <scales>",a).replace("#include <ipyvolume>",s)}t.scaleTypeMap={linear:1,log:2},t.patchMaterial=function(e){e.onBeforeCompile=e=>{e.vertexShader=u(e.vertexShader),e.fragmentShader=u(e.fragmentShader)}},t.patchShader=u,t.createD3Scale=function(e){if("linear"===e.type)return i.scaleLinear().domain(e.domain);if("log"===e.type)return i.scaleLog().domain(e.domain);throw new Error("Scale not supported: "+e)},t.createColormap=function(e){const t=e?e.color_range:["#ff0000","#ff0000"],n=i.scaleLinear().range(t).domain(o.range(t.length).map(e=>e/(t.length-1))),r=[];for(let e=0;e<256;e++){const t=e/255,o=i.color(String(n(t))).hex(),a=String(o),s=[parseInt("0x"+a.substring(1,3),16),parseInt("0x"+a.substring(3,5),16),parseInt("0x"+a.substring(5,7),16)];r.push(s[0],s[1],s[2])}const a=new Uint8Array(r),s=new THREE.DataTexture(a,256,1,THREE.RGBFormat,THREE.UnsignedByteType);return s.needsUpdate=!0,s}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.textAlign={center:new r.Vector2(0,0),left:new r.Vector2(1,0),topLeft:new r.Vector2(1,-1),topRight:new r.Vector2(-1,-1),right:new r.Vector2(-1,0),bottomLeft:new r.Vector2(1,1),bottomRight:new r.Vector2(-1,1)};var i={};t.getFontHeight=function(e){var t=i[e];if(!t){var n=document.getElementsByTagName("body")[0],r=document.createElement("div"),o=document.createTextNode("MÉq");r.appendChild(o),r.setAttribute("style","font:"+e+";position:absolute;top:0;left:0"),n.appendChild(r),t=r.offsetHeight,i[e]=t,n.removeChild(r)}return t}},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(2)),a=n(3),s=i(n(11)),u=r(n(0)),c=r(n(1));const l={int8:Int8Array,int16:Int16Array,int32:Int32Array,uint8:Uint8Array,uint16:Uint16Array,uint32:Uint32Array,float32:Float32Array,float64:Float64Array},f={Int8Array:"int8",Int16Array:"int16",Int32Array:"int32",Uint8Array:"uint8",Uint16Array:"uint16",Uint32Array:"uint32",Float32Array:"float32",Float64Array:"float64"};function h(e,t){const n=l[e.dtype];return null==e&&console.log("data is null"),e.data||console.log("data.data is null"),e.data.buffer||console.log("data.data.buffer is null"),new n(e.data.buffer)}function d(e,t){if(null==e)return null;let n=null;return a.isNumber(e)?e:((n=e.map(e=>h(e))).original_data=e,n)}function _(e,t){if(null==e)return null;let n=null;function r(e){const t=new Float32Array(3*e.length);for(let n=0;n<e.length;n++){const r=new u.Color(e[n]);t[3*n+0]=r.r,t[3*n+1]=r.g,t[3*n+2]=r.b}return t}if("string"==typeof e)return e;if(void 0!==e.dtype)n=[h(e)];else if(void 0!==e[0].dtype)n=e.map(e=>h(e));else{const t=c.get_array_dimension(e);1===t&&"string"==typeof e[0]?n=r(e):2===t&&"string"==typeof e[0][0]?n=e.map(r):console.error("don't understand color type")}return n.original_data=e,n}function p(e,t){return a.isNumber(e)?e:null!=e?void 0===e.original_data?e:e.original_data:null}t.deserialize_array_or_json=d,t.deserialize_color_or_json=_,t.serialize_array_or_json=p,t.texture={deserialize:function(e,t){return"string"==typeof e&&e.startsWith("IPY_MODEL_")?o.unpack_models(e,t):e},serialize:function(e,t){return e}},t.array_or_json={deserialize:d,serialize:p},t.color_or_json={deserialize:_,serialize:p};const m={deserialize:function(e,t){return null===e?null:s.default(h(e),e.shape)},serialize:function(e,t){if(null===e)return null;let r=e;return a.isArray(e)&&!e.data&&(r=n(12)(e)),{data:r.data.buffer,dtype:f[r.data.constructor.name],shape:r.shape}}};t.ndarray=m},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(5),s=n(26),u=function(e){function t(t,n){void 0===t&&(t=""),void 0===n&&(n={});var r=e.call(this)||this;return r._font=n.font||"30px Arial",r._fillStyle=n.fillStyle||"#FFFFFF",r._shadowColor=n.shadowColor||"rgba(0, 0, 0, 0)",r._shadowBlur=n.shadowBlur||0,r._shadowOffsetX=n.shadowOffsetX||0,r._shadowOffsetY=n.shadowOffsetY||0,r.canvas=new s.CanvasText,r.align=n.align||a.textAlign.center,r.side=n.side||o.DoubleSide,r.antialias=void 0===n.antialias||n.antialias,r.text=t,r}return i(t,e),Object.defineProperty(t.prototype,"width",{get:function(){return this.canvas.textWidth},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.canvas.textHeight},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"text",{get:function(){return this._text},set:function(e){this._text!==e&&(this._text=e,this.updateText())},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"font",{get:function(){return this._font},set:function(e){this._font!==e&&(this._font=e,this.updateText())},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fillStyle",{get:function(){return this._fillStyle},set:function(e){this._fillStyle!==e&&(this._fillStyle=e,this.updateText())},enumerable:!0,configurable:!0}),t.prototype.cleanUp=function(){this.texture&&this.texture.dispose()},t.prototype.applyAntiAlias=function(){!1===this.antialias&&(this.texture.magFilter=o.NearestFilter,this.texture.minFilter=o.LinearMipMapLinearFilter)},t}(o.Object3D);t.Text2D=u},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(2)),o=n(3),a=r(n(0)),s=n(9),u=n(4),c=r(n(6)),l=n(1),f=r(n(13)),h=n(14),d={"mesh-vertex":n(40).default,"mesh-fragment":n(41).default};class _ extends h.Object3DView{constructor(){super(...arguments),this.length=1}render(){if(this.figure=this.options.parent,!this.figure)throw"Mesh cannot be displayed, should be added to Figure";this.figure.model.on("change:_shaders",()=>{console.log("updating mesh shader (hot reload)"),this._update_materials()},this),this.previous_values={},this.attributes_changed={},window.last_mesh_view=this,this.meshes=[],this.texture_loader=new a.TextureLoader,this.textures=null,this.model.get("texture")&&this._load_textures(),this.uniforms=Object.assign({domain_x:{type:"2f",value:[0,1]},domain_y:{type:"2f",value:[0,1]},domain_z:{type:"2f",value:[0,1]},domain_color:{type:"2f",value:[0,1]},animation_time_x:{type:"f",value:1},animation_time_y:{type:"f",value:1},animation_time_z:{type:"f",value:1},animation_time_u:{type:"f",value:1},animation_time_v:{type:"f",value:1},animation_time_color:{type:"f",value:1},animation_time_texture:{type:"f",value:1},texture:{type:"t",value:null},texture_previous:{type:"t",value:null},colormap:{type:"t",value:null},id_offset:{type:"f",value:0},volume_texture:{type:"t",value:null},transfer_function:{type:"t",value:null},position_offset:{type:"3f",value:[0,0,0]},volume:{value:null}},a.UniformsUtils.merge([a.UniformsLib.common,a.UniformsLib.lights]));const e=e=>{if(this.model.get(e))return this.model.get(e).obj.clone();{const e=new a.ShaderMaterial;return e.side=a.DoubleSide,e.needsUpdate=!0,e}};this.material=e("material"),this.material_rgb=e("material"),this.material_id=e("material"),this.line_material=e("line_material"),this.material.polygonOffset=!0,this.material.polygonOffsetFactor=1,this.material.polygonOffsetUnits=.1,this.line_material_rgb=e("line_material"),this.line_material_id=e("line_material"),this.materials=[this.material,this.material_rgb,this.material_id,this.line_material,this.line_material_rgb,this.line_material_id],this._update_materials(),this.model.get("material")&&this.model.get("material").on("change",()=>{this._update_materials()}),this.model.get("line_material")&&this.model.get("line_material").on("change",()=>{this._update_materials()});this.model.on("change:volume",()=>{this._update_materials()},this),this._update_color_scale(),this.create_mesh(),this.add_to_scene();const t=()=>{const e=this.model.get("x_offset"),t=this.model.get("y_offset"),n=this.model.get("z_offset");this.uniforms.position_offset.value=[e,t,n],this.figure.update()};this.model.on("change:x_offset change:y_offset change:z_offset",t),t(),this.model.on("change:color change:sequence_index change:x change:y change:z change:v change:u change:triangles change:lines",this.on_change,this),this.model.on("change:geo change:connected",this.update_,this),this.model.on("change:color_scale",this._update_color_scale,this),this.model.on("change:texture",this._load_textures,this),this.model.on("change:visible change:lighting_model change:opacity change:material change:cast_shadow change:receive_shadow",this._update_materials,this)}_load_textures(){const e=this.model.get("texture");e.stream?(this.textures=null,this.texture_video=document.createElement("video"),e.stream.then(t=>{this.texture_video.srcObject=t,this.texture_video.play();new a.VideoTexture(this.texture_video);e.minFilter=a.LinearFilter,this.textures=[e],this._update_materials(),this.update_()})):this.textures=this.model.get("texture").map(e=>this.texture_loader.load(e,e=>{e.wrapS=a.RepeatWrapping,e.wrapT=a.RepeatWrapping,this._update_materials(),this.update_()}))}set_scales(e){const t={};for(const n of Object.keys(e))this.uniforms[`domain_${n}`].value=e[n].domain,t[`SCALE_TYPE_${n}`]=u.scaleTypeMap[e[n].type];o.isEqual(this.scale_defines,t)||(this.scale_defines=t,this._update_materials())}add_to_scene(){this.meshes.forEach(e=>{this.figure.rootObject.add(e)})}update_shadow(){this.meshes.forEach(e=>{e.castShadow=this.model.get("cast_shadow"),e.receiveShadow=this.model.get("receive_shadow")})}remove_from_scene(){this.meshes.forEach(e=>{this.figure.rootObject.remove(e),e.geometry.dispose()})}on_change(e){for(const e of Object.keys(this.model.changedAttributes())){this.previous_values[e]=this.model.previous(e);const t=e.replace("_selected","");if("sequence_index"===t){["x","y","z","u","v","color"].forEach(e=>{o.isArray(this.model.get(e))&&this.model.get(e).length>1&&(this.attributes_changed[e]=[e,"sequence_index"])}),this.attributes_changed.texture=["texture","sequence_index"]}else"triangles"===t||"lines"===t||("selected"===t?this.attributes_changed.color=[e]:(this.attributes_changed[t]=[e],["x","y","z","u","v","color"].indexOf(t)))}this.update_()}update_(){this.remove_from_scene(),this.create_mesh(),this.add_to_scene(),this._update_materials()}_get_value(e,t,n){if(!e)return n;if(o.isArray(e)&&!o.isNumber(e[0])){const n=t%e.length,r=e.original_data[n].shape[0];if(3===e.original_data[n].shape[1]&&o.isNumber(e[n][0])){const t=new Float32Array(4*r),i=e[n];for(let e=0;e<r;e++)t[4*e]=i[3*e],t[4*e+1]=i[3*e+1],t[4*e+2]=i[3*e+2],t[4*e+3]=1;return t}return e[n]}return e}get_current(e,t,n){return this._get_value(this.model.get(e),t,n)}get_previous(e,t,n){return"color"===e&&this.previous_values[e]&&o.isString(this.previous_values[e])?this._get_value(this.model.get(e),t,n):this._get_value(this.previous_values[e]||this.model.get(e),t,n)}_get_value_vec3(e,t,n){return e?o.isArray(e)?e[t%e.length]:e:n}get_current_vec3(e,t,n){return this._get_value_vec3(this.model.get(e),t,n)}get_previous_vec3(e,t,n){return this._get_value_vec3(this.previous_values[e]||this.model.get(e),t,n)}_update_color_scale(){const e=this.model.previous("color_scale"),t=this.model.get("color_scale");e&&(e.off("domain_changed",this._update_color_scale_domain),e.off("colors_changed",this._update_color_scale_texture)),(!e&&t||e&&!e)&&this._update_materials(),t&&(t.on("domain_changed",this._update_color_scale_domain,this),t.on("colors_changed",this._update_color_scale_texture,this),this._update_color_scale_texture(),this._update_color_scale_domain(),this.figure.update())}_update_color_scale_texture(){const e=this.model.get("color_scale");this.uniforms.colormap.value=u.createColormap(e),this.figure.update()}_update_color_scale_domain(){const e=this.model.get("color_scale"),t=this.model.get("color");if(t){let n,r;n=null!==e.min?e.min:Math.min(...t),r=null!==e.max?e.max:Math.max(...t),this.uniforms.domain_color.value=[n,r]}else null!==e.min&&null!==e.max?this.uniforms.domain_color.value=[e.min,e.max]:console.warn("no color set, and color scale does not have a min or max");this.figure.update()}_update_materials(){this.model.get("material")&&this.material.copy(this.model.get("material").obj),this.model.get("material")&&this.material_rgb.copy(this.model.get("material").obj),this.model.get("material")&&this.material_id.copy(this.model.get("material").obj),this.model.get("line_material")&&this.line_material.copy(this.model.get("line_material").obj),this.model.get("line_material")&&this.line_material_rgb.copy(this.model.get("line_material").obj),this.model.get("line_material")&&this.line_material_id.copy(this.model.get("line_material").obj),this.lighting_model=l.materialToLightingModel(this.material),this.material.defines=Object.assign({USE_COLOR:!0,USE_COLORMAP:null!==this.model.get("color_scale")},this.scale_defines),this.material.defines[`AS_${this.lighting_model}`]=!0,this.material.extensions={derivatives:!0},this.material_rgb.defines=Object.assign({AS_COORDINATE:!0,USE_COLOR:!0},this.scale_defines),this.material_id.defines=Object.assign({AS_ID:!0,USE_COLOR:!0},this.scale_defines),this.line_material.defines=Object.assign({IS_LINE:!0},this.scale_defines),this.line_material.defines[`AS_${this.lighting_model}`]=!0,this.line_material_rgb.defines=Object.assign({IS_LINE:!0,AS_COORDINATE:!0,USE_COLOR:!0},this.scale_defines),this.line_material_id.defines=Object.assign({IS_LINE:!0,AS_ID:!0,USE_COLOR:!0},this.scale_defines),this.material.visible=this.material.visible&&this.model.get("visible"),this.material_rgb.visible=this.material.visible&&this.model.get("visible"),this.material_id.visible=this.material.visible&&this.model.get("visible"),this.line_material.visible=this.line_material.visible&&this.model.get("visible"),this.line_material_rgb.visible=this.line_material.visible&&this.model.get("visible"),this.line_material_id.visible=this.line_material.visible&&this.model.get("visible");const e=this.figure.model.get("_shaders")["mesh-vertex"]||d["mesh-vertex"],t=this.figure.model.get("_shaders")["mesh-fragment"]||d["mesh-fragment"],n=.01*Math.random();this.material_depth=new s.MeshDepthMaterialCustom(()=>{const e=Object.assign({},this.material.defines);return delete e[`AS_${this.lighting_model}`],Object.assign({AS_DEPTH:!0},e)},this.uniforms,e,t,{depthPacking:a.RGBADepthPacking,alphaTest:.5+n}),this.material_distance=new s.MeshDistanceMaterialCustom(()=>{const e=Object.assign({},this.material.defines);return delete e[`AS_${this.lighting_model}`],Object.assign({AS_DISTANCE:!0},e)},this.uniforms,e,t,{alphaTest:.5+n}),this.materials.forEach(r=>{r.onBeforeCompile=n=>{n.vertexShader=u.patchShader(e),n.fragmentShader=u.patchShader(t),n.uniforms=Object.assign(Object.assign({},n.uniforms),this.uniforms)},r.alphaTest=.5+n,r.needsUpdate=!0,r.lights=!0}),this.update_shadow(),this.model.get("texture")&&this.textures&&(this.material.defines.USE_TEXTURE=!0);const r=this.model.get("volume");r&&(this.material.defines.USE_VOLUME=!0,this.uniforms.volume_texture.value=r.texture_volume,this.uniforms.transfer_function.value=r.texture_tf,this.uniforms.volume.value=r.uniform_volumes_values),this.material.needsUpdate=!0,this.material_rgb.needsUpdate=!0,this.material_id.needsUpdate=!0,this.line_material.needsUpdate=!0,this.line_material_rgb.needsUpdate=!0,this.line_material_id.needsUpdate=!0,this.surface_mesh&&(this.surface_mesh.customDepthMaterial=this.material_depth,this.surface_mesh.customDistanceMaterial=this.material_distance),this.figure.update()}create_mesh(){let e,t;this.meshes=[];let n,r,i=e=this.model.get("sequence_index"),o=t=i;void 0!==this.previous_values.sequence_index&&(o=t=this.previous_values.sequence_index),i>=o?(n=o-Math.floor(o),r=i-o,i=Math.ceil(i),(o=Math.floor(o))===t&&i===e||i-o>1&&(r=e-(o=i-1),n=0)):(n=Math.ceil(o)-o,r=o-i,i=Math.floor(i),(o=Math.ceil(o))===t&&i===e||o-i>1&&(n=0,r=(o=i+1)-e)),r>1&&0===(r%=1)&&(r=1),0===r&&(r=1);const s=["x","y","z","u","v"],u=[];this.model.get("color_scale")?s.push("color"):u.push("color");const c=new f.Values(s,[],this.get_current.bind(this),i,u),l=new f.Values(s,[],this.get_previous.bind(this),o,u);0===Math.max(c.length,l.length)&&console.error("no single member is an array, not supported (yet?)"),c.trim(c.length),l.trim(l.length);l.length,c.length;c.length>l.length?l.pad(c):c.length<l.length&&c.pad(l),c.merge_to_vec3(["x","y","z"],"vertices"),l.merge_to_vec3(["x","y","z"],"vertices"),c.ensure_array(["color"]),l.ensure_array(["color"]);let h=this.model.get("triangles");if(h){h=h[0];const e=new a.BufferGeometry;e.addAttribute("position",new a.BufferAttribute(c.array_vec3.vertices,3)),e.addAttribute("position_previous",new a.BufferAttribute(l.array_vec3.vertices,3)),this.model.get("color_scale")?(e.addAttribute("color_current",new a.BufferAttribute(c.array.color,1)),e.addAttribute("color_previous",new a.BufferAttribute(l.array.color,1))):(e.addAttribute("color_current",new a.BufferAttribute(c.array_vec4.color,4)),e.addAttribute("color_previous",new a.BufferAttribute(l.array_vec4.color,4))),e.setIndex(new a.BufferAttribute(h,1));const t=this.model.get("texture"),n=c.array.u,r=c.array.v;if(t&&n&&r&&this.textures){const t=i;this.uniforms.texture.value=this.textures[t%this.textures.length],this.uniforms.texture_previous.value=this.textures[o%this.textures.length],e.addAttribute("u",new a.BufferAttribute(n,1)),e.addAttribute("v",new a.BufferAttribute(r,1));const s=l.array.u,u=l.array.v;e.addAttribute("u_previous",new a.BufferAttribute(s,1)),e.addAttribute("v_previous",new a.BufferAttribute(u,1))}e.computeVertexNormals();this.figure.model.get("_shaders")["mesh-vertex"]||d["mesh-vertex"],this.figure.model.get("_shaders")["mesh-fragment"]||d["mesh-fragment"];this.surface_mesh=new a.Mesh(e,this.material),this.surface_mesh.name="Mesh: "+this.model.get("description"),this.surface_mesh.customDepthMaterial=this.material_depth,this.surface_mesh.customDistanceMaterial=this.material_distance,this.surface_mesh.frustumCulled=!1,this.surface_mesh.material_rgb=this.material_rgb,this.surface_mesh.material_id=this.material_id,this.surface_mesh.material_normal=this.material,this.surface_mesh.castShadow=this.model.get("cast_shadow"),this.surface_mesh.receiveShadow=this.model.get("receive_shadow"),this.meshes.push(this.surface_mesh)}const _=this.model.get("lines");if(_){const e=new a.BufferGeometry;e.addAttribute("position",new a.BufferAttribute(c.array_vec3.vertices,3)),e.addAttribute("position_previous",new a.BufferAttribute(l.array_vec3.vertices,3));let t=null,n=null;this.model.get("color_scale")?(t=new a.BufferAttribute(c.array.color,1),n=new a.BufferAttribute(l.array.color,1)):(t=new a.BufferAttribute(c.array_vec4.color,4),n=new a.BufferAttribute(l.array_vec4.color,4)),t.normalized=!0,e.addAttribute("color_current",t),n.normalized=!0,e.addAttribute("color_previous",n);const r=new Uint32Array(_[0]);e.setIndex(new a.BufferAttribute(r,1)),this.line_segments=new a.LineSegments(e,this.line_material),this.line_segments.name="Line for Mesh: "+this.model.get("description"),this.line_segments.frustumCulled=!1,this.line_segments.material_rgb=this.line_material_rgb,this.line_segments.material_id=this.line_material_id,this.line_segments.material_normal=this.line_material,this.meshes.push(this.line_segments)}else this.line_segments=null;this.update_shadow();for(const e of Object.keys(this.attributes_changed)){const t=this.attributes_changed[e],i="animation_time_"+e,o=()=>{t.forEach(e=>{delete this.previous_values[e]})};this.figure.transition(e=>{this.uniforms[i].value=n+r*e},o,this)}this.attributes_changed={}}}t.MeshView=_;class p extends i.WidgetModel{defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:"MeshModel",_view_name:"MeshView",_model_module:"ipyvolume",_view_module:"ipyvolume",_model_module_version:l.semver_range,_view_module_version:l.semver_range,color:"red",color_scale:null,sequence_index:0,connected:!1,visible:!0,visible_lines:!0,visible_faces:!0,cast_shadow:!0,receive_shadow:!0,volume:null,x_offset:0,y_offset:0,z_offset:0,description:"mesh - noname",description_color:"red",hovered:null,icon:null,line_material:null,material:null,popup:null,clicked:null})}}t.MeshModel=p,p.serializers=Object.assign(Object.assign({},i.WidgetModel.serializers),{x:c.array_or_json,y:c.array_or_json,z:c.array_or_json,u:c.array_or_json,v:c.array_or_json,triangles:c.array_or_json,lines:c.array_or_json,color:c.color_or_json,color_scale:{deserialize:i.unpack_models},texture:c.texture,volume:{deserialize:i.unpack_models},material:{deserialize:i.unpack_models},line_material:{deserialize:i.unpack_models},popup:{deserialize:i.unpack_models}})},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(0)),o=n(4);class a extends i.MeshDepthMaterial{constructor(e,t,n,r,i){super(i),this.defines=e,this.uniforms=t,this.onBeforeCompile=e=>{const t=Object.assign({DEPTH_PACKING:3201},this.defines());let i="";for(const e of Object.keys(t))t[e]&&(i+=`#define ${e} ${t[e]}\n`);e.vertexShader=o.patchShader(i+n),e.fragmentShader=o.patchShader(i+r),e.uniforms=Object.assign(Object.assign({},e.uniforms),this.uniforms)}}}t.MeshDepthMaterialCustom=a;class s extends i.MeshDistanceMaterial{constructor(e,t,n,r,i){super(i),this.defines=e,this.uniforms=t,this.onBeforeCompile=e=>{const t=this.defines();let i="";for(const e of Object.keys(t))t[e]&&(i+=`#define ${e} ${t[e]}\n`);e.vertexShader=o.patchShader(i+n),e.fragmentShader=o.patchShader(i+r),e.uniforms=Object.assign(Object.assign({},e.uniforms),this.uniforms)}}}t.MeshDistanceMaterialCustom=s},function(e,t,n){"use strict";n.r(t),t.default="#define SCALE_TYPE_LINEAR 1\n#define SCALE_TYPE_LOG 2\n\n\n#ifdef USE_SCALE_X\n    #if SCALE_TYPE_x == SCALE_TYPE_LINEAR\n        #define SCALE_X(x) scale_transform_linear(x, vec2(-0.5, 0.5), domain_x)\n    #elif SCALE_TYPE_x == SCALE_TYPE_LOG\n        #define SCALE_X(x) scale_transform_log(x, vec2(-0.5, 0.5), domain_x)\n    #endif\n#endif\n\n#ifdef USE_SCALE_Y\n    #if SCALE_TYPE_y == SCALE_TYPE_LINEAR\n        #define SCALE_Y(x) scale_transform_linear(x, vec2(-0.5, 0.5), domain_y)\n    #elif SCALE_TYPE_y == SCALE_TYPE_LOG\n        #define SCALE_Y(x) scale_transform_log(x, vec2(-0.5, 0.5), domain_y)\n    #endif\n#endif\n\n#ifdef USE_SCALE_Z\n    #if SCALE_TYPE_z == SCALE_TYPE_LINEAR\n        #define SCALE_Z(x) scale_transform_linear(x, vec2(-0.5, 0.5), domain_z)\n    #elif SCALE_TYPE_z == SCALE_TYPE_LOG\n        #define SCALE_Z(x) scale_transform_log(x, vec2(-0.5, 0.5), domain_z)\n    #endif\n#endif\n\n#ifdef USE_SCALE_SIZE_X\n    #if SCALE_TYPE_size_x == SCALE_TYPE_LINEAR\n        #define SCALE_SIZE_X(x) scale_transform_linear(x, vec2(0.0, 1.0), domain_size_x)\n    #elif SCALE_TYPE_size_x == SCALE_TYPE_LOG\n        #define SCALE_SIZE_X(x) scale_transform_log(x, vec2(0.0, 1.0), domain_size_x)\n    #endif\n#endif\n\n#ifdef USE_SCALE_SIZE_Y\n    #if SCALE_TYPE_size_y == SCALE_TYPE_LINEAR\n        #define SCALE_SIZE_Y(x) scale_transform_linear(x, vec2(0.0, 1.0), domain_size_y)\n    #elif SCALE_TYPE_size_y == SCALE_TYPE_LOG\n        #define SCALE_SIZE_Y(x) scale_transform_log(x, vec2(0.0, 1.0), domain_size_y)\n    #endif\n#endif\n\n#ifdef USE_SCALE_SIZE_Z\n    #if SCALE_TYPE_size_z == SCALE_TYPE_LINEAR\n        #define SCALE_SIZE_Z(x) scale_transform_linear(x, vec2(0.0, 1.0), domain_size_z)\n    #elif SCALE_TYPE_size_z == SCALE_TYPE_LOG\n        #define SCALE_SIZE_Z(x) scale_transform_log(x, vec2(0.0, 1.0), domain_size_z)\n    #endif\n#endif\n\n#ifdef USE_SCALE_AUX\n    #if SCALE_TYPE_aux == SCALE_TYPE_LINEAR\n        #define SCALE_AUX(x) scale_transform_linear(x, vec2(0.0, 1.0), domain_aux)\n    #elif SCALE_TYPE_aux == SCALE_TYPE_LOG\n        #define SCALE_AUX(x) scale_transform_log(x, vec2(0.0, 1.0), domain_aux)\n    #endif\n#endif\n\nfloat scale_transform_linear(float domain_value, vec2 range, vec2 domain) {\n    float normalized = (domain_value - domain[0]) / (domain[1] - domain[0]);\n    float range_value = normalized * (range[1] - range[0]) + range[0];\n    return range_value;\n}\n\nfloat scale_transform_linear_inverse(float range_value, vec2 range, vec2 domain) {\n    float normalized = (range_value - range[0]) / (range[1] - range[0]);\n    float domain_value = normalized * (domain[1] - domain[0]) + domain[0];\n    return domain_value;\n}\n\nfloat scale_transform_log(float domain_value, vec2 range, vec2 domain) {\n    float normalized = (log(domain_value) - log(domain[0])) / (log(domain[1]) - log(domain[0]));\n    float range_value = normalized * (range[1] - range[0]) + range[0];\n    return range_value;\n}\n\nfloat scale_transform_log_inverse(float range_value, vec2 range, vec2 domain) {\n    float normalized = (range_value - range[0]) / (range[1] - range[0]);\n    float domain_value = exp(normalized * (log(domain[1]) - log(domain[0])) + log(domain[0]));\n    return domain_value;\n}\n"},function(e,t,n){var r=n(31),i=n(32),o="undefined"!=typeof Float64Array;function a(e,t){return e[0]-t[0]}function s(){var e,t=this.stride,n=new Array(t.length);for(e=0;e<n.length;++e)n[e]=[Math.abs(t[e]),e];n.sort(a);var r=new Array(n.length);for(e=0;e<r.length;++e)r[e]=n[e][1];return r}function u(e,t){var n=["View",t,"d",e].join("");t<0&&(n="View_Nil"+e);var i="generic"===e;if(-1===t){var o="function "+n+"(a){this.data=a;};var proto="+n+".prototype;proto.dtype='"+e+"';proto.index=function(){return -1};proto.size=0;proto.dimension=-1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function(){return new "+n+"(this.data);};proto.get=proto.set=function(){};proto.pick=function(){return null};return function construct_"+n+"(a){return new "+n+"(a);}";return new Function(o)()}if(0===t){o="function "+n+"(a,d) {this.data = a;this.offset = d};var proto="+n+".prototype;proto.dtype='"+e+"';proto.index=function(){return this.offset};proto.dimension=0;proto.size=1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function "+n+"_copy() {return new "+n+"(this.data,this.offset)};proto.pick=function "+n+"_pick(){return TrivialArray(this.data);};proto.valueOf=proto.get=function "+n+"_get(){return "+(i?"this.data.get(this.offset)":"this.data[this.offset]")+"};proto.set=function "+n+"_set(v){return "+(i?"this.data.set(this.offset,v)":"this.data[this.offset]=v")+"};return function construct_"+n+"(a,b,c,d){return new "+n+"(a,d)}";return new Function("TrivialArray",o)(c[e][0])}o=["'use strict'"];var a=r(t),u=a.map((function(e){return"i"+e})),l="this.offset+"+a.map((function(e){return"this.stride["+e+"]*i"+e})).join("+"),f=a.map((function(e){return"b"+e})).join(","),h=a.map((function(e){return"c"+e})).join(",");o.push("function "+n+"(a,"+f+","+h+",d){this.data=a","this.shape=["+f+"]","this.stride=["+h+"]","this.offset=d|0}","var proto="+n+".prototype","proto.dtype='"+e+"'","proto.dimension="+t),o.push("Object.defineProperty(proto,'size',{get:function "+n+"_size(){return "+a.map((function(e){return"this.shape["+e+"]"})).join("*"),"}})"),1===t?o.push("proto.order=[0]"):(o.push("Object.defineProperty(proto,'order',{get:"),t<4?(o.push("function "+n+"_order(){"),2===t?o.push("return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})"):3===t&&o.push("var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);if(s0>s1){if(s1>s2){return [2,1,0];}else if(s0>s2){return [1,2,0];}else{return [1,0,2];}}else if(s0>s2){return [2,0,1];}else if(s2>s1){return [0,1,2];}else{return [0,2,1];}}})")):o.push("ORDER})")),o.push("proto.set=function "+n+"_set("+u.join(",")+",v){"),i?o.push("return this.data.set("+l+",v)}"):o.push("return this.data["+l+"]=v}"),o.push("proto.get=function "+n+"_get("+u.join(",")+"){"),i?o.push("return this.data.get("+l+")}"):o.push("return this.data["+l+"]}"),o.push("proto.index=function "+n+"_index(",u.join(),"){return "+l+"}"),o.push("proto.hi=function "+n+"_hi("+u.join(",")+"){return new "+n+"(this.data,"+a.map((function(e){return["(typeof i",e,"!=='number'||i",e,"<0)?this.shape[",e,"]:i",e,"|0"].join("")})).join(",")+","+a.map((function(e){return"this.stride["+e+"]"})).join(",")+",this.offset)}");var d=a.map((function(e){return"a"+e+"=this.shape["+e+"]"})),_=a.map((function(e){return"c"+e+"=this.stride["+e+"]"}));o.push("proto.lo=function "+n+"_lo("+u.join(",")+"){var b=this.offset,d=0,"+d.join(",")+","+_.join(","));for(var p=0;p<t;++p)o.push("if(typeof i"+p+"==='number'&&i"+p+">=0){d=i"+p+"|0;b+=c"+p+"*d;a"+p+"-=d}");o.push("return new "+n+"(this.data,"+a.map((function(e){return"a"+e})).join(",")+","+a.map((function(e){return"c"+e})).join(",")+",b)}"),o.push("proto.step=function "+n+"_step("+u.join(",")+"){var "+a.map((function(e){return"a"+e+"=this.shape["+e+"]"})).join(",")+","+a.map((function(e){return"b"+e+"=this.stride["+e+"]"})).join(",")+",c=this.offset,d=0,ceil=Math.ceil");for(p=0;p<t;++p)o.push("if(typeof i"+p+"==='number'){d=i"+p+"|0;if(d<0){c+=b"+p+"*(a"+p+"-1);a"+p+"=ceil(-a"+p+"/d)}else{a"+p+"=ceil(a"+p+"/d)}b"+p+"*=d}");o.push("return new "+n+"(this.data,"+a.map((function(e){return"a"+e})).join(",")+","+a.map((function(e){return"b"+e})).join(",")+",c)}");var m=new Array(t),v=new Array(t);for(p=0;p<t;++p)m[p]="a[i"+p+"]",v[p]="b[i"+p+"]";o.push("proto.transpose=function "+n+"_transpose("+u+"){"+u.map((function(e,t){return e+"=("+e+"===undefined?"+t+":"+e+"|0)"})).join(";"),"var a=this.shape,b=this.stride;return new "+n+"(this.data,"+m.join(",")+","+v.join(",")+",this.offset)}"),o.push("proto.pick=function "+n+"_pick("+u+"){var a=[],b=[],c=this.offset");for(p=0;p<t;++p)o.push("if(typeof i"+p+"==='number'&&i"+p+">=0){c=(c+this.stride["+p+"]*i"+p+")|0}else{a.push(this.shape["+p+"]);b.push(this.stride["+p+"])}");return o.push("var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}"),o.push("return function construct_"+n+"(data,shape,stride,offset){return new "+n+"(data,"+a.map((function(e){return"shape["+e+"]"})).join(",")+","+a.map((function(e){return"stride["+e+"]"})).join(",")+",offset)}"),new Function("CTOR_LIST","ORDER",o.join("\n"))(c[e],s)}var c={float32:[],float64:[],int8:[],int16:[],int32:[],uint8:[],uint16:[],uint32:[],array:[],uint8_clamped:[],buffer:[],generic:[]};e.exports=function(e,t,n,r){if(void 0===e)return(0,c.array[0])([]);"number"==typeof e&&(e=[e]),void 0===t&&(t=[e.length]);var a=t.length;if(void 0===n){n=new Array(a);for(var s=a-1,l=1;s>=0;--s)n[s]=l,l*=t[s]}if(void 0===r){r=0;for(s=0;s<a;++s)n[s]<0&&(r-=(t[s]-1)*n[s])}for(var f=function(e){if(i(e))return"buffer";if(o)switch(Object.prototype.toString.call(e)){case"[object Float64Array]":return"float64";case"[object Float32Array]":return"float32";case"[object Int8Array]":return"int8";case"[object Int16Array]":return"int16";case"[object Int32Array]":return"int32";case"[object Uint8Array]":return"uint8";case"[object Uint16Array]":return"uint16";case"[object Uint32Array]":return"uint32";case"[object Uint8ClampedArray]":return"uint8_clamped"}return Array.isArray(e)?"array":"generic"}(e),h=c[f];h.length<=a+1;)h.push(u(f,h.length-1));return(0,h[a+1])(e,t,n,r)}},function(e,t,n){"use strict";var r=n(11),i=n(35);e.exports=function(e,t){for(var n=[],o=e,a=1;Array.isArray(o);)n.push(o.length),a*=o.length,o=o[0];return 0===n.length?r():(t||(t=r(new Float64Array(a),n)),i(t,e),t)}},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const i=n(3),o=r(n(0)),a=r(n(1));class s{constructor(e,t,n,r,i=[]){this.length=1/0,this.scalar={},this.scalar_vec3={},this.scalar_vec4={},this.array={},this.array_vec3={},this.array_vec4={},this.values={};for(const t of e){const e=n(t,r,s.defaults[t]);a.is_typedarray(e)?("selected"!==t&&(this.length=Math.min(this.length,e.length)),this.array[t]=e):this.scalar[t]=e,this.values[t]=e}for(const e of t){let t=n(e,r,s.defaults[e]);if(-1!==e.indexOf("color")&&"string"==typeof t){const e=new o.Color(t);t=new Float32Array([e.r,e.g,e.b])}a.is_typedarray(t)&&t.length>3?(this.array_vec3[e]=t,this.length=Math.min(this.length,t.length/3)):this.scalar_vec3[e]=t,this.values[e]=t}for(const e of i){let t=n(e,r,s.defaults[e]);if(-1!==e.indexOf("color")&&"string"==typeof t){const e=new o.Color(t);t=new Float32Array([e.r,e.g,e.b,1])}a.is_typedarray(t)&&t.length>4?(this.array_vec4[e]=t,this.length=Math.min(this.length,t.length/4)):this.scalar_vec4[e]=t,this.values[e]=t}this.length==1/0&&(this.length=1)}trim(e){this.array=i.mapValues(this.array,t=>t.length===e?t:t.slice(0,e)),this.array_vec3=i.mapValues(this.array_vec3,t=>t.length===3*e?t:t.slice(0,3*e)),this.array_vec4=i.mapValues(this.array_vec4,t=>t.length===4*e?t:t.slice(0,4*e)),this.length=e}ensure_array(e){const t=i.isArray(e)?e:[e];for(const e of t){if(void 0!==this.scalar[e]){(this.array[e]=new Float32Array(this.length)).fill(this.scalar[e]),delete this.scalar[e],delete this.values[e]}const t=this.scalar_vec3[e],n=this.scalar_vec4[e];if(void 0!==t){const n=this.array_vec3[e]=new Float32Array(3*this.length);for(let e=0;e<this.length;e++)n[3*e+0]=t[0],n[3*e+1]=t[1],n[3*e+2]=t[2];delete this.scalar_vec3[e],delete this.values[e]}if(void 0!==n){this.array_vec4[e]=new Float32Array(4*this.length);const t=this.array_vec4[e];for(let e=0;e<this.length;e++)t[4*e+0]=n[0],t[4*e+1]=n[1],t[4*e+2]=n[2],t[4*e+3]=n[3];delete this.scalar_vec4[e],delete this.values[e]}}}grow(e){this.array=i.mapValues(this.array,t=>{const n=new t.constructor(e);return n.set(t),n}),this.array_vec3=i.mapValues(this.array_vec3,t=>{const n=new t.constructor(3*e);return n.set(t),n}),this.length=length}pad(e){this.array=i.mapValues(this.array,(t,n)=>{const r=new t.constructor(e.length);return void 0===e.array[n]?r.fill(e.scalar[n],this.length):r.set(e.array[n].slice(this.length),this.length),r.set(t),r}),this.array_vec3=i.mapValues(this.array_vec3,(t,n)=>{const r=new t.constructor(3*e.length);if(void 0===e.array_vec3[n]){const t=e.scalar_vec3[n];for(let n=this.length;n<e.length;n++)r[3*n+0]=t[0],r[3*n+1]=t[1],r[3*n+2]=t[2]}else r.set(e.array_vec3[n].slice(3*this.length),3*this.length);return r.set(t),r}),this.array_vec4=i.mapValues(this.array_vec4,(t,n)=>{const r=new t.constructor(4*e.length);if(void 0===e.array_vec4[n]){const t=e.scalar_vec4[n];for(let n=this.length;n<e.length;n++)r[4*n+0]=t[0],r[4*n+1]=t[1],r[4*n+2]=t[2],r[4*n+3]=t[3]}else r.set(e.array_vec4[n].slice(4*this.length),4*this.length);return r.set(t),r}),this.length=e.length}select(e){const t=this.array.size=this.array.size.slice(),n=this.array.size_selected,r=this.array_vec4.color=this.array_vec4.color.slice(),i=this.array_vec4.color_selected;e.forEach((e,o)=>{o<this.length&&(t[o]=n[o],r[4*o+0]=i[4*o+0],r[4*o+1]=i[4*o+1],r[4*o+2]=i[4*o+2],r[4*o+3]=i[4*o+3])})}merge_to_vec3(e,t){const n=e.length,r=new Float32Array(this.length*n);e.forEach((e,t)=>{this.ensure_array(e);const i=this.array[e];for(let e=0;e<this.length;e++)r[e*n+t]=i[e];delete this.array[e],delete this.values[e]}),this.array_vec3[t]=r}pop(e){(i.isArray(e)?e:[e]).forEach((e,t)=>{[this.scalar,this.scalar_vec3,this.array,this.array_vec3].forEach(t=>{void 0!==t[e]&&delete t[e]})})}add_attributes(e,t=""){t=t,i.forOwn(this.array,(n,r)=>{if(-1===r.indexOf("selected")){const i=new o.InstancedBufferAttribute(n,1,!1,1);e.addAttribute(r+t,i)}}),i.forOwn(this.array_vec3,(n,r)=>{if(-1===r.indexOf("selected")){const i=new o.InstancedBufferAttribute(n,3,!1,1);i.normalized=-1!==r.indexOf("color"),e.addAttribute(r+t,i)}}),i.forOwn(this.array_vec4,(n,r)=>{if(-1===r.indexOf("selected")){const i=new o.InstancedBufferAttribute(n,4,!1,1);i.normalized=-1!==r.indexOf("color"),e.addAttribute(r+t,i)}}),i.forOwn(this.scalar,(n,r)=>{if(-1===r.indexOf("selected")){const i=new o.InstancedBufferAttribute(new Float32Array([n]),1,!1,this.length);e.addAttribute(r+t,i)}}),i.forOwn(this.scalar_vec3,(n,r)=>{if(-1===r.indexOf("selected")){const i=new o.InstancedBufferAttribute(n,3,!1,this.length);i.normalized=-1!==r.indexOf("color"),e.addAttribute(r+t,i)}}),i.forOwn(this.scalar_vec4,(n,r)=>{if(-1===r.indexOf("selected")){const i=new o.InstancedBufferAttribute(n,4,!1,this.length);i.normalized=-1!==r.indexOf("color"),e.addAttribute(r+t,i)}})}}t.Values=s,s.defaults={vx:0,vy:1,vz:0,x:0,y:0,z:0,size:0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2);class i extends r.WidgetView{constructor(){super(...arguments),this.id_offset=0}onHover(e){const t=e-this.uniforms.id_offset.value;t>=0&&t<this.length?(this.model.set("hovered_index",t),this.model.set("hovered",!0)):(this.model.set("hovered_index",null),this.model.set("hovered",!1)),this.model.save_changes()}onClick(e){const t=e-this.uniforms.id_offset.value;t>=0&&t<this.length?(this.model.set("clicked_index",t),this.model.set("clicked",!0)):(this.model.set("clicked_index",null),this.model.set("clicked",!1)),this.model.save_changes()}async popup(e,t,n,r){const i=e-this.uniforms.id_offset.value;if(i>=0&&i<this.length){const e=this.model.get("popup");e&&(this.popupView||(this.popupView=await this.options.parent.create_child_view(e)),r.contains(this.popupView.el)||(r.innerHTML="",r.appendChild(this.popupView.el)),this.popupView.trigger("displayed"),e.set("description",this.model.get("description")),e.set("value",i),e.set("color",this.model.get("description_color")),e.set("icon",this.model.get("icon")),e.save_changes())}else this.popupView&&r.contains(this.popupView.el)&&(r.innerHTML="")}}t.Object3DView=i},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(2)),o=n(3),a=r(n(0)),s=n(9),u=n(14),c=n(4),l=r(n(6)),f=n(1),h=r(n(13)),d=n(42),_={"scatter-vertex":n(43).default,"scatter-fragment":n(44).default};class p extends u.Object3DView{render(){if(this.figure=this.options.parent,this.figure=this.options.parent,!this.figure)throw"Scatter cannot be displayed, should be added to Figure";this.figure.model.on("change:_shaders",()=>{console.log("updating scatter shader (hot reload)"),this._update_materials()},this),this.previous_values={},this.attributes_changed={},window.last_scatter=this,this.texture_loader=new a.TextureLoader,this.textures=null,this.model.get("texture")&&this._load_textures();const e=new a.SphereGeometry(1,2,2),t=new a.SphereBufferGeometry(.5,12,12),n=new a.BoxGeometry(1,1,1),r=new a.Geometry;for(const e of d.vertices){const t=new a.Vector3(e[1],e[2],e[0]);r.vertices.push(t)}let i=0;for(;i<d.indices.length;){const e=[];let t=0,n=!1;for(;!n;)e.push(d.indices[i]),t++,d.indices[i]<0&&(n=!0),i++;e[t-1]=-1-e[t-1];for(let t=0;t<e.length-2;t++){const n=new a.Face3(e[0],e[1+t],e[2+t]);r.faces.push(n)}}const s=new a.PlaneGeometry(2,2,1,1),u=new a.PlaneGeometry(.1,.1,1,1),l=new a.CircleGeometry(1,3,Math.PI/2),f=new a.CircleGeometry(1,32,Math.PI/2),h=new a.CylinderBufferGeometry(0,.2,1),_=new a.CylinderGeometry(.5,.5,1),p=new a.CylinderGeometry(.5,.5,1,100);this.geos={diamond:(new a.BufferGeometry).fromGeometry(e),box:(new a.BufferGeometry).fromGeometry(n),arrow:h,cylinder:(new a.BufferGeometry).fromGeometry(_),cylinder_hr:(new a.BufferGeometry).fromGeometry(p),sphere:t,cat:(new a.BufferGeometry).fromGeometry(r),square_2d:(new a.BufferGeometry).fromGeometry(s),point_2d:(new a.BufferGeometry).fromGeometry(u),circle_2d:(new a.BufferGeometry).fromGeometry(f),triangle_2d:(new a.BufferGeometry).fromGeometry(l)},this.uniforms=Object.assign({domain_x:{type:"2f",value:[0,1]},domain_y:{type:"2f",value:[0,1]},domain_z:{type:"2f",value:[0,1]},domain_size_x:{type:"2f",value:[0,1]},domain_size_y:{type:"2f",value:[0,1]},domain_size_z:{type:"2f",value:[0,1]},domain_aux:{type:"2f",value:[0,1]},domain_color:{type:"2f",value:[0,1]},animation_time_x:{type:"f",value:1},animation_time_y:{type:"f",value:1},animation_time_z:{type:"f",value:1},animation_time_aux:{type:"f",value:1},animation_time_vx:{type:"f",value:1},animation_time_vy:{type:"f",value:1},animation_time_vz:{type:"f",value:1},animation_time_size:{type:"f",value:1},animation_time_color:{type:"f",value:1},geo_matrix:{type:"mat4",value:this.model.get("geo_matrix")},aspect:{type:"vec3",value:[1,1,1]},texture:{type:"t",value:null},texture_previous:{type:"t",value:null},colormap:{type:"t",value:null},id_offset:{type:"f",value:0}},a.UniformsUtils.merge([a.UniformsLib.common,a.UniformsLib.lights]));const m=e=>this.model.get(e)?this.model.get(e).obj.clone():new a.ShaderMaterial;this.material=m("material"),this.material_rgb=m("material"),this.material_id=m("material"),this.line_material=m("line_material"),this.line_material_rgb=m("line_material"),this.line_material_id=m("line_material"),this.materials=[this.material,this.material_id,this.material_rgb,this.line_material,this.line_material_id,this.line_material_rgb],this._update_materials(),this.model.get("material")&&this.model.get("material").on("change",()=>{this._update_materials()}),this.model.get("line_material")&&this.model.get("line_material").on("change",()=>{this._update_materials()}),this.model.on("change:geo_matrix",()=>{this.uniforms.geo_matrix.value=this.model.get("geo_matrix"),this._update_materials(),this.figure.update()}),this.model.on("change:shader_snippets",()=>{this._update_materials(),this.figure.update()}),this._update_color_scale(),this.create_mesh(),this.add_to_scene(),this.model.on("change:size change:size_selected change:color change:color_selected change:sequence_index change:x change:y change:z change:aux change:selected change:vx change:vy change:vz",this.on_change,this),this.model.on("change:geo change:connected",this.update_,this),this.model.on("change:color_scale",this._update_color_scale,this),this.model.on("change:texture",this._load_textures,this),this.model.on("change:visible",this._update_materials,this),this.model.on("change:geo",()=>{this._update_materials()});const v=e=>{const t=e+"_scale",n="domain_"+e,r=()=>{const e=this.model.get(t);let r=0,i=100;e&&(null!==e.min&&(r=e.min),null!==e.max&&(i=e.max)),this.uniforms[n].value=[r,i],this.mesh&&this.figure.update()};return r(),()=>{const n=this.model.previous(t),i=this.model.get(t);n&&n.off("domain_changed",r);const a=Object.assign({},this.scale_defines);a[`SCALE_TYPE_${e}`]=c.scaleTypeMap[i?i.type:"linear"];const s=!o.isEqual(this.scale_defines,a);this.scale_defines=a,(!n&&i||n&&!n||s)&&this._update_materials(),i&&(i.on("domain_changed",r,this),r(),this.figure.update())}};["size_x","size_y","size_z","aux"].forEach(e=>{const t=v(e);t(),this.model.on(`change:${e}_scale`,t,this)}),this.model.on("change:material",this._update_materials,this),this.model.on("change:cast_shadow change:receive_shadow",this.update_,this)}_load_textures(){const e=this.model.get("texture");e.stream?(this.textures=null,this.texture_video=document.createElement("video"),e.stream.then(t=>{this.texture_video.src=window.URL.createObjectURL(t),new a.VideoTexture(this.texture_video).minFilter=a.LinearFilter,this.textures=[e],this.update_()})):this.textures=this.model.get("texture").map(e=>this.texture_loader.load(e,e=>{e.wrapS=a.RepeatWrapping,e.wrapT=a.RepeatWrapping,this.update_()}))}set_scales(e){const t=Object.assign({},this.scale_defines);for(const n of Object.keys(e))this.uniforms[`domain_${n}`].value=e[n].domain,t[`SCALE_TYPE_${n}`]=c.scaleTypeMap[e[n].type];o.isEqual(this.scale_defines,t)||(this.scale_defines=t,this._update_materials())}add_to_scene(){this.figure.rootObject.add(this.mesh),this.line_segments&&this.figure.rootObject.add(this.line_segments)}remove_from_scene(){-1===this.figure.rootObject.children.indexOf(this.mesh)&&console.warn("trying to removing scatter mesh from scene that does not include it"),this.figure.rootObject.remove(this.mesh),this.mesh.geometry.dispose(),this.line_segments&&(this.figure.rootObject.remove(this.line_segments),this.line_segments.geometry.dispose())}on_change(){for(const e of Object.keys(this.model.changedAttributes())){this.previous_values[e]=this.model.previous(e);const t=e.replace("_selected","");if("sequence_index"===t){["x","y","z","aux","vx","vy","vz","size","color"].forEach(e=>{o.isArray(this.model.get(e))&&(this.attributes_changed[e]=[e,"sequence_index"])})}else"geo"===t||("selected"===t?(this.attributes_changed.color=[e],this.attributes_changed.size=[]):(this.attributes_changed[t]=[e],-1!==["x","y","z","aux","vx","vy","vz","color"].indexOf(t)&&(this.attributes_changed.size=[])))}this.update_()}update_(){this.remove_from_scene(),this.create_mesh(),this.add_to_scene(),this.figure.update()}_get_value(e,t,n){return e?o.isArray(e)&&!o.isNumber(e[0])?e[t%e.length]:e:n}get_next(e,t,n){return this._get_value(this.model.get(e),t,n)}get_previous(e,t,n){return this._get_value(this.previous_values[e]||this.model.get(e),t,n)}_get_value_vec3(e,t,n){return e?o.isArray(e)?e[t%e.length]:e:n}get_next_vec3(e,t,n){return this._get_value_vec3(this.model.get(e),t,n)}get_previous_vec3(e,t,n){return this._get_value_vec3(this.previous_values[e]||this.model.get(e),t,n)}_update_color_scale(){const e=this.model.previous("color_scale"),t=this.model.get("color_scale");e&&(e.off("domain_changed",this._update_color_scale_domain),e.off("colors_changed",this._update_color_scale_texture)),(!e&&t||e&&!e)&&this._update_materials(),t&&(t.on("domain_changed",this._update_color_scale_domain,this),t.on("colors_changed",this._update_color_scale_texture,this),this._update_color_scale_texture(),this._update_color_scale_domain(),this.figure.update()),this.mesh&&this.update_()}_update_color_scale_texture(){const e=this.model.get("color_scale");this.uniforms.colormap.value=c.createColormap(e),this.figure.update()}_update_color_scale_domain(){const e=this.model.get("color_scale"),t=this.model.get("color");if(t){let n,r;n=null!==e.min?e.min:Math.min(...t),r=null!==e.max?e.max:Math.max(...t),this.uniforms.domain_color.value=[n,r]}else null!==e.min&&null!==e.max?this.uniforms.domain_color.value=[e.min,e.max]:console.warn("no color set, and color scale does not have a min or max");this.figure.update()}_update_materials(){this.model.get("material")&&this.material.copy(this.model.get("material").obj),this.model.get("material")&&this.material_rgb.copy(this.model.get("material").obj),this.model.get("line_material")&&this.line_material.copy(this.model.get("line_material").obj),this.model.get("line_material")&&(this.line_material_rgb.copy(this.model.get("line_material").obj),this.line_material_rgb.linewidth=this.line_material.linewidth=this.model.get("line_material").obj.linewidth),this.lighting_model=f.materialToLightingModel(this.material);const e=this.model.get("shader_snippets"),t={};for(const n of Object.keys(e))t["SHADER_SNIPPET_"+n.toUpperCase()]=e[n];this.material.defines=Object.assign(Object.assign({USE_COLOR:!0,USE_COLORMAP:null!==this.model.get("color_scale")},this.scale_defines),t),this.material.defines[`AS_${this.lighting_model}`]=!0,this.material.extensions={derivatives:!0},this.material_id.defines=Object.assign(Object.assign({AS_ID:!0,USE_COLOR:!0},this.scale_defines),t),this.material_id.extensions={derivatives:!0},this.material_rgb.defines=Object.assign(Object.assign({AS_COORDINATE:!0,USE_COLOR:!0},this.scale_defines),t),this.material_rgb.extensions={derivatives:!0},this.line_material.defines=Object.assign(Object.assign({IS_LINE:!0,USE_COLOR:!0},this.scale_defines),t),this.line_material.defines[`AS_${this.lighting_model}`]=!0,this.line_material_rgb.defines={AS_COORDINATE:!0,IS_LINE:!0,USE_COLOR:!0},this.line_material_id.defines={AS_ID:!0,IS_LINE:!0,USE_COLOR:!0},this.material.visible=this.material.visible&&this.model.get("visible"),this.material_rgb.visible=this.material.visible&&this.model.get("visible"),this.material_id.visible=this.material.visible&&this.model.get("visible"),this.line_material.visible=this.line_material.visible&&this.model.get("visible"),this.line_material_rgb.visible=this.line_material.visible&&this.model.get("visible"),this.line_material_id.visible=this.line_material.visible&&this.model.get("visible");const n=this.figure.model.get("_shaders")["scatter-vertex"]||_["scatter-vertex"],r=this.figure.model.get("_shaders")["scatter-fragment"]||_["scatter-fragment"],i=.01*Math.random();this.material_depth=new s.MeshDepthMaterialCustom(()=>{const e=Object.assign({},this.material.defines);return delete e[`AS_${this.lighting_model}`],this.model.get("geo").endsWith("2d")&&(e.AS_SPRITE=!0),Object.assign({AS_DEPTH:!0},e)},this.uniforms,n,r,{depthPacking:a.RGBADepthPacking,alphaTest:.5+i}),this.material_distance=new s.MeshDistanceMaterialCustom(()=>{const e=Object.assign({},this.material.defines);return delete e[`AS_${this.lighting_model}`],this.model.get("geo").endsWith("2d")&&(e.AS_SPRITE=!0),Object.assign({AS_DISTANCE:!0},e)},this.uniforms,n,r,{alphaTest:.5+i}),this.materials.forEach(e=>{e.onBeforeCompile=e=>{e.vertexShader=c.patchShader(n),e.fragmentShader=c.patchShader(r),e.uniforms=Object.assign(Object.assign({},e.uniforms),this.uniforms)},e.alphaTest=.5+i,e.needsUpdate=!0,e.lights=!0,this.model.get("aux")&&(e.defines.USE_AUX=!0)});const o=this.model.get("geo").endsWith("2d");if(o&&(this.material.defines.USE_SPRITE=!0,this.material_rgb.defines.USE_SPRITE=!0,this.material_id.defines.USE_SPRITE=!0),o){this.model.get("texture")&&this.textures&&(this.material.defines.USE_TEXTURE=!0)}this.material.needsUpdate=!0,this.material_rgb.needsUpdate=!0,this.material_id.needsUpdate=!0,this.line_material.needsUpdate=!0,this.line_material_rgb.needsUpdate=!0,this.line_material_id.needsUpdate=!0,this.mesh&&(this.mesh.customDepthMaterial=this.material_depth,this.mesh.customDistanceMaterial=this.material_distance),this.figure.update()}create_mesh(){let e=this.model.get("geo");e||(e="diamond");const t=e.endsWith("2d"),n=this.geos[e],r=new a.InstancedBufferGeometry,i=n.attributes.position.clone();r.addAttribute("position",i),n.index&&(r.index=n.index),r.computeVertexNormals();const o=this.model.get("sequence_index");let s=this.previous_values.sequence_index;void 0===s&&(s=o);const u=["x","y","z","aux","vx","vy","vz","size","size_selected"],c=[];this.model.get("color_scale")?u.push("color","color_selected"):c.push("color","color_selected");const l=new h.Values(u,[],this.get_next.bind(this),o,c),f=new h.Values(u,[],this.get_previous.bind(this),s,c);0===Math.max(l.length,f.length)&&console.error("no single member is an array, not supported (yet?)"),l.trim(l.length),f.trim(f.length);const d=f.length,_=l.length;if(this.model.get("selected")||this.previous_values.selected){l.ensure_array(["size","size_selected","color","color_selected"]),f.ensure_array(["size","size_selected","color","color_selected"]);let e=this.get_next("selected",o,[]);l.select(e),e=this.get_previous("selected",s,[]),f.select(e)}l.length!==f.length&&(l.ensure_array("size"),f.ensure_array("size")),l.length>f.length?(f.pad(l),f.array.size.fill(0,d)):l.length<f.length&&(l.pad(f),l.array.size.fill(0,_)),this.length=l.length,l.merge_to_vec3(["vx","vy","vz"],"v"),f.merge_to_vec3(["vx","vy","vz"],"v"),l.pop(["size_selected","color_selected"]),f.pop(["size_selected","color_selected"]),l.add_attributes(r,"_next"),f.add_attributes(r,"_previous");const p=new Float32Array(l.length);for(let e=0;e<l.length;e++)p[e]=e;const m=new a.InstancedBufferAttribute(p,1,!1,1);if(r.addAttribute("instance_id",m),t){this.model.get("texture")&&this.textures&&(this.material.uniforms.texture.value=this.textures[o%this.textures.length],this.material.uniforms.texture_previous.value=this.textures[s%this.textures.length])}if(this.mesh=new a.Mesh(r,this.material),this.mesh.castShadow=this.model.get("cast_shadow"),this.mesh.receiveShadow=this.model.get("receive_shadow"),this.mesh.customDepthMaterial=this.material_depth,this.mesh.customDistanceMaterial=this.material_distance,this.mesh.material_id=this.material_id,this.mesh.material_rgb=this.material_rgb,this.mesh.material_normal=this.material,this.model.get("connected")){const e=new a.BufferGeometry;l.merge_to_vec3(["x","y","z"],"vertices"),f.merge_to_vec3(["x","y","z"],"vertices"),e.addAttribute("position",new a.BufferAttribute(l.array_vec3.vertices,3)),e.addAttribute("position_previous",new a.BufferAttribute(f.array_vec3.vertices,3)),l.ensure_array(["color"]),f.ensure_array(["color"]),this.model.get("color_scale")?(e.addAttribute("color_next",new a.BufferAttribute(l.array.color,1)),e.addAttribute("color_previous",new a.BufferAttribute(f.array.color,1))):(e.addAttribute("color_next",new a.BufferAttribute(l.array_vec4.color,4)),e.addAttribute("color_previous",new a.BufferAttribute(f.array_vec4.color,4))),e.computeVertexNormals(),this.line_segments=new a.Line(e,this.line_material),this.line_segments.frustumCulled=!1,this.line_segments.castShadow=this.model.get("cast_shadow"),this.line_segments.receiveShadow=this.model.get("receive_shadow")}else this.line_segments=null;for(const e of Object.keys(this.attributes_changed)){const t=this.attributes_changed[e],n="animation_time_"+e,r=()=>{t.forEach(e=>{delete this.previous_values[e]})},i=e=>{this.uniforms[n].value=e};this.figure.transition(i,r,this)}this.attributes_changed={}}}t.ScatterView=p;class m extends i.WidgetModel{defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:"ScatterModel",_view_name:"ScatterView",_model_module:"ipyvolume",_view_module:"ipyvolume",_model_module_version:f.semver_range,_view_module_version:f.semver_range,size:5,size_selected:7,color:"red",color_scale:null,color_selected:"white",geo:"diamond",geo_matrix:[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],sequence_index:0,connected:!1,visible:!0,selected:null,shader_snippets:{size:"\n"},cast_shadow:!0,receive_shadow:!0})}}t.ScatterModel=m,m.serializers=Object.assign(Object.assign({},i.WidgetModel.serializers),{x:l.array_or_json,y:l.array_or_json,z:l.array_or_json,aux:l.array_or_json,aux_scale:{deserialize:i.unpack_models},vx:l.array_or_json,vy:l.array_or_json,vz:l.array_or_json,selected:l.array_or_json,size:l.array_or_json,size_selected:l.array_or_json,size_x_scale:{deserialize:i.unpack_models},size_y_scale:{deserialize:i.unpack_models},size_z_scale:{deserialize:i.unpack_models},color:l.color_or_json,color_scale:{deserialize:i.unpack_models},color_selected:l.color_or_json,texture:l.texture,material:{deserialize:i.unpack_models},line_material:{deserialize:i.unpack_models},popup:{deserialize:i.unpack_models}})},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(2)),o=n(3),a=r(n(0)),s=n(4),u=n(1),c={box_fragment:n(17).default,box_vertex:n(18).default};class l extends i.WidgetView{render(){this.renderer=this.options.parent,this.attributes_changed={},this.data=[];this.renderer.getRenderSize();this.texture_loader=new a.TextureLoader,this.tf_set(),this.data_set();const e=()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()};this.model.on("change:rendering_method",e),e(),this.model.on("change:data",this.data_set,this);const t=()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()};this.model.on("change:data_min change:data_max change:show_min change:show_max",t,this),t();const n=()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()};this.model.on("change:clamp_min change:clamp_max",n,this),n();const r=()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()};r(),this.model.on("change:opacity_scale",r);const i=()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()};i(),this.model.on("change:lighting",i);const o=()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()};o(),this.model.on("change:ray_steps",o);const s=()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()};s(),this.model.on("change:brightness",s),this.model.on("change:tf",this.tf_set,this),this.model.on("change:extent",()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()});const u=()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()};u(),this.model.get("material").on("change",u),this.model.on("change:visible",()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()}),window.last_volume=this}get_ray_steps(){let e=this.model.get("ray_steps");return null==e&&(e=o.max(this.data_shape)),e}data_set(){this.volume=this.model.volume,this.texture_volume=this.model.texture_volume,this.data_shape=[this.volume.slice_shape[0],this.volume.slice_shape[1],this.volume.slices],this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()}tf_set(){this.model.get("tf")&&(this.model.get("tf").on("change:rgba",this.tf_changed,this),this.tf_changed())}tf_changed(){this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()}set_scales(e){this.model.set_scales(e)}}t.VolumeView=l;class f extends i.WidgetModel{initialize(e,t){super.initialize(e,t);const n=()=>{if(this.volume=this.get("data"),!this.volume)return;const e=new Uint8Array(this.volume.tiles.buffer);this.texture_volume=new a.DataTexture(e,this.volume.image_shape[0],this.volume.image_shape[1],a.RGBAFormat,a.UnsignedByteType),this.texture_volume.magFilter=a.LinearFilter,this.texture_volume.minFilter=a.LinearFilter,this.uniform_volumes_values.rows=this.volume.rows,this.uniform_volumes_values.columns=this.volume.columns,this.uniform_volumes_values.slices=this.volume.slices,this.uniform_volumes_values.size=this.volume.image_shape,this.uniform_volumes_values.slice_size=this.volume.slice_shape,this.uniform_volumes_values.data_range=[this.get("data_min"),this.get("data_max")],this.uniform_volumes_values.show_range=[this.get("show_min"),this.get("show_max")],this.texture_volume.needsUpdate=!0,this.uniform_data.value=[this.texture_volume],this.uniform_data.value=[this.texture_volume]};this.on("change:data",()=>{n()}),this.uniform_volumes_values={scale:[1,1,1],offset:[0,0,0]},this.uniform_data={type:"tv",value:[]},n();this.on("change:data_min change:data_max change:show_min change:show_max",()=>{this.uniform_volumes_values.data_range=[this.get("data_min"),this.get("data_max")],this.uniform_volumes_values.show_range=[this.get("show_min"),this.get("show_max")]},this);const r=()=>{this.uniform_volumes_values.clamp_min=this.get("clamp_min"),this.uniform_volumes_values.clamp_max=this.get("clamp_max")};this.on("change:clamp_min change:clamp_max",r,this),r();const i=()=>{this.uniform_volumes_values.opacity_scale=this.get("opacity_scale")};i(),this.on("change:opacity_scale",i);const o=()=>{this.uniform_volumes_values.lighting=this.get("lighting")};o(),this.on("change:lighting",o);const s=()=>{this.uniform_volumes_values.brightness=this.get("brightness")};s(),this.on("change:brightness",s);const u=()=>{const e=this.get("material").obj,t=new a.Color("white");this.uniform_volumes_values.diffuseColor=e.color||t,this.uniform_volumes_values.specular=e.specular||t,this.uniform_volumes_values.shininess=e.shininess||t,this.uniform_volumes_values.emissive=e.emissive||t};u(),this.get("material").on("change",u),this.box_material=new a.ShaderMaterial({uniforms:{offset:{type:"3f",value:[0,0,0]},scale:{type:"3f",value:[1,1,1]}},fragmentShader:c.box_fragment,vertexShader:c.box_vertex,side:a.BackSide}),this.vol_box_mesh=new a.Mesh(this.vol_box_geo,this.box_material),this.vol_box_mesh.name="Box for "+this.get("description"),this.vol_box_geo=new a.BoxBufferGeometry(1,1,1),this.vol_box_mesh.isVolume=!0,this.vol_box_mesh.updateMatrix(),this.vol_box_mesh.matrixAutoUpdate=!0,this.uniform_transfer_function={type:"tv",value:[]},this.on("change:tf",this.tf_set,this),this.tf_set()}tf_set(){this.get("tf")&&(this.get("tf").on("change:rgba",this.tf_changed,this),this.tf_changed())}tf_changed(){const e=this.get("tf");e&&(this.texture_tf=new a.DataTexture(e.get_data_array(),e.get("rgba").shape[0],1,a.RGBAFormat,a.UnsignedByteType),this.texture_tf.needsUpdate=!0,this.uniform_transfer_function.value=[this.texture_tf])}is_max_intensity(){return"MAX_INTENSITY"===this.get("rendering_method")}is_normal(){return"NORMAL"===this.get("rendering_method")}set_scales(e){const t=s.createD3Scale(e.x).range([0,1]),n=s.createD3Scale(e.y).range([0,1]),r=s.createD3Scale(e.z).range([0,1]),i=this.get("extent"),o=t(i[0][0]),u=t(i[0][1]),c=n(i[1][0]),l=n(i[1][1]),f=r(i[2][0]),h=r(i[2][1]),d=Math.max(o,0),_=Math.min(u,1),p=Math.max(c,0),m=Math.min(l,1),v=Math.max(f,0),g=Math.min(h,1);this.box_geo=new a.BoxBufferGeometry(1,1,1),this.box_geo.translate(.5,.5,.5),this.box_geo.scale(_-d,m-p,g-v),this.box_geo.translate(d,p,v),this.box_geo.translate(-.5,-.5,-.5),this.vol_box_mesh.geometry=this.box_geo,this.uniform_volumes_values.scale=[1/(u-o),1/(l-c),1/(h-f)],this.uniform_volumes_values.offset=[-o,-c,-f]}add_to_scene(e){e.add(this.vol_box_mesh)}remove_from_scene(e){e.remove(this.vol_box_mesh)}defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:"VolumeModel",_view_name:"VolumeView",_model_module:"ipyvolume",_view_module:"ipyvolume",_model_module_version:u.semver_range,_view_module_version:u.semver_range,sequence_index:0,step_size:.01,opacity_scale:1,brightness:1,extent:null,lighting:!0,rendering_method:"NORMAL",clamp_min:!1,clamp_max:!1,data_range:null,show_range:null,show_min:0,show_max:1,data_min:0,data_max:1,ray_steps:null,material:null,visible:!0})}}t.VolumeModel=f,f.serializers=Object.assign(Object.assign({},i.WidgetModel.serializers),{tf:{deserialize:i.unpack_models},data:{serialize:e=>e},material:{deserialize:i.unpack_models}})},function(e,t,n){"use strict";n.r(t),t.default="varying vec4 vertex_color;\n\nvoid main(void) {\n    gl_FragColor = vertex_color;\n}\n"},function(e,t,n){"use strict";n.r(t),t.default="varying vec4 vertex_color;\nuniform vec3 scale;\nuniform vec3 offset;\n\nvoid main(void) {\n    vec3 pos = position;\n    gl_Position = projectionMatrix *\n                modelViewMatrix *\n                vec4(pos,1.0);\n    //vertex_color = vec4((pos + vec3(0.5, 0.5, 0.5))*scale + offset, 1);\n    vertex_color = vec4((pos + vec3(0.5, 0.5, 0.5)), 1);\n}\n"},function(e,t,n){"use strict";n.r(t);var r=function(e,t){return e<t?-1:e>t?1:e>=t?0:NaN},i=function(e){var t;return 1===e.length&&(t=e,e=function(e,n){return r(t(e),n)}),{left:function(t,n,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){var o=r+i>>>1;e(t[o],n)<0?r=o+1:i=o}return r},right:function(t,n,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){var o=r+i>>>1;e(t[o],n)>0?i=o:r=o+1}return r}}};var o=i(r),a=o.right,s=o.left,u=a,c=function(e,t){null==t&&(t=l);for(var n=0,r=e.length-1,i=e[0],o=new Array(r<0?0:r);n<r;)o[n]=t(i,i=e[++n]);return o};function l(e,t){return[e,t]}var f=function(e,t,n){var r,i,o,a,s=e.length,u=t.length,c=new Array(s*u);for(null==n&&(n=l),r=o=0;r<s;++r)for(a=e[r],i=0;i<u;++i,++o)c[o]=n(a,t[i]);return c},h=function(e,t){return t<e?-1:t>e?1:t>=e?0:NaN},d=function(e){return null===e?NaN:+e},_=function(e,t){var n,r,i=e.length,o=0,a=-1,s=0,u=0;if(null==t)for(;++a<i;)isNaN(n=d(e[a]))||(u+=(r=n-s)*(n-(s+=r/++o)));else for(;++a<i;)isNaN(n=d(t(e[a],a,e)))||(u+=(r=n-s)*(n-(s+=r/++o)));if(o>1)return u/(o-1)},p=function(e,t){var n=_(e,t);return n?Math.sqrt(n):n},m=function(e,t){var n,r,i,o=e.length,a=-1;if(null==t){for(;++a<o;)if(null!=(n=e[a])&&n>=n)for(r=i=n;++a<o;)null!=(n=e[a])&&(r>n&&(r=n),i<n&&(i=n))}else for(;++a<o;)if(null!=(n=t(e[a],a,e))&&n>=n)for(r=i=n;++a<o;)null!=(n=t(e[a],a,e))&&(r>n&&(r=n),i<n&&(i=n));return[r,i]},v=Array.prototype,g=v.slice,y=v.map,b=function(e){return function(){return e}},x=function(e){return e},w=function(e,t,n){e=+e,t=+t,n=(i=arguments.length)<2?(t=e,e=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((t-e)/n)),o=new Array(i);++r<i;)o[r]=e+r*n;return o},E=Math.sqrt(50),A=Math.sqrt(10),M=Math.sqrt(2),S=function(e,t,n){var r,i,o,a,s=-1;if(n=+n,(e=+e)===(t=+t)&&n>0)return[e];if((r=t<e)&&(i=e,e=t,t=i),0===(a=T(e,t,n))||!isFinite(a))return[];if(a>0)for(e=Math.ceil(e/a),t=Math.floor(t/a),o=new Array(i=Math.ceil(t-e+1));++s<i;)o[s]=(e+s)*a;else for(e=Math.floor(e*a),t=Math.ceil(t*a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(e-s)/a;return r&&o.reverse(),o};function T(e,t,n){var r=(t-e)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=E?10:o>=A?5:o>=M?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=E?10:o>=A?5:o>=M?2:1)}function C(e,t,n){var r=Math.abs(t-e)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=E?i*=10:o>=A?i*=5:o>=M&&(i*=2),t<e?-i:i}var k=function(e){return Math.ceil(Math.log(e.length)/Math.LN2)+1},O=function(){var e=x,t=m,n=k;function r(r){var i,o,a=r.length,s=new Array(a);for(i=0;i<a;++i)s[i]=e(r[i],i,r);var c=t(s),l=c[0],f=c[1],h=n(s,l,f);Array.isArray(h)||(h=C(l,f,h),h=w(Math.ceil(l/h)*h,f,h));for(var d=h.length;h[0]<=l;)h.shift(),--d;for(;h[d-1]>f;)h.pop(),--d;var _,p=new Array(d+1);for(i=0;i<=d;++i)(_=p[i]=[]).x0=i>0?h[i-1]:l,_.x1=i<d?h[i]:f;for(i=0;i<a;++i)l<=(o=s[i])&&o<=f&&p[u(h,o,0,d)].push(r[i]);return p}return r.value=function(t){return arguments.length?(e="function"==typeof t?t:b(t),r):e},r.domain=function(e){return arguments.length?(t="function"==typeof e?e:b([e[0],e[1]]),r):t},r.thresholds=function(e){return arguments.length?(n="function"==typeof e?e:Array.isArray(e)?b(g.call(e)):b(e),r):n},r},L=function(e,t,n){if(null==n&&(n=d),r=e.length){if((t=+t)<=0||r<2)return+n(e[0],0,e);if(t>=1)return+n(e[r-1],r-1,e);var r,i=(r-1)*t,o=Math.floor(i),a=+n(e[o],o,e);return a+(+n(e[o+1],o+1,e)-a)*(i-o)}},j=function(e,t,n){return e=y.call(e,d).sort(r),Math.ceil((n-t)/(2*(L(e,.75)-L(e,.25))*Math.pow(e.length,-1/3)))},z=function(e,t,n){return Math.ceil((n-t)/(3.5*p(e)*Math.pow(e.length,-1/3)))},N=function(e,t){var n,r,i=e.length,o=-1;if(null==t){for(;++o<i;)if(null!=(n=e[o])&&n>=n)for(r=n;++o<i;)null!=(n=e[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=t(e[o],o,e))&&n>=n)for(r=n;++o<i;)null!=(n=t(e[o],o,e))&&n>r&&(r=n);return r},P=function(e,t){var n,r=e.length,i=r,o=-1,a=0;if(null==t)for(;++o<r;)isNaN(n=d(e[o]))?--i:a+=n;else for(;++o<r;)isNaN(n=d(t(e[o],o,e)))?--i:a+=n;if(i)return a/i},R=function(e,t){var n,i=e.length,o=-1,a=[];if(null==t)for(;++o<i;)isNaN(n=d(e[o]))||a.push(n);else for(;++o<i;)isNaN(n=d(t(e[o],o,e)))||a.push(n);return L(a.sort(r),.5)},D=function(e){for(var t,n,r,i=e.length,o=-1,a=0;++o<i;)a+=e[o].length;for(n=new Array(a);--i>=0;)for(t=(r=e[i]).length;--t>=0;)n[--a]=r[t];return n},I=function(e,t){var n,r,i=e.length,o=-1;if(null==t){for(;++o<i;)if(null!=(n=e[o])&&n>=n)for(r=n;++o<i;)null!=(n=e[o])&&r>n&&(r=n)}else for(;++o<i;)if(null!=(n=t(e[o],o,e))&&n>=n)for(r=n;++o<i;)null!=(n=t(e[o],o,e))&&r>n&&(r=n);return r},U=function(e,t){for(var n=t.length,r=new Array(n);n--;)r[n]=e[t[n]];return r},F=function(e,t){if(n=e.length){var n,i,o=0,a=0,s=e[a];for(null==t&&(t=r);++o<n;)(t(i=e[o],s)<0||0!==t(s,s))&&(s=i,a=o);return 0===t(s,s)?a:void 0}},H=function(e,t,n){for(var r,i,o=(null==n?e.length:n)-(t=null==t?0:+t);o;)i=Math.random()*o--|0,r=e[o+t],e[o+t]=e[i+t],e[i+t]=r;return e},B=function(e,t){var n,r=e.length,i=-1,o=0;if(null==t)for(;++i<r;)(n=+e[i])&&(o+=n);else for(;++i<r;)(n=+t(e[i],i,e))&&(o+=n);return o},V=function(e){if(!(i=e.length))return[];for(var t=-1,n=I(e,q),r=new Array(n);++t<n;)for(var i,o=-1,a=r[t]=new Array(i);++o<i;)a[o]=e[o][t];return r};function q(e){return e.length}var Y=function(){return V(arguments)},X=Array.prototype.slice,G=function(e){return e},W=1,Z=2,$=3,K=4,Q=1e-6;function J(e){return"translate("+(e+.5)+",0)"}function ee(e){return"translate(0,"+(e+.5)+")"}function te(e){return function(t){return+e(t)}}function ne(e){var t=Math.max(0,e.bandwidth()-1)/2;return e.round()&&(t=Math.round(t)),function(n){return+e(n)+t}}function re(){return!this.__axis}function ie(e,t){var n=[],r=null,i=null,o=6,a=6,s=3,u=e===W||e===K?-1:1,c=e===K||e===Z?"x":"y",l=e===W||e===$?J:ee;function f(f){var h=null==r?t.ticks?t.ticks.apply(t,n):t.domain():r,d=null==i?t.tickFormat?t.tickFormat.apply(t,n):G:i,_=Math.max(o,0)+s,p=t.range(),m=+p[0]+.5,v=+p[p.length-1]+.5,g=(t.bandwidth?ne:te)(t.copy()),y=f.selection?f.selection():f,b=y.selectAll(".domain").data([null]),x=y.selectAll(".tick").data(h,t).order(),w=x.exit(),E=x.enter().append("g").attr("class","tick"),A=x.select("line"),M=x.select("text");b=b.merge(b.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(E),A=A.merge(E.append("line").attr("stroke","currentColor").attr(c+"2",u*o)),M=M.merge(E.append("text").attr("fill","currentColor").attr(c,u*_).attr("dy",e===W?"0em":e===$?"0.71em":"0.32em")),f!==y&&(b=b.transition(f),x=x.transition(f),A=A.transition(f),M=M.transition(f),w=w.transition(f).attr("opacity",Q).attr("transform",(function(e){return isFinite(e=g(e))?l(e):this.getAttribute("transform")})),E.attr("opacity",Q).attr("transform",(function(e){var t=this.parentNode.__axis;return l(t&&isFinite(t=t(e))?t:g(e))}))),w.remove(),b.attr("d",e===K||e==Z?a?"M"+u*a+","+m+"H0.5V"+v+"H"+u*a:"M0.5,"+m+"V"+v:a?"M"+m+","+u*a+"V0.5H"+v+"V"+u*a:"M"+m+",0.5H"+v),x.attr("opacity",1).attr("transform",(function(e){return l(g(e))})),A.attr(c+"2",u*o),M.attr(c,u*_).text(d),y.filter(re).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",e===Z?"start":e===K?"end":"middle"),y.each((function(){this.__axis=g}))}return f.scale=function(e){return arguments.length?(t=e,f):t},f.ticks=function(){return n=X.call(arguments),f},f.tickArguments=function(e){return arguments.length?(n=null==e?[]:X.call(e),f):n.slice()},f.tickValues=function(e){return arguments.length?(r=null==e?null:X.call(e),f):r&&r.slice()},f.tickFormat=function(e){return arguments.length?(i=e,f):i},f.tickSize=function(e){return arguments.length?(o=a=+e,f):o},f.tickSizeInner=function(e){return arguments.length?(o=+e,f):o},f.tickSizeOuter=function(e){return arguments.length?(a=+e,f):a},f.tickPadding=function(e){return arguments.length?(s=+e,f):s},f}function oe(e){return ie(W,e)}function ae(e){return ie(Z,e)}function se(e){return ie($,e)}function ue(e){return ie(K,e)}var ce={value:function(){}};function le(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r)throw new Error("illegal type: "+e);r[e]=[]}return new fe(r)}function fe(e){this._=e}function he(e,t){return e.trim().split(/^|\s+/).map((function(e){var n="",r=e.indexOf(".");if(r>=0&&(n=e.slice(r+1),e=e.slice(0,r)),e&&!t.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:n}}))}function de(e,t){for(var n,r=0,i=e.length;r<i;++r)if((n=e[r]).name===t)return n.value}function _e(e,t,n){for(var r=0,i=e.length;r<i;++r)if(e[r].name===t){e[r]=ce,e=e.slice(0,r).concat(e.slice(r+1));break}return null!=n&&e.push({name:t,value:n}),e}fe.prototype=le.prototype={constructor:fe,on:function(e,t){var n,r=this._,i=he(e+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++o<a;)if(n=(e=i[o]).type)r[n]=_e(r[n],e.name,t);else if(null==t)for(n in r)r[n]=_e(r[n],e.name,null);return this}for(;++o<a;)if((n=(e=i[o]).type)&&(n=de(r[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new fe(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(o=0,n=(r=this._[e]).length;o<n;++o)r[o].value.apply(t,i)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],i=0,o=r.length;i<o;++i)r[i].value.apply(t,n)}};var pe=le,me="http://www.w3.org/1999/xhtml",ve={svg:"http://www.w3.org/2000/svg",xhtml:me,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},ge=function(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),ve.hasOwnProperty(t)?{space:ve[t],local:e}:e};function ye(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===me&&t.documentElement.namespaceURI===me?t.createElement(e):t.createElementNS(n,e)}}function be(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}var xe=function(e){var t=ge(e);return(t.local?be:ye)(t)};function we(){}var Ee=function(e){return null==e?we:function(){return this.querySelector(e)}};function Ae(){return[]}var Me=function(e){return null==e?Ae:function(){return this.querySelectorAll(e)}},Se=function(e){return function(){return this.matches(e)}},Te=function(e){return new Array(e.length)};function Ce(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}Ce.prototype={constructor:Ce,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};var ke="$";function Oe(e,t,n,r,i,o){for(var a,s=0,u=t.length,c=o.length;s<c;++s)(a=t[s])?(a.__data__=o[s],r[s]=a):n[s]=new Ce(e,o[s]);for(;s<u;++s)(a=t[s])&&(i[s]=a)}function Le(e,t,n,r,i,o,a){var s,u,c,l={},f=t.length,h=o.length,d=new Array(f);for(s=0;s<f;++s)(u=t[s])&&(d[s]=c=ke+a.call(u,u.__data__,s,t),c in l?i[s]=u:l[c]=u);for(s=0;s<h;++s)(u=l[c=ke+a.call(e,o[s],s,o)])?(r[s]=u,u.__data__=o[s],l[c]=null):n[s]=new Ce(e,o[s]);for(s=0;s<f;++s)(u=t[s])&&l[d[s]]===u&&(i[s]=u)}function je(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}function ze(e){return function(){this.removeAttribute(e)}}function Ne(e){return function(){this.removeAttributeNS(e.space,e.local)}}function Pe(e,t){return function(){this.setAttribute(e,t)}}function Re(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function De(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function Ie(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}var Ue=function(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView};function Fe(e){return function(){this.style.removeProperty(e)}}function He(e,t,n){return function(){this.style.setProperty(e,t,n)}}function Be(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function Ve(e,t){return e.style.getPropertyValue(t)||Ue(e).getComputedStyle(e,null).getPropertyValue(t)}function qe(e){return function(){delete this[e]}}function Ye(e,t){return function(){this[e]=t}}function Xe(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}function Ge(e){return e.trim().split(/^|\s+/)}function We(e){return e.classList||new Ze(e)}function Ze(e){this._node=e,this._names=Ge(e.getAttribute("class")||"")}function $e(e,t){for(var n=We(e),r=-1,i=t.length;++r<i;)n.add(t[r])}function Ke(e,t){for(var n=We(e),r=-1,i=t.length;++r<i;)n.remove(t[r])}function Qe(e){return function(){$e(this,e)}}function Je(e){return function(){Ke(this,e)}}function et(e,t){return function(){(t.apply(this,arguments)?$e:Ke)(this,e)}}Ze.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};function tt(){this.textContent=""}function nt(e){return function(){this.textContent=e}}function rt(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}function it(){this.innerHTML=""}function ot(e){return function(){this.innerHTML=e}}function at(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}function st(){this.nextSibling&&this.parentNode.appendChild(this)}function ut(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ct(){return null}function lt(){var e=this.parentNode;e&&e.removeChild(this)}function ft(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function ht(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var dt={},_t=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(dt={mouseenter:"mouseover",mouseleave:"mouseout"}));function pt(e,t,n){return e=mt(e,t,n),function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}function mt(e,t,n){return function(r){var i=_t;_t=r;try{e.call(this,this.__data__,t,n)}finally{_t=i}}}function vt(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}function gt(e){return function(){var t=this.__on;if(t){for(var n,r=0,i=-1,o=t.length;r<o;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?t.length=i:delete this.__on}}}function yt(e,t,n){var r=dt.hasOwnProperty(e.type)?pt:mt;return function(i,o,a){var s,u=this.__on,c=r(t,o,a);if(u)for(var l=0,f=u.length;l<f;++l)if((s=u[l]).type===e.type&&s.name===e.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=c,s.capture=n),void(s.value=t);this.addEventListener(e.type,c,n),s={type:e.type,name:e.name,value:t,listener:c,capture:n},u?u.push(s):this.__on=[s]}}function bt(e,t,n,r){var i=_t;e.sourceEvent=_t,_t=e;try{return t.apply(n,r)}finally{_t=i}}function xt(e,t,n){var r=Ue(e),i=r.CustomEvent;"function"==typeof i?i=new i(t,n):(i=r.document.createEvent("Event"),n?(i.initEvent(t,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(t,!1,!1)),e.dispatchEvent(i)}function wt(e,t){return function(){return xt(this,e,t)}}function Et(e,t){return function(){return xt(this,e,t.apply(this,arguments))}}var At=[null];function Mt(e,t){this._groups=e,this._parents=t}function St(){return new Mt([[document.documentElement]],At)}Mt.prototype=St.prototype={constructor:Mt,select:function(e){"function"!=typeof e&&(e=Ee(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o,a,s=t[i],u=s.length,c=r[i]=new Array(u),l=0;l<u;++l)(o=s[l])&&(a=e.call(o,o.__data__,l,s))&&("__data__"in o&&(a.__data__=o.__data__),c[l]=a);return new Mt(r,this._parents)},selectAll:function(e){"function"!=typeof e&&(e=Me(e));for(var t=this._groups,n=t.length,r=[],i=[],o=0;o<n;++o)for(var a,s=t[o],u=s.length,c=0;c<u;++c)(a=s[c])&&(r.push(e.call(a,a.__data__,c,s)),i.push(a));return new Mt(r,i)},filter:function(e){"function"!=typeof e&&(e=Se(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o,a=t[i],s=a.length,u=r[i]=[],c=0;c<s;++c)(o=a[c])&&e.call(o,o.__data__,c,a)&&u.push(o);return new Mt(r,this._parents)},data:function(e,t){if(!e)return _=new Array(this.size()),l=-1,this.each((function(e){_[++l]=e})),_;var n,r=t?Le:Oe,i=this._parents,o=this._groups;"function"!=typeof e&&(n=e,e=function(){return n});for(var a=o.length,s=new Array(a),u=new Array(a),c=new Array(a),l=0;l<a;++l){var f=i[l],h=o[l],d=h.length,_=e.call(f,f&&f.__data__,l,i),p=_.length,m=u[l]=new Array(p),v=s[l]=new Array(p);r(f,h,m,v,c[l]=new Array(d),_,t);for(var g,y,b=0,x=0;b<p;++b)if(g=m[b]){for(b>=x&&(x=b+1);!(y=v[x])&&++x<p;);g._next=y||null}}return(s=new Mt(s,i))._enter=u,s._exit=c,s},enter:function(){return new Mt(this._enter||this._groups.map(Te),this._parents)},exit:function(){return new Mt(this._exit||this._groups.map(Te),this._parents)},join:function(e,t,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof e?e(r):r.append(e+""),null!=t&&(i=t(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(e){for(var t=this._groups,n=e._groups,r=t.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,c=t[s],l=n[s],f=c.length,h=a[s]=new Array(f),d=0;d<f;++d)(u=c[d]||l[d])&&(h[d]=u);for(;s<r;++s)a[s]=t[s];return new Mt(a,this._parents)},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,i=e[t],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=je);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],u=s.length,c=i[o]=new Array(u),l=0;l<u;++l)(a=s[l])&&(c[l]=a);c.sort(t)}return new Mt(i,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){var e=new Array(this.size()),t=-1;return this.each((function(){e[++t]=this})),e},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var e=0;return this.each((function(){++e})),e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var i,o=t[n],a=0,s=o.length;a<s;++a)(i=o[a])&&e.call(i,i.__data__,a,o);return this},attr:function(e,t){var n=ge(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?Ne:ze:"function"==typeof t?n.local?Ie:De:n.local?Re:Pe)(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?Fe:"function"==typeof t?Be:He)(e,t,null==n?"":n)):Ve(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?qe:"function"==typeof t?Xe:Ye)(e,t)):this.node()[e]},classed:function(e,t){var n=Ge(e+"");if(arguments.length<2){for(var r=We(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof t?et:t?Qe:Je)(n,t))},text:function(e){return arguments.length?this.each(null==e?tt:("function"==typeof e?rt:nt)(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?it:("function"==typeof e?at:ot)(e)):this.node().innerHTML},raise:function(){return this.each(st)},lower:function(){return this.each(ut)},append:function(e){var t="function"==typeof e?e:xe(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))},insert:function(e,t){var n="function"==typeof e?e:xe(e),r=null==t?ct:"function"==typeof t?t:Ee(t);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(lt)},clone:function(e){return this.select(e?ht:ft)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,i,o=vt(e+""),a=o.length;if(!(arguments.length<2)){for(s=t?yt:gt,null==n&&(n=!1),r=0;r<a;++r)this.each(s(o[r],t,n));return this}var s=this.node().__on;if(s)for(var u,c=0,l=s.length;c<l;++c)for(r=0,u=s[c];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(e,t){return this.each(("function"==typeof t?Et:wt)(e,t))}};var Tt=St,Ct=function(e){return"string"==typeof e?new Mt([[document.querySelector(e)]],[document.documentElement]):new Mt([[e]],At)},kt=function(e){return Ct(xe(e).call(document.documentElement))},Ot=0;function Lt(){return new jt}function jt(){this._="@"+(++Ot).toString(36)}jt.prototype=Lt.prototype={constructor:jt,get:function(e){for(var t=this._;!(t in e);)if(!(e=e.parentNode))return;return e[t]},set:function(e,t){return e[this._]=t},remove:function(e){return this._ in e&&delete e[this._]},toString:function(){return this._}};var zt=function(){for(var e,t=_t;e=t.sourceEvent;)t=e;return t},Nt=function(e,t){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}var i=e.getBoundingClientRect();return[t.clientX-i.left-e.clientLeft,t.clientY-i.top-e.clientTop]},Pt=function(e){var t=zt();return t.changedTouches&&(t=t.changedTouches[0]),Nt(e,t)},Rt=function(e){return"string"==typeof e?new Mt([document.querySelectorAll(e)],[document.documentElement]):new Mt([null==e?[]:e],At)},Dt=function(e,t,n){arguments.length<3&&(n=t,t=zt().changedTouches);for(var r,i=0,o=t?t.length:0;i<o;++i)if((r=t[i]).identifier===n)return Nt(e,r);return null},It=function(e,t){null==t&&(t=zt().touches);for(var n=0,r=t?t.length:0,i=new Array(r);n<r;++n)i[n]=Nt(e,t[n]);return i};function Ut(){_t.stopImmediatePropagation()}var Ft=function(){_t.preventDefault(),_t.stopImmediatePropagation()},Ht=function(e){var t=e.document.documentElement,n=Ct(e).on("dragstart.drag",Ft,!0);"onselectstart"in t?n.on("selectstart.drag",Ft,!0):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")};function Bt(e,t){var n=e.document.documentElement,r=Ct(e).on("dragstart.drag",null);t&&(r.on("click.drag",Ft,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}var Vt=function(e){return function(){return e}};function qt(e,t,n,r,i,o,a,s,u,c){this.target=e,this.type=t,this.subject=n,this.identifier=r,this.active=i,this.x=o,this.y=a,this.dx=s,this.dy=u,this._=c}function Yt(){return!_t.ctrlKey&&!_t.button}function Xt(){return this.parentNode}function Gt(e){return null==e?{x:_t.x,y:_t.y}:e}function Wt(){return navigator.maxTouchPoints||"ontouchstart"in this}qt.prototype.on=function(){var e=this._.on.apply(this._,arguments);return e===this._?this:e};var Zt=function(){var e,t,n,r,i=Yt,o=Xt,a=Gt,s=Wt,u={},c=pe("start","drag","end"),l=0,f=0;function h(e){e.on("mousedown.drag",d).filter(s).on("touchstart.drag",m).on("touchmove.drag",v).on("touchend.drag touchcancel.drag",g).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(){if(!r&&i.apply(this,arguments)){var a=y("mouse",o.apply(this,arguments),Pt,this,arguments);a&&(Ct(_t.view).on("mousemove.drag",_,!0).on("mouseup.drag",p,!0),Ht(_t.view),Ut(),n=!1,e=_t.clientX,t=_t.clientY,a("start"))}}function _(){if(Ft(),!n){var r=_t.clientX-e,i=_t.clientY-t;n=r*r+i*i>f}u.mouse("drag")}function p(){Ct(_t.view).on("mousemove.drag mouseup.drag",null),Bt(_t.view,n),Ft(),u.mouse("end")}function m(){if(i.apply(this,arguments)){var e,t,n=_t.changedTouches,r=o.apply(this,arguments),a=n.length;for(e=0;e<a;++e)(t=y(n[e].identifier,r,Dt,this,arguments))&&(Ut(),t("start"))}}function v(){var e,t,n=_t.changedTouches,r=n.length;for(e=0;e<r;++e)(t=u[n[e].identifier])&&(Ft(),t("drag"))}function g(){var e,t,n=_t.changedTouches,i=n.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),e=0;e<i;++e)(t=u[n[e].identifier])&&(Ut(),t("end"))}function y(e,t,n,r,i){var o,s,f,d=n(t,e),_=c.copy();if(bt(new qt(h,"beforestart",o,e,l,d[0],d[1],0,0,_),(function(){return null!=(_t.subject=o=a.apply(r,i))&&(s=o.x-d[0]||0,f=o.y-d[1]||0,!0)})))return function a(c){var p,m=d;switch(c){case"start":u[e]=a,p=l++;break;case"end":delete u[e],--l;case"drag":d=n(t,e),p=l}bt(new qt(h,c,o,e,p,d[0]+s,d[1]+f,d[0]-m[0],d[1]-m[1],_),_.apply,_,[c,r,i])}}return h.filter=function(e){return arguments.length?(i="function"==typeof e?e:Vt(!!e),h):i},h.container=function(e){return arguments.length?(o="function"==typeof e?e:Vt(e),h):o},h.subject=function(e){return arguments.length?(a="function"==typeof e?e:Vt(e),h):a},h.touchable=function(e){return arguments.length?(s="function"==typeof e?e:Vt(!!e),h):s},h.on=function(){var e=c.on.apply(c,arguments);return e===c?h:e},h.clickDistance=function(e){return arguments.length?(f=(e=+e)*e,h):Math.sqrt(f)},h},$t=function(e,t,n){e.prototype=t.prototype=n,n.constructor=e};function Kt(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function Qt(){}var Jt="\\s*([+-]?\\d+)\\s*",en="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",tn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",nn=/^#([0-9a-f]{3,8})$/,rn=new RegExp("^rgb\\("+[Jt,Jt,Jt]+"\\)$"),on=new RegExp("^rgb\\("+[tn,tn,tn]+"\\)$"),an=new RegExp("^rgba\\("+[Jt,Jt,Jt,en]+"\\)$"),sn=new RegExp("^rgba\\("+[tn,tn,tn,en]+"\\)$"),un=new RegExp("^hsl\\("+[en,tn,tn]+"\\)$"),cn=new RegExp("^hsla\\("+[en,tn,tn,en]+"\\)$"),ln={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function fn(){return this.rgb().formatHex()}function hn(){return this.rgb().formatRgb()}function dn(e){var t,n;return e=(e+"").trim().toLowerCase(),(t=nn.exec(e))?(n=t[1].length,t=parseInt(t[1],16),6===n?_n(t):3===n?new gn(t>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):8===n?new gn(t>>24&255,t>>16&255,t>>8&255,(255&t)/255):4===n?new gn(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|240&t,((15&t)<<4|15&t)/255):null):(t=rn.exec(e))?new gn(t[1],t[2],t[3],1):(t=on.exec(e))?new gn(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=an.exec(e))?pn(t[1],t[2],t[3],t[4]):(t=sn.exec(e))?pn(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=un.exec(e))?wn(t[1],t[2]/100,t[3]/100,1):(t=cn.exec(e))?wn(t[1],t[2]/100,t[3]/100,t[4]):ln.hasOwnProperty(e)?_n(ln[e]):"transparent"===e?new gn(NaN,NaN,NaN,0):null}function _n(e){return new gn(e>>16&255,e>>8&255,255&e,1)}function pn(e,t,n,r){return r<=0&&(e=t=n=NaN),new gn(e,t,n,r)}function mn(e){return e instanceof Qt||(e=dn(e)),e?new gn((e=e.rgb()).r,e.g,e.b,e.opacity):new gn}function vn(e,t,n,r){return 1===arguments.length?mn(e):new gn(e,t,n,null==r?1:r)}function gn(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function yn(){return"#"+xn(this.r)+xn(this.g)+xn(this.b)}function bn(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}function xn(e){return((e=Math.max(0,Math.min(255,Math.round(e)||0)))<16?"0":"")+e.toString(16)}function wn(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new Mn(e,t,n,r)}function En(e){if(e instanceof Mn)return new Mn(e.h,e.s,e.l,e.opacity);if(e instanceof Qt||(e=dn(e)),!e)return new Mn;if(e instanceof Mn)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,i=Math.min(t,n,r),o=Math.max(t,n,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=t===o?(n-r)/s+6*(n<r):n===o?(r-t)/s+2:(t-n)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new Mn(a,s,u,e.opacity)}function An(e,t,n,r){return 1===arguments.length?En(e):new Mn(e,t,n,null==r?1:r)}function Mn(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function Sn(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}function Tn(e,t,n,r,i){var o=e*e,a=o*e;return((1-3*e+3*o-a)*t+(4-6*o+3*a)*n+(1+3*e+3*o-3*a)*r+a*i)/6}$t(Qt,dn,{copy:function(e){return Object.assign(new this.constructor,this,e)},displayable:function(){return this.rgb().displayable()},hex:fn,formatHex:fn,formatHsl:function(){return En(this).formatHsl()},formatRgb:hn,toString:hn}),$t(gn,vn,Kt(Qt,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new gn(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new gn(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:yn,formatHex:yn,formatRgb:bn,toString:bn})),$t(Mn,An,Kt(Qt,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new Mn(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new Mn(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,i=2*n-r;return new gn(Sn(e>=240?e-240:e+120,i,r),Sn(e,i,r),Sn(e<120?e+240:e-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===e?")":", "+e+")")}}));var Cn=function(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),i=e[r],o=e[r+1],a=r>0?e[r-1]:2*i-o,s=r<t-1?e[r+2]:2*o-i;return Tn((n-r/t)*t,a,i,o,s)}},kn=function(e){var t=e.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*t),i=e[(r+t-1)%t],o=e[r%t],a=e[(r+1)%t],s=e[(r+2)%t];return Tn((n-r/t)*t,i,o,a,s)}},On=function(e){return function(){return e}};function Ln(e,t){return function(n){return e+n*t}}function jn(e,t){var n=t-e;return n?Ln(e,n>180||n<-180?n-360*Math.round(n/360):n):On(isNaN(e)?t:e)}function zn(e){return 1==(e=+e)?Nn:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):On(isNaN(t)?n:t)}}function Nn(e,t){var n=t-e;return n?Ln(e,n):On(isNaN(e)?t:e)}var Pn=function e(t){var n=zn(t);function r(e,t){var r=n((e=vn(e)).r,(t=vn(t)).r),i=n(e.g,t.g),o=n(e.b,t.b),a=Nn(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=i(t),e.b=o(t),e.opacity=a(t),e+""}}return r.gamma=e,r}(1);function Rn(e){return function(t){var n,r,i=t.length,o=new Array(i),a=new Array(i),s=new Array(i);for(n=0;n<i;++n)r=vn(t[n]),o[n]=r.r||0,a[n]=r.g||0,s[n]=r.b||0;return o=e(o),a=e(a),s=e(s),r.opacity=1,function(e){return r.r=o(e),r.g=a(e),r.b=s(e),r+""}}}var Dn=Rn(Cn),In=Rn(kn),Un=function(e,t){var n,r=t?t.length:0,i=e?Math.min(r,e.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=$n(e[n],t[n]);for(;n<r;++n)a[n]=t[n];return function(e){for(n=0;n<i;++n)a[n]=o[n](e);return a}},Fn=function(e,t){var n=new Date;return t-=e=+e,function(r){return n.setTime(e+t*r),n}},Hn=function(e,t){return t-=e=+e,function(n){return e+t*n}},Bn=function(e,t){var n,r={},i={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?r[n]=$n(e[n],t[n]):i[n]=t[n];return function(e){for(n in r)i[n]=r[n](e);return i}},Vn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,qn=new RegExp(Vn.source,"g");var Yn,Xn,Gn,Wn,Zn=function(e,t){var n,r,i,o=Vn.lastIndex=qn.lastIndex=0,a=-1,s=[],u=[];for(e+="",t+="";(n=Vn.exec(e))&&(r=qn.exec(t));)(i=r.index)>o&&(i=t.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:Hn(n,r)})),o=qn.lastIndex;return o<t.length&&(i=t.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(e){return function(t){return e(t)+""}}(u[0].x):function(e){return function(){return e}}(t):(t=u.length,function(e){for(var n,r=0;r<t;++r)s[(n=u[r]).i]=n.x(e);return s.join("")})},$n=function(e,t){var n,r=typeof t;return null==t||"boolean"===r?On(t):("number"===r?Hn:"string"===r?(n=dn(t))?(t=n,Pn):Zn:t instanceof dn?Pn:t instanceof Date?Fn:Array.isArray(t)?Un:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?Bn:Hn)(e,t)},Kn=function(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}},Qn=function(e,t){var n=jn(+e,+t);return function(e){var t=n(e);return t-360*Math.floor(t/360)}},Jn=function(e,t){return t-=e=+e,function(n){return Math.round(e+t*n)}},er=180/Math.PI,tr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},nr=function(e,t,n,r,i,o){var a,s,u;return(a=Math.sqrt(e*e+t*t))&&(e/=a,t/=a),(u=e*n+t*r)&&(n-=e*u,r-=t*u),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,u/=s),e*r<t*n&&(e=-e,t=-t,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(t,e)*er,skewX:Math.atan(u)*er,scaleX:a,scaleY:s}};function rr(e,t,n,r){function i(e){return e.length?e.pop()+" ":""}return function(o,a){var s=[],u=[];return o=e(o),a=e(a),function(e,r,i,o,a,s){if(e!==i||r!==o){var u=a.push("translate(",null,t,null,n);s.push({i:u-4,x:Hn(e,i)},{i:u-2,x:Hn(r,o)})}else(i||o)&&a.push("translate("+i+t+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(e,t,n,o){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Hn(e,t)})):t&&n.push(i(n)+"rotate("+t+r)}(o.rotate,a.rotate,s,u),function(e,t,n,o){e!==t?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Hn(e,t)}):t&&n.push(i(n)+"skewX("+t+r)}(o.skewX,a.skewX,s,u),function(e,t,n,r,o,a){if(e!==n||t!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:Hn(e,n)},{i:s-2,x:Hn(t,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(e){for(var t,n=-1,r=u.length;++n<r;)s[(t=u[n]).i]=t.x(e);return s.join("")}}}var ir=rr((function(e){return"none"===e?tr:(Yn||(Yn=document.createElement("DIV"),Xn=document.documentElement,Gn=document.defaultView),Yn.style.transform=e,e=Gn.getComputedStyle(Xn.appendChild(Yn),null).getPropertyValue("transform"),Xn.removeChild(Yn),e=e.slice(7,-1).split(","),nr(+e[0],+e[1],+e[2],+e[3],+e[4],+e[5]))}),"px, ","px)","deg)"),or=rr((function(e){return null==e?tr:(Wn||(Wn=document.createElementNS("http://www.w3.org/2000/svg","g")),Wn.setAttribute("transform",e),(e=Wn.transform.baseVal.consolidate())?(e=e.matrix,nr(e.a,e.b,e.c,e.d,e.e,e.f)):tr)}),", ",")",")"),ar=Math.SQRT2;function sr(e){return((e=Math.exp(e))+1/e)/2}var ur=function(e,t){var n,r,i=e[0],o=e[1],a=e[2],s=t[0],u=t[1],c=t[2],l=s-i,f=u-o,h=l*l+f*f;if(h<1e-12)r=Math.log(c/a)/ar,n=function(e){return[i+e*l,o+e*f,a*Math.exp(ar*e*r)]};else{var d=Math.sqrt(h),_=(c*c-a*a+4*h)/(2*a*2*d),p=(c*c-a*a-4*h)/(2*c*2*d),m=Math.log(Math.sqrt(_*_+1)-_),v=Math.log(Math.sqrt(p*p+1)-p);r=(v-m)/ar,n=function(e){var t,n=e*r,s=sr(m),u=a/(2*d)*(s*(t=ar*n+m,((t=Math.exp(2*t))-1)/(t+1))-function(e){return((e=Math.exp(e))-1/e)/2}(m));return[i+u*l,o+u*f,a*s/sr(ar*n+m)]}}return n.duration=1e3*r,n};function cr(e){return function(t,n){var r=e((t=An(t)).h,(n=An(n)).h),i=Nn(t.s,n.s),o=Nn(t.l,n.l),a=Nn(t.opacity,n.opacity);return function(e){return t.h=r(e),t.s=i(e),t.l=o(e),t.opacity=a(e),t+""}}}var lr=cr(jn),fr=cr(Nn),hr=Math.PI/180,dr=180/Math.PI,_r=.96422,pr=1,mr=.82521,vr=4/29,gr=6/29,yr=3*gr*gr,br=gr*gr*gr;function xr(e){if(e instanceof Ar)return new Ar(e.l,e.a,e.b,e.opacity);if(e instanceof jr)return zr(e);e instanceof gn||(e=mn(e));var t,n,r=Cr(e.r),i=Cr(e.g),o=Cr(e.b),a=Mr((.2225045*r+.7168786*i+.0606169*o)/pr);return r===i&&i===o?t=n=a:(t=Mr((.4360747*r+.3850649*i+.1430804*o)/_r),n=Mr((.0139322*r+.0971045*i+.7141733*o)/mr)),new Ar(116*a-16,500*(t-a),200*(a-n),e.opacity)}function wr(e,t){return new Ar(e,0,0,null==t?1:t)}function Er(e,t,n,r){return 1===arguments.length?xr(e):new Ar(e,t,n,null==r?1:r)}function Ar(e,t,n,r){this.l=+e,this.a=+t,this.b=+n,this.opacity=+r}function Mr(e){return e>br?Math.pow(e,1/3):e/yr+vr}function Sr(e){return e>gr?e*e*e:yr*(e-vr)}function Tr(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function Cr(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function kr(e){if(e instanceof jr)return new jr(e.h,e.c,e.l,e.opacity);if(e instanceof Ar||(e=xr(e)),0===e.a&&0===e.b)return new jr(NaN,0<e.l&&e.l<100?0:NaN,e.l,e.opacity);var t=Math.atan2(e.b,e.a)*dr;return new jr(t<0?t+360:t,Math.sqrt(e.a*e.a+e.b*e.b),e.l,e.opacity)}function Or(e,t,n,r){return 1===arguments.length?kr(e):new jr(n,t,e,null==r?1:r)}function Lr(e,t,n,r){return 1===arguments.length?kr(e):new jr(e,t,n,null==r?1:r)}function jr(e,t,n,r){this.h=+e,this.c=+t,this.l=+n,this.opacity=+r}function zr(e){if(isNaN(e.h))return new Ar(e.l,0,0,e.opacity);var t=e.h*hr;return new Ar(e.l,Math.cos(t)*e.c,Math.sin(t)*e.c,e.opacity)}function Nr(e,t){var n=Nn((e=Er(e)).l,(t=Er(t)).l),r=Nn(e.a,t.a),i=Nn(e.b,t.b),o=Nn(e.opacity,t.opacity);return function(t){return e.l=n(t),e.a=r(t),e.b=i(t),e.opacity=o(t),e+""}}function Pr(e){return function(t,n){var r=e((t=Lr(t)).h,(n=Lr(n)).h),i=Nn(t.c,n.c),o=Nn(t.l,n.l),a=Nn(t.opacity,n.opacity);return function(e){return t.h=r(e),t.c=i(e),t.l=o(e),t.opacity=a(e),t+""}}}$t(Ar,Er,Kt(Qt,{brighter:function(e){return new Ar(this.l+18*(null==e?1:e),this.a,this.b,this.opacity)},darker:function(e){return new Ar(this.l-18*(null==e?1:e),this.a,this.b,this.opacity)},rgb:function(){var e=(this.l+16)/116,t=isNaN(this.a)?e:e+this.a/500,n=isNaN(this.b)?e:e-this.b/200;return new gn(Tr(3.1338561*(t=_r*Sr(t))-1.6168667*(e=pr*Sr(e))-.4906146*(n=mr*Sr(n))),Tr(-.9787684*t+1.9161415*e+.033454*n),Tr(.0719453*t-.2289914*e+1.4052427*n),this.opacity)}})),$t(jr,Lr,Kt(Qt,{brighter:function(e){return new jr(this.h,this.c,this.l+18*(null==e?1:e),this.opacity)},darker:function(e){return new jr(this.h,this.c,this.l-18*(null==e?1:e),this.opacity)},rgb:function(){return zr(this).rgb()}}));var Rr=Pr(jn),Dr=Pr(Nn),Ir=-.29227,Ur=-.90649,Fr=1.97294,Hr=Fr*Ur,Br=1.78277*Fr,Vr=1.78277*Ir- -.14861*Ur;function qr(e,t,n,r){return 1===arguments.length?function(e){if(e instanceof Yr)return new Yr(e.h,e.s,e.l,e.opacity);e instanceof gn||(e=mn(e));var t=e.r/255,n=e.g/255,r=e.b/255,i=(Vr*r+Hr*t-Br*n)/(Vr+Hr-Br),o=r-i,a=(Fr*(n-i)-Ir*o)/Ur,s=Math.sqrt(a*a+o*o)/(Fr*i*(1-i)),u=s?Math.atan2(a,o)*dr-120:NaN;return new Yr(u<0?u+360:u,s,i,e.opacity)}(e):new Yr(e,t,n,null==r?1:r)}function Yr(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function Xr(e){return function t(n){function r(t,r){var i=e((t=qr(t)).h,(r=qr(r)).h),o=Nn(t.s,r.s),a=Nn(t.l,r.l),s=Nn(t.opacity,r.opacity);return function(e){return t.h=i(e),t.s=o(e),t.l=a(Math.pow(e,n)),t.opacity=s(e),t+""}}return n=+n,r.gamma=t,r}(1)}$t(Yr,qr,Kt(Qt,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new Yr(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new Yr(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=isNaN(this.h)?0:(this.h+120)*hr,t=+this.l,n=isNaN(this.s)?0:this.s*t*(1-t),r=Math.cos(e),i=Math.sin(e);return new gn(255*(t+n*(-.14861*r+1.78277*i)),255*(t+n*(Ir*r+Ur*i)),255*(t+n*(Fr*r)),this.opacity)}}));var Gr=Xr(jn),Wr=Xr(Nn);function Zr(e,t){for(var n=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);n<r;)o[n]=e(i,i=t[++n]);return function(e){var t=Math.max(0,Math.min(r-1,Math.floor(e*=r)));return o[t](e-t)}}var $r,Kr,Qr=function(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e(r/(t-1));return n},Jr=0,ei=0,ti=0,ni=1e3,ri=0,ii=0,oi=0,ai="object"==typeof performance&&performance.now?performance:Date,si="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function ui(){return ii||(si(ci),ii=ai.now()+oi)}function ci(){ii=0}function li(){this._call=this._time=this._next=null}function fi(e,t,n){var r=new li;return r.restart(e,t,n),r}function hi(){ui(),++Jr;for(var e,t=$r;t;)(e=ii-t._time)>=0&&t._call.call(null,e),t=t._next;--Jr}function di(){ii=(ri=ai.now())+oi,Jr=ei=0;try{hi()}finally{Jr=0,function(){var e,t,n=$r,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:$r=t);Kr=e,pi(r)}(),ii=0}}function _i(){var e=ai.now(),t=e-ri;t>ni&&(oi-=t,ri=e)}function pi(e){Jr||(ei&&(ei=clearTimeout(ei)),e-ii>24?(e<1/0&&(ei=setTimeout(di,e-ai.now()-oi)),ti&&(ti=clearInterval(ti))):(ti||(ri=ai.now(),ti=setInterval(_i,ni)),Jr=1,si(di)))}li.prototype=fi.prototype={constructor:li,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?ui():+n)+(null==t?0:+t),this._next||Kr===this||(Kr?Kr._next=this:$r=this,Kr=this),this._call=e,this._time=n,pi()},stop:function(){this._call&&(this._call=null,this._time=1/0,pi())}};var mi=function(e,t,n){var r=new li;return t=null==t?0:+t,r.restart((function(n){r.stop(),e(n+t)}),t,n),r},vi=function(e,t,n){var r=new li,i=t;return null==t?(r.restart(e,t,n),r):(t=+t,n=null==n?ui():+n,r.restart((function o(a){a+=i,r.restart(o,i+=t,n),e(a)}),t,n),r)},gi=pe("start","end","cancel","interrupt"),yi=[],bi=0,xi=1,wi=2,Ei=3,Ai=4,Mi=5,Si=6,Ti=function(e,t,n,r,i,o){var a=e.__transition;if(a){if(n in a)return}else e.__transition={};!function(e,t,n){var r,i=e.__transition;function o(u){var c,l,f,h;if(n.state!==xi)return s();for(c in i)if((h=i[c]).name===n.name){if(h.state===Ei)return mi(o);h.state===Ai?(h.state=Si,h.timer.stop(),h.on.call("interrupt",e,e.__data__,h.index,h.group),delete i[c]):+c<t&&(h.state=Si,h.timer.stop(),h.on.call("cancel",e,e.__data__,h.index,h.group),delete i[c])}if(mi((function(){n.state===Ei&&(n.state=Ai,n.timer.restart(a,n.delay,n.time),a(u))})),n.state=wi,n.on.call("start",e,e.__data__,n.index,n.group),n.state===wi){for(n.state=Ei,r=new Array(f=n.tween.length),c=0,l=-1;c<f;++c)(h=n.tween[c].value.call(e,e.__data__,n.index,n.group))&&(r[++l]=h);r.length=l+1}}function a(t){for(var i=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(s),n.state=Mi,1),o=-1,a=r.length;++o<a;)r[o].call(e,i);n.state===Mi&&(n.on.call("end",e,e.__data__,n.index,n.group),s())}function s(){for(var r in n.state=Si,n.timer.stop(),delete i[t],i)return;delete e.__transition}i[t]=n,n.timer=fi((function(e){n.state=xi,n.timer.restart(o,n.delay,n.time),n.delay<=e&&o(e-n.delay)}),0,n.time)}(e,n,{name:t,index:r,group:i,on:gi,tween:yi,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:bi})};function Ci(e,t){var n=Oi(e,t);if(n.state>bi)throw new Error("too late; already scheduled");return n}function ki(e,t){var n=Oi(e,t);if(n.state>Ei)throw new Error("too late; already running");return n}function Oi(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}var Li=function(e,t){var n,r,i,o=e.__transition,a=!0;if(o){for(i in t=null==t?null:t+"",o)(n=o[i]).name===t?(r=n.state>wi&&n.state<Mi,n.state=Si,n.timer.stop(),n.on.call(r?"interrupt":"cancel",e,e.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete e.__transition}};function ji(e,t){var n,r;return function(){var i=ki(this,e),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===t){(r=r.slice()).splice(a,1);break}i.tween=r}}function zi(e,t,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=ki(this,e),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:t,value:n},u=0,c=i.length;u<c;++u)if(i[u].name===t){i[u]=s;break}u===c&&i.push(s)}o.tween=i}}function Ni(e,t,n){var r=e._id;return e.each((function(){var e=ki(this,r);(e.value||(e.value={}))[t]=n.apply(this,arguments)})),function(e){return Oi(e,r).value[t]}}var Pi=function(e,t){var n;return("number"==typeof t?Hn:t instanceof dn?Pn:(n=dn(t))?(t=n,Pn):Zn)(e,t)};function Ri(e){return function(){this.removeAttribute(e)}}function Di(e){return function(){this.removeAttributeNS(e.space,e.local)}}function Ii(e,t,n){var r,i,o=n+"";return function(){var a=this.getAttribute(e);return a===o?null:a===r?i:i=t(r=a,n)}}function Ui(e,t,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(e.space,e.local);return a===o?null:a===r?i:i=t(r=a,n)}}function Fi(e,t,n){var r,i,o;return function(){var a,s,u=n(this);if(null!=u)return(a=this.getAttribute(e))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=t(r=a,u));this.removeAttribute(e)}}function Hi(e,t,n){var r,i,o;return function(){var a,s,u=n(this);if(null!=u)return(a=this.getAttributeNS(e.space,e.local))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=t(r=a,u));this.removeAttributeNS(e.space,e.local)}}function Bi(e,t){var n,r;function i(){var i=t.apply(this,arguments);return i!==r&&(n=(r=i)&&function(e,t){return function(n){this.setAttributeNS(e.space,e.local,t(n))}}(e,i)),n}return i._value=t,i}function Vi(e,t){var n,r;function i(){var i=t.apply(this,arguments);return i!==r&&(n=(r=i)&&function(e,t){return function(n){this.setAttribute(e,t(n))}}(e,i)),n}return i._value=t,i}function qi(e,t){return function(){Ci(this,e).delay=+t.apply(this,arguments)}}function Yi(e,t){return t=+t,function(){Ci(this,e).delay=t}}function Xi(e,t){return function(){ki(this,e).duration=+t.apply(this,arguments)}}function Gi(e,t){return t=+t,function(){ki(this,e).duration=t}}function Wi(e,t){if("function"!=typeof t)throw new Error;return function(){ki(this,e).ease=t}}function Zi(e,t,n){var r,i,o=function(e){return(e+"").trim().split(/^|\s+/).every((function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e}))}(t)?Ci:ki;return function(){var a=o(this,e),s=a.on;s!==r&&(i=(r=s).copy()).on(t,n),a.on=i}}var $i=Tt.prototype.constructor;function Ki(e){return function(){this.style.removeProperty(e)}}function Qi(e,t,n){var r,i;function o(){var o=t.apply(this,arguments);return o!==i&&(r=(i=o)&&function(e,t,n){return function(r){this.style.setProperty(e,t(r),n)}}(e,o,n)),r}return o._value=t,o}var Ji=0;function eo(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function to(e){return Tt().transition(e)}function no(){return++Ji}var ro=Tt.prototype;function io(e){return+e}function oo(e){return e*e}function ao(e){return e*(2-e)}function so(e){return((e*=2)<=1?e*e:--e*(2-e)+1)/2}function uo(e){return e*e*e}function co(e){return--e*e*e+1}function lo(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}eo.prototype=to.prototype={constructor:eo,select:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=Ee(e));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,u,c=r[a],l=c.length,f=o[a]=new Array(l),h=0;h<l;++h)(s=c[h])&&(u=e.call(s,s.__data__,h,c))&&("__data__"in s&&(u.__data__=s.__data__),f[h]=u,Ti(f[h],t,n,h,f,Oi(s,n)));return new eo(o,this._parents,t,n)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=Me(e));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var u,c=r[s],l=c.length,f=0;f<l;++f)if(u=c[f]){for(var h,d=e.call(u,u.__data__,f,c),_=Oi(u,n),p=0,m=d.length;p<m;++p)(h=d[p])&&Ti(h,t,n,p,d,_);o.push(d),a.push(u)}return new eo(o,a,t,n)},filter:function(e){"function"!=typeof e&&(e=Se(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o,a=t[i],s=a.length,u=r[i]=[],c=0;c<s;++c)(o=a[c])&&e.call(o,o.__data__,c,a)&&u.push(o);return new eo(r,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,c=t[s],l=n[s],f=c.length,h=a[s]=new Array(f),d=0;d<f;++d)(u=c[d]||l[d])&&(h[d]=u);for(;s<r;++s)a[s]=t[s];return new eo(a,this._parents,this._name,this._id)},selection:function(){return new $i(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=no(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,c=0;c<u;++c)if(a=s[c]){var l=Oi(a,t);Ti(a,e,n,c,s,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new eo(r,this._parents,e,n)},call:ro.call,nodes:ro.nodes,node:ro.node,size:ro.size,empty:ro.empty,each:ro.each,on:function(e,t){var n=this._id;return arguments.length<2?Oi(this.node(),n).on.on(e):this.each(Zi(n,e,t))},attr:function(e,t){var n=ge(e),r="transform"===n?or:Pi;return this.attrTween(e,"function"==typeof t?(n.local?Hi:Fi)(n,r,Ni(this,"attr."+e,t)):null==t?(n.local?Di:Ri)(n):(n.local?Ui:Ii)(n,r,t))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var r=ge(e);return this.tween(n,(r.local?Bi:Vi)(r,t))},style:function(e,t,n){var r="transform"==(e+="")?ir:Pi;return null==t?this.styleTween(e,function(e,t){var n,r,i;return function(){var o=Ve(this,e),a=(this.style.removeProperty(e),Ve(this,e));return o===a?null:o===n&&a===r?i:i=t(n=o,r=a)}}(e,r)).on("end.style."+e,Ki(e)):"function"==typeof t?this.styleTween(e,function(e,t,n){var r,i,o;return function(){var a=Ve(this,e),s=n(this),u=s+"";return null==s&&(this.style.removeProperty(e),u=s=Ve(this,e)),a===u?null:a===r&&u===i?o:(i=u,o=t(r=a,s))}}(e,r,Ni(this,"style."+e,t))).each(function(e,t){var n,r,i,o,a="style."+t,s="end."+a;return function(){var u=ki(this,e),c=u.on,l=null==u.value[a]?o||(o=Ki(t)):void 0;c===n&&i===l||(r=(n=c).copy()).on(s,i=l),u.on=r}}(this._id,e)):this.styleTween(e,function(e,t,n){var r,i,o=n+"";return function(){var a=Ve(this,e);return a===o?null:a===r?i:i=t(r=a,n)}}(e,r,t),n).on("end.style."+e,null)},styleTween:function(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,Qi(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(Ni(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},remove:function(){return this.on("end.remove",(e=this._id,function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}));var e},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r,i=Oi(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===e)return r.value;return null}return this.each((null==t?ji:zi)(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?qi:Yi)(t,e)):Oi(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?Xi:Gi)(t,e)):Oi(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(Wi(t,e)):Oi(this.node(),t).ease},end:function(){var e,t,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},u={value:function(){0==--i&&o()}};n.each((function(){var n=ki(this,r),i=n.on;i!==e&&((t=(e=i).copy())._.cancel.push(s),t._.interrupt.push(s),t._.end.push(u)),n.on=t}))}))}};var fo=function e(t){function n(e){return Math.pow(e,t)}return t=+t,n.exponent=e,n}(3),ho=function e(t){function n(e){return 1-Math.pow(1-e,t)}return t=+t,n.exponent=e,n}(3),_o=function e(t){function n(e){return((e*=2)<=1?Math.pow(e,t):2-Math.pow(2-e,t))/2}return t=+t,n.exponent=e,n}(3),po=Math.PI,mo=po/2;function vo(e){return 1-Math.cos(e*mo)}function go(e){return Math.sin(e*mo)}function yo(e){return(1-Math.cos(po*e))/2}function bo(e){return Math.pow(2,10*e-10)}function xo(e){return 1-Math.pow(2,-10*e)}function wo(e){return((e*=2)<=1?Math.pow(2,10*e-10):2-Math.pow(2,10-10*e))/2}function Eo(e){return 1-Math.sqrt(1-e*e)}function Ao(e){return Math.sqrt(1- --e*e)}function Mo(e){return((e*=2)<=1?1-Math.sqrt(1-e*e):Math.sqrt(1-(e-=2)*e)+1)/2}var So=4/11,To=6/11,Co=8/11,ko=.75,Oo=9/11,Lo=10/11,jo=.9375,zo=21/22,No=63/64,Po=1/So/So;function Ro(e){return 1-Do(1-e)}function Do(e){return(e=+e)<So?Po*e*e:e<Co?Po*(e-=To)*e+ko:e<Lo?Po*(e-=Oo)*e+jo:Po*(e-=zo)*e+No}function Io(e){return((e*=2)<=1?1-Do(1-e):Do(e-1)+1)/2}var Uo=function e(t){function n(e){return e*e*((t+1)*e-t)}return t=+t,n.overshoot=e,n}(1.70158),Fo=function e(t){function n(e){return--e*e*((t+1)*e+t)+1}return t=+t,n.overshoot=e,n}(1.70158),Ho=function e(t){function n(e){return((e*=2)<1?e*e*((t+1)*e-t):(e-=2)*e*((t+1)*e+t)+2)/2}return t=+t,n.overshoot=e,n}(1.70158),Bo=2*Math.PI,Vo=function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=Bo);function i(e){return t*Math.pow(2,10*--e)*Math.sin((r-e)/n)}return i.amplitude=function(t){return e(t,n*Bo)},i.period=function(n){return e(t,n)},i}(1,.3),qo=function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=Bo);function i(e){return 1-t*Math.pow(2,-10*(e=+e))*Math.sin((e+r)/n)}return i.amplitude=function(t){return e(t,n*Bo)},i.period=function(n){return e(t,n)},i}(1,.3),Yo=function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=Bo);function i(e){return((e=2*e-1)<0?t*Math.pow(2,10*e)*Math.sin((r-e)/n):2-t*Math.pow(2,-10*e)*Math.sin((r+e)/n))/2}return i.amplitude=function(t){return e(t,n*Bo)},i.period=function(n){return e(t,n)},i}(1,.3),Xo={time:null,delay:0,duration:250,ease:lo};function Go(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))return Xo.time=ui(),Xo;return n}Tt.prototype.interrupt=function(e){return this.each((function(){Li(this,e)}))},Tt.prototype.transition=function(e){var t,n;e instanceof eo?(t=e._id,e=e._name):(t=no(),(n=Xo).time=ui(),e=null==e?null:e+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,c=0;c<u;++c)(a=s[c])&&Ti(a,e,t,c,s,n||Go(a,t));return new eo(r,this._parents,e,t)};var Wo=[null],Zo=function(e,t){var n,r,i=e.__transition;if(i)for(r in t=null==t?null:t+"",i)if((n=i[r]).state>xi&&n.name===t)return new eo([[e]],Wo,t,+r);return null},$o=function(e){return function(){return e}},Ko=function(e,t,n){this.target=e,this.type=t,this.selection=n};function Qo(){_t.stopImmediatePropagation()}var Jo=function(){_t.preventDefault(),_t.stopImmediatePropagation()},ea={name:"drag"},ta={name:"space"},na={name:"handle"},ra={name:"center"};function ia(e){return[+e[0],+e[1]]}function oa(e){return[ia(e[0]),ia(e[1])]}var aa={name:"x",handles:["w","e"].map(_a),input:function(e,t){return null==e?null:[[+e[0],t[0][1]],[+e[1],t[1][1]]]},output:function(e){return e&&[e[0][0],e[1][0]]}},sa={name:"y",handles:["n","s"].map(_a),input:function(e,t){return null==e?null:[[t[0][0],+e[0]],[t[1][0],+e[1]]]},output:function(e){return e&&[e[0][1],e[1][1]]}},ua={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(_a),input:function(e){return null==e?null:oa(e)},output:function(e){return e}},ca={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},la={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},fa={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},ha={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},da={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function _a(e){return{type:e}}function pa(){return!_t.ctrlKey&&!_t.button}function ma(){var e=this.ownerSVGElement||this;return e.hasAttribute("viewBox")?[[(e=e.viewBox.baseVal).x,e.y],[e.x+e.width,e.y+e.height]]:[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]}function va(){return navigator.maxTouchPoints||"ontouchstart"in this}function ga(e){for(;!e.__brush;)if(!(e=e.parentNode))return;return e.__brush}function ya(e){var t=e.__brush;return t?t.dim.output(t.selection):null}function ba(){return Ea(aa)}function xa(){return Ea(sa)}var wa=function(){return Ea(ua)};function Ea(e){var t,n=ma,r=pa,i=va,o=!0,a=pe(u,"start","brush","end"),s=6;function u(t){var n=t.property("__brush",p).selectAll(".overlay").data([_a("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",ca.overlay).merge(n).each((function(){var e=ga(this).extent;Ct(this).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1])})),t.selectAll(".selection").data([_a("selection")]).enter().append("rect").attr("class","selection").attr("cursor",ca.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=t.selectAll(".handle").data(e.handles,(function(e){return e.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(e){return"handle handle--"+e.type})).attr("cursor",(function(e){return ca[e.type]})),t.each(c).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",h).filter(i).on("touchstart.brush",h).on("touchmove.brush",d).on("touchend.brush touchcancel.brush",_).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function c(){var e=Ct(this),t=ga(this).selection;t?(e.selectAll(".selection").style("display",null).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1]),e.selectAll(".handle").style("display",null).attr("x",(function(e){return"e"===e.type[e.type.length-1]?t[1][0]-s/2:t[0][0]-s/2})).attr("y",(function(e){return"s"===e.type[0]?t[1][1]-s/2:t[0][1]-s/2})).attr("width",(function(e){return"n"===e.type||"s"===e.type?t[1][0]-t[0][0]+s:s})).attr("height",(function(e){return"e"===e.type||"w"===e.type?t[1][1]-t[0][1]+s:s}))):e.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function l(e,t,n){return!n&&e.__brush.emitter||new f(e,t)}function f(e,t){this.that=e,this.args=t,this.state=e.__brush,this.active=0}function h(){if((!t||_t.touches)&&r.apply(this,arguments)){var n,i,a,s,u,f,h,d,_,p,m,v,g=this,y=_t.target.__data__.type,b="selection"===(o&&_t.metaKey?y="overlay":y)?ea:o&&_t.altKey?ra:na,x=e===sa?null:ha[y],w=e===aa?null:da[y],E=ga(g),A=E.extent,M=E.selection,S=A[0][0],T=A[0][1],C=A[1][0],k=A[1][1],O=0,L=0,j=x&&w&&o&&_t.shiftKey,z=_t.touches?(v=_t.changedTouches[0].identifier,function(e){return Dt(e,_t.touches,v)}):Pt,N=z(g),P=N,R=l(g,arguments,!0).beforestart();"overlay"===y?(M&&(_=!0),E.selection=M=[[n=e===sa?S:N[0],a=e===aa?T:N[1]],[u=e===sa?C:n,h=e===aa?k:a]]):(n=M[0][0],a=M[0][1],u=M[1][0],h=M[1][1]),i=n,s=a,f=u,d=h;var D=Ct(g).attr("pointer-events","none"),I=D.selectAll(".overlay").attr("cursor",ca[y]);if(_t.touches)R.moved=F,R.ended=B;else{var U=Ct(_t.view).on("mousemove.brush",F,!0).on("mouseup.brush",B,!0);o&&U.on("keydown.brush",(function(){switch(_t.keyCode){case 16:j=x&&w;break;case 18:b===na&&(x&&(u=f-O*x,n=i+O*x),w&&(h=d-L*w,a=s+L*w),b=ra,H());break;case 32:b!==na&&b!==ra||(x<0?u=f-O:x>0&&(n=i-O),w<0?h=d-L:w>0&&(a=s-L),b=ta,I.attr("cursor",ca.selection),H());break;default:return}Jo()}),!0).on("keyup.brush",(function(){switch(_t.keyCode){case 16:j&&(p=m=j=!1,H());break;case 18:b===ra&&(x<0?u=f:x>0&&(n=i),w<0?h=d:w>0&&(a=s),b=na,H());break;case 32:b===ta&&(_t.altKey?(x&&(u=f-O*x,n=i+O*x),w&&(h=d-L*w,a=s+L*w),b=ra):(x<0?u=f:x>0&&(n=i),w<0?h=d:w>0&&(a=s),b=na),I.attr("cursor",ca[y]),H());break;default:return}Jo()}),!0),Ht(_t.view)}Qo(),Li(g),c.call(g),R.start()}function F(){var e=z(g);!j||p||m||(Math.abs(e[0]-P[0])>Math.abs(e[1]-P[1])?m=!0:p=!0),P=e,_=!0,Jo(),H()}function H(){var e;switch(O=P[0]-N[0],L=P[1]-N[1],b){case ta:case ea:x&&(O=Math.max(S-n,Math.min(C-u,O)),i=n+O,f=u+O),w&&(L=Math.max(T-a,Math.min(k-h,L)),s=a+L,d=h+L);break;case na:x<0?(O=Math.max(S-n,Math.min(C-n,O)),i=n+O,f=u):x>0&&(O=Math.max(S-u,Math.min(C-u,O)),i=n,f=u+O),w<0?(L=Math.max(T-a,Math.min(k-a,L)),s=a+L,d=h):w>0&&(L=Math.max(T-h,Math.min(k-h,L)),s=a,d=h+L);break;case ra:x&&(i=Math.max(S,Math.min(C,n-O*x)),f=Math.max(S,Math.min(C,u+O*x))),w&&(s=Math.max(T,Math.min(k,a-L*w)),d=Math.max(T,Math.min(k,h+L*w)))}f<i&&(x*=-1,e=n,n=u,u=e,e=i,i=f,f=e,y in la&&I.attr("cursor",ca[y=la[y]])),d<s&&(w*=-1,e=a,a=h,h=e,e=s,s=d,d=e,y in fa&&I.attr("cursor",ca[y=fa[y]])),E.selection&&(M=E.selection),p&&(i=M[0][0],f=M[1][0]),m&&(s=M[0][1],d=M[1][1]),M[0][0]===i&&M[0][1]===s&&M[1][0]===f&&M[1][1]===d||(E.selection=[[i,s],[f,d]],c.call(g),R.brush())}function B(){if(Qo(),_t.touches){if(_t.touches.length)return;t&&clearTimeout(t),t=setTimeout((function(){t=null}),500)}else Bt(_t.view,_),U.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);D.attr("pointer-events","all"),I.attr("cursor",ca.overlay),E.selection&&(M=E.selection),function(e){return e[0][0]===e[1][0]||e[0][1]===e[1][1]}(M)&&(E.selection=null,c.call(g)),R.end()}}function d(){l(this,arguments).moved()}function _(){l(this,arguments).ended()}function p(){var t=this.__brush||{selection:null};return t.extent=oa(n.apply(this,arguments)),t.dim=e,t}return u.move=function(t,n){t.selection?t.on("start.brush",(function(){l(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){l(this,arguments).end()})).tween("brush",(function(){var t=this,r=t.__brush,i=l(t,arguments),o=r.selection,a=e.input("function"==typeof n?n.apply(this,arguments):n,r.extent),s=$n(o,a);function u(e){r.selection=1===e&&null===a?null:s(e),c.call(t),i.brush()}return null!==o&&null!==a?u:u(1)})):t.each((function(){var t=this,r=arguments,i=t.__brush,o=e.input("function"==typeof n?n.apply(t,r):n,i.extent),a=l(t,r).beforestart();Li(t),i.selection=null===o?null:o,c.call(t),a.start().brush().end()}))},u.clear=function(e){u.move(e,null)},f.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){bt(new Ko(u,t,e.output(this.state.selection)),a.apply,a,[t,this.that,this.args])}},u.extent=function(e){return arguments.length?(n="function"==typeof e?e:$o(oa(e)),u):n},u.filter=function(e){return arguments.length?(r="function"==typeof e?e:$o(!!e),u):r},u.handleSize=function(e){return arguments.length?(s=+e,u):s},u.keyModifiers=function(e){return arguments.length?(o=!!e,u):o},u.on=function(){var e=a.on.apply(a,arguments);return e===a?u:e},u}var Aa=Math.cos,Ma=Math.sin,Sa=Math.PI,Ta=Sa/2,Ca=2*Sa,ka=Math.max;function Oa(e){return function(t,n){return e(t.source.value+t.target.value,n.source.value+n.target.value)}}var La=function(){var e=0,t=null,n=null,r=null;function i(i){var o,a,s,u,c,l,f=i.length,h=[],d=w(f),_=[],p=[],m=p.groups=new Array(f),v=new Array(f*f);for(o=0,c=-1;++c<f;){for(a=0,l=-1;++l<f;)a+=i[c][l];h.push(a),_.push(w(f)),o+=a}for(t&&d.sort((function(e,n){return t(h[e],h[n])})),n&&_.forEach((function(e,t){e.sort((function(e,r){return n(i[t][e],i[t][r])}))})),u=(o=ka(0,Ca-e*f)/o)?e:Ca/f,a=0,c=-1;++c<f;){for(s=a,l=-1;++l<f;){var g=d[c],y=_[g][l],b=i[g][y],x=a,E=a+=b*o;v[y*f+g]={index:g,subindex:y,startAngle:x,endAngle:E,value:b}}m[g]={index:g,startAngle:s,endAngle:a,value:h[g]},a+=u}for(c=-1;++c<f;)for(l=c-1;++l<f;){var A=v[l*f+c],M=v[c*f+l];(A.value||M.value)&&p.push(A.value<M.value?{source:M,target:A}:{source:A,target:M})}return r?p.sort(r):p}return i.padAngle=function(t){return arguments.length?(e=ka(0,t),i):e},i.sortGroups=function(e){return arguments.length?(t=e,i):t},i.sortSubgroups=function(e){return arguments.length?(n=e,i):n},i.sortChords=function(e){return arguments.length?(null==e?r=null:(r=Oa(e))._=e,i):r&&r._},i},ja=Array.prototype.slice,za=function(e){return function(){return e}},Na=Math.PI,Pa=2*Na,Ra=Pa-1e-6;function Da(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Ia(){return new Da}Da.prototype=Ia.prototype={constructor:Da,moveTo:function(e,t){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(e,t){this._+="L"+(this._x1=+e)+","+(this._y1=+t)},quadraticCurveTo:function(e,t,n,r){this._+="Q"+ +e+","+ +t+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(e,t,n,r,i,o){this._+="C"+ +e+","+ +t+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(e,t,n,r,i){e=+e,t=+t,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,s=n-e,u=r-t,c=o-e,l=a-t,f=c*c+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=e)+","+(this._y1=t);else if(f>1e-6)if(Math.abs(l*s-u*c)>1e-6&&i){var h=n-o,d=r-a,_=s*s+u*u,p=h*h+d*d,m=Math.sqrt(_),v=Math.sqrt(f),g=i*Math.tan((Na-Math.acos((_+f-p)/(2*m*v)))/2),y=g/v,b=g/m;Math.abs(y-1)>1e-6&&(this._+="L"+(e+y*c)+","+(t+y*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>c*d)+","+(this._x1=e+b*s)+","+(this._y1=t+b*u)}else this._+="L"+(this._x1=e)+","+(this._y1=t);else;},arc:function(e,t,n,r,i,o){e=+e,t=+t,o=!!o;var a=(n=+n)*Math.cos(r),s=n*Math.sin(r),u=e+a,c=t+s,l=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+c:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+u+","+c),n&&(f<0&&(f=f%Pa+Pa),f>Ra?this._+="A"+n+","+n+",0,1,"+l+","+(e-a)+","+(t-s)+"A"+n+","+n+",0,1,"+l+","+(this._x1=u)+","+(this._y1=c):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=Na)+","+l+","+(this._x1=e+n*Math.cos(i))+","+(this._y1=t+n*Math.sin(i))))},rect:function(e,t,n,r){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Ua=Ia;function Fa(e){return e.source}function Ha(e){return e.target}function Ba(e){return e.radius}function Va(e){return e.startAngle}function qa(e){return e.endAngle}var Ya=function(){var e=Fa,t=Ha,n=Ba,r=Va,i=qa,o=null;function a(){var a,s=ja.call(arguments),u=e.apply(this,s),c=t.apply(this,s),l=+n.apply(this,(s[0]=u,s)),f=r.apply(this,s)-Ta,h=i.apply(this,s)-Ta,d=l*Aa(f),_=l*Ma(f),p=+n.apply(this,(s[0]=c,s)),m=r.apply(this,s)-Ta,v=i.apply(this,s)-Ta;if(o||(o=a=Ua()),o.moveTo(d,_),o.arc(0,0,l,f,h),f===m&&h===v||(o.quadraticCurveTo(0,0,p*Aa(m),p*Ma(m)),o.arc(0,0,p,m,v)),o.quadraticCurveTo(0,0,d,_),o.closePath(),a)return o=null,a+""||null}return a.radius=function(e){return arguments.length?(n="function"==typeof e?e:za(+e),a):n},a.startAngle=function(e){return arguments.length?(r="function"==typeof e?e:za(+e),a):r},a.endAngle=function(e){return arguments.length?(i="function"==typeof e?e:za(+e),a):i},a.source=function(t){return arguments.length?(e=t,a):e},a.target=function(e){return arguments.length?(t=e,a):t},a.context=function(e){return arguments.length?(o=null==e?null:e,a):o},a};function Xa(){}function Ga(e,t){var n=new Xa;if(e instanceof Xa)e.each((function(e,t){n.set(t,e)}));else if(Array.isArray(e)){var r,i=-1,o=e.length;if(null==t)for(;++i<o;)n.set(i,e[i]);else for(;++i<o;)n.set(t(r=e[i],i,e),r)}else if(e)for(var a in e)n.set(a,e[a]);return n}Xa.prototype=Ga.prototype={constructor:Xa,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var Wa=Ga,Za=function(){var e,t,n,r=[],i=[];function o(n,i,a,s){if(i>=r.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var u,c,l,f=-1,h=n.length,d=r[i++],_=Wa(),p=a();++f<h;)(l=_.get(u=d(c=n[f])+""))?l.push(c):_.set(u,[c]);return _.each((function(e,t){s(p,t,o(e,i,a,s))})),p}return n={object:function(e){return o(e,0,$a,Ka)},map:function(e){return o(e,0,Qa,Ja)},entries:function(e){return function e(n,o){if(++o>r.length)return n;var a,s=i[o-1];return null!=t&&o>=r.length?a=n.entries():(a=[],n.each((function(t,n){a.push({key:n,values:e(t,o)})}))),null!=s?a.sort((function(e,t){return s(e.key,t.key)})):a}(o(e,0,Qa,Ja),0)},key:function(e){return r.push(e),n},sortKeys:function(e){return i[r.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}};function $a(){return{}}function Ka(e,t,n){e[t]=n}function Qa(){return Wa()}function Ja(e,t,n){e.set(t,n)}function es(){}var ts=Wa.prototype;function ns(e,t){var n=new es;if(e instanceof es)e.each((function(e){n.add(e)}));else if(e){var r=-1,i=e.length;if(null==t)for(;++r<i;)n.add(e[r]);else for(;++r<i;)n.add(t(e[r],r,e))}return n}es.prototype=ns.prototype={constructor:es,has:ts.has,add:function(e){return this["$"+(e+="")]=e,this},remove:ts.remove,clear:ts.clear,values:ts.keys,size:ts.size,empty:ts.empty,each:ts.each};var rs=ns,is=function(e){var t=[];for(var n in e)t.push(n);return t},os=function(e){var t=[];for(var n in e)t.push(e[n]);return t},as=function(e){var t=[];for(var n in e)t.push({key:n,value:e[n]});return t},ss=Array.prototype.slice,us=function(e,t){return e-t},cs=function(e){for(var t=0,n=e.length,r=e[n-1][1]*e[0][0]-e[n-1][0]*e[0][1];++t<n;)r+=e[t-1][1]*e[t][0]-e[t-1][0]*e[t][1];return r},ls=function(e){return function(){return e}},fs=function(e,t){for(var n,r=-1,i=t.length;++r<i;)if(n=hs(e,t[r]))return n;return 0};function hs(e,t){for(var n=t[0],r=t[1],i=-1,o=0,a=e.length,s=a-1;o<a;s=o++){var u=e[o],c=u[0],l=u[1],f=e[s],h=f[0],d=f[1];if(ds(u,f,t))return 0;l>r!=d>r&&n<(h-c)*(r-l)/(d-l)+c&&(i=-i)}return i}function ds(e,t,n){var r,i,o,a;return function(e,t,n){return(t[0]-e[0])*(n[1]-e[1])==(n[0]-e[0])*(t[1]-e[1])}(e,t,n)&&(i=e[r=+(e[0]===t[0])],o=n[r],a=t[r],i<=o&&o<=a||a<=o&&o<=i)}var _s=function(){},ps=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],ms=function(){var e=1,t=1,n=k,r=s;function i(e){var t=n(e);if(Array.isArray(t))t=t.slice().sort(us);else{var r=m(e),i=r[0],a=r[1];t=C(i,a,t),t=w(Math.floor(i/t)*t,Math.floor(a/t)*t,t)}return t.map((function(t){return o(e,t)}))}function o(n,i){var o=[],s=[];return function(n,r,i){var o,s,u,c,l,f,h=new Array,d=new Array;o=s=-1,c=n[0]>=r,ps[c<<1].forEach(_);for(;++o<e-1;)u=c,c=n[o+1]>=r,ps[u|c<<1].forEach(_);ps[c<<0].forEach(_);for(;++s<t-1;){for(o=-1,c=n[s*e+e]>=r,l=n[s*e]>=r,ps[c<<1|l<<2].forEach(_);++o<e-1;)u=c,c=n[s*e+e+o+1]>=r,f=l,l=n[s*e+o+1]>=r,ps[u|c<<1|l<<2|f<<3].forEach(_);ps[c|l<<3].forEach(_)}o=-1,l=n[s*e]>=r,ps[l<<2].forEach(_);for(;++o<e-1;)f=l,l=n[s*e+o+1]>=r,ps[l<<2|f<<3].forEach(_);function _(e){var t,n,r=[e[0][0]+o,e[0][1]+s],u=[e[1][0]+o,e[1][1]+s],c=a(r),l=a(u);(t=d[c])?(n=h[l])?(delete d[t.end],delete h[n.start],t===n?(t.ring.push(u),i(t.ring)):h[t.start]=d[n.end]={start:t.start,end:n.end,ring:t.ring.concat(n.ring)}):(delete d[t.end],t.ring.push(u),d[t.end=l]=t):(t=h[l])?(n=d[c])?(delete h[t.start],delete d[n.end],t===n?(t.ring.push(u),i(t.ring)):h[n.start]=d[t.end]={start:n.start,end:t.end,ring:n.ring.concat(t.ring)}):(delete h[t.start],t.ring.unshift(r),h[t.start=c]=t):h[c]=d[l]={start:c,end:l,ring:[r,u]}}ps[l<<3].forEach(_)}(n,i,(function(e){r(e,n,i),cs(e)>0?o.push([e]):s.push(e)})),s.forEach((function(e){for(var t,n=0,r=o.length;n<r;++n)if(-1!==fs((t=o[n])[0],e))return void t.push(e)})),{type:"MultiPolygon",value:i,coordinates:o}}function a(t){return 2*t[0]+t[1]*(e+1)*4}function s(n,r,i){n.forEach((function(n){var o,a=n[0],s=n[1],u=0|a,c=0|s,l=r[c*e+u];a>0&&a<e&&u===a&&(o=r[c*e+u-1],n[0]=a+(i-o)/(l-o)-.5),s>0&&s<t&&c===s&&(o=r[(c-1)*e+u],n[1]=s+(i-o)/(l-o)-.5)}))}return i.contour=o,i.size=function(n){if(!arguments.length)return[e,t];var r=Math.ceil(n[0]),o=Math.ceil(n[1]);if(!(r>0&&o>0))throw new Error("invalid size");return e=r,t=o,i},i.thresholds=function(e){return arguments.length?(n="function"==typeof e?e:Array.isArray(e)?ls(ss.call(e)):ls(e),i):n},i.smooth=function(e){return arguments.length?(r=e?s:_s,i):r===s},i};function vs(e,t,n){for(var r=e.width,i=e.height,o=1+(n<<1),a=0;a<i;++a)for(var s=0,u=0;s<r+n;++s)s<r&&(u+=e.data[s+a*r]),s>=n&&(s>=o&&(u-=e.data[s-o+a*r]),t.data[s-n+a*r]=u/Math.min(s+1,r-1+o-s,o))}function gs(e,t,n){for(var r=e.width,i=e.height,o=1+(n<<1),a=0;a<r;++a)for(var s=0,u=0;s<i+n;++s)s<i&&(u+=e.data[a+s*r]),s>=n&&(s>=o&&(u-=e.data[a+(s-o)*r]),t.data[a+(s-n)*r]=u/Math.min(s+1,i-1+o-s,o))}function ys(e){return e[0]}function bs(e){return e[1]}function xs(){return 1}var ws=function(){var e=ys,t=bs,n=xs,r=960,i=500,o=20,a=2,s=3*o,u=r+2*s>>a,c=i+2*s>>a,l=ls(20);function f(r){var i=new Float32Array(u*c),f=new Float32Array(u*c);r.forEach((function(r,o,l){var f=+e(r,o,l)+s>>a,h=+t(r,o,l)+s>>a,d=+n(r,o,l);f>=0&&f<u&&h>=0&&h<c&&(i[f+h*u]+=d)})),vs({width:u,height:c,data:i},{width:u,height:c,data:f},o>>a),gs({width:u,height:c,data:f},{width:u,height:c,data:i},o>>a),vs({width:u,height:c,data:i},{width:u,height:c,data:f},o>>a),gs({width:u,height:c,data:f},{width:u,height:c,data:i},o>>a),vs({width:u,height:c,data:i},{width:u,height:c,data:f},o>>a),gs({width:u,height:c,data:f},{width:u,height:c,data:i},o>>a);var d=l(i);if(!Array.isArray(d)){var _=N(i);d=C(0,_,d),(d=w(0,Math.floor(_/d)*d,d)).shift()}return ms().thresholds(d).size([u,c])(i).map(h)}function h(e){return e.value*=Math.pow(2,-2*a),e.coordinates.forEach(d),e}function d(e){e.forEach(_)}function _(e){e.forEach(p)}function p(e){e[0]=e[0]*Math.pow(2,a)-s,e[1]=e[1]*Math.pow(2,a)-s}function m(){return u=r+2*(s=3*o)>>a,c=i+2*s>>a,f}return f.x=function(t){return arguments.length?(e="function"==typeof t?t:ls(+t),f):e},f.y=function(e){return arguments.length?(t="function"==typeof e?e:ls(+e),f):t},f.weight=function(e){return arguments.length?(n="function"==typeof e?e:ls(+e),f):n},f.size=function(e){if(!arguments.length)return[r,i];var t=Math.ceil(e[0]),n=Math.ceil(e[1]);if(!(t>=0||t>=0))throw new Error("invalid size");return r=t,i=n,m()},f.cellSize=function(e){if(!arguments.length)return 1<<a;if(!((e=+e)>=1))throw new Error("invalid cell size");return a=Math.floor(Math.log(e)/Math.LN2),m()},f.thresholds=function(e){return arguments.length?(l="function"==typeof e?e:Array.isArray(e)?ls(ss.call(e)):ls(e),f):l},f.bandwidth=function(e){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((e=+e)>=0))throw new Error("invalid bandwidth");return o=Math.round((Math.sqrt(4*e*e+1)-1)/2),m()},f},Es={},As={},Ms=34,Ss=10,Ts=13;function Cs(e){return new Function("d","return {"+e.map((function(e,t){return JSON.stringify(e)+": d["+t+"]"})).join(",")+"}")}function ks(e){var t=Object.create(null),n=[];return e.forEach((function(e){for(var r in e)r in t||n.push(t[r]=r)})),n}function Os(e,t){var n=e+"",r=n.length;return r<t?new Array(t-r+1).join(0)+n:n}function Ls(e){var t,n=e.getUTCHours(),r=e.getUTCMinutes(),i=e.getUTCSeconds(),o=e.getUTCMilliseconds();return isNaN(e)?"Invalid Date":((t=e.getUTCFullYear())<0?"-"+Os(-t,6):t>9999?"+"+Os(t,6):Os(t,4))+"-"+Os(e.getUTCMonth()+1,2)+"-"+Os(e.getUTCDate(),2)+(o?"T"+Os(n,2)+":"+Os(r,2)+":"+Os(i,2)+"."+Os(o,3)+"Z":i?"T"+Os(n,2)+":"+Os(r,2)+":"+Os(i,2)+"Z":r||n?"T"+Os(n,2)+":"+Os(r,2)+"Z":"")}var js=function(e){var t=new RegExp('["'+e+"\n\r]"),n=e.charCodeAt(0);function r(e,t){var r,i=[],o=e.length,a=0,s=0,u=o<=0,c=!1;function l(){if(u)return As;if(c)return c=!1,Es;var t,r,i=a;if(e.charCodeAt(i)===Ms){for(;a++<o&&e.charCodeAt(a)!==Ms||e.charCodeAt(++a)===Ms;);return(t=a)>=o?u=!0:(r=e.charCodeAt(a++))===Ss?c=!0:r===Ts&&(c=!0,e.charCodeAt(a)===Ss&&++a),e.slice(i+1,t-1).replace(/""/g,'"')}for(;a<o;){if((r=e.charCodeAt(t=a++))===Ss)c=!0;else if(r===Ts)c=!0,e.charCodeAt(a)===Ss&&++a;else if(r!==n)continue;return e.slice(i,t)}return u=!0,e.slice(i,o)}for(e.charCodeAt(o-1)===Ss&&--o,e.charCodeAt(o-1)===Ts&&--o;(r=l())!==As;){for(var f=[];r!==Es&&r!==As;)f.push(r),r=l();t&&null==(f=t(f,s++))||i.push(f)}return i}function i(t,n){return t.map((function(t){return n.map((function(e){return a(t[e])})).join(e)}))}function o(t){return t.map(a).join(e)}function a(e){return null==e?"":e instanceof Date?Ls(e):t.test(e+="")?'"'+e.replace(/"/g,'""')+'"':e}return{parse:function(e,t){var n,i,o=r(e,(function(e,r){if(n)return n(e,r-1);i=e,n=t?function(e,t){var n=Cs(e);return function(r,i){return t(n(r),i,e)}}(e,t):Cs(e)}));return o.columns=i||[],o},parseRows:r,format:function(t,n){return null==n&&(n=ks(t)),[n.map(a).join(e)].concat(i(t,n)).join("\n")},formatBody:function(e,t){return null==t&&(t=ks(e)),i(e,t).join("\n")},formatRows:function(e){return e.map(o).join("\n")}}},zs=js(","),Ns=zs.parse,Ps=zs.parseRows,Rs=zs.format,Ds=zs.formatBody,Is=zs.formatRows,Us=js("\t"),Fs=Us.parse,Hs=Us.parseRows,Bs=Us.format,Vs=Us.formatBody,qs=Us.formatRows;function Ys(e){for(var t in e){var n,r=e[t].trim();if(r)if("true"===r)r=!0;else if("false"===r)r=!1;else if("NaN"===r)r=NaN;else if(isNaN(n=+r)){if(!/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/.test(r))continue;r=new Date(r)}else r=n;else r=null;e[t]=r}return e}function Xs(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.blob()}var Gs=function(e,t){return fetch(e,t).then(Xs)};function Ws(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.arrayBuffer()}var Zs=function(e,t){return fetch(e,t).then(Ws)};function $s(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.text()}var Ks=function(e,t){return fetch(e,t).then($s)};function Qs(e){return function(t,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),Ks(t,n).then((function(t){return e(t,r)}))}}function Js(e,t,n,r){3===arguments.length&&"function"==typeof n&&(r=n,n=void 0);var i=js(e);return Ks(t,n).then((function(e){return i.parse(e,r)}))}var eu=Qs(Ns),tu=Qs(Fs),nu=function(e,t){return new Promise((function(n,r){var i=new Image;for(var o in t)i[o]=t[o];i.onerror=r,i.onload=function(){n(i)},i.src=e}))};function ru(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.json()}var iu=function(e,t){return fetch(e,t).then(ru)};function ou(e){return function(t,n){return Ks(t,n).then((function(t){return(new DOMParser).parseFromString(t,e)}))}}var au=ou("application/xml"),su=ou("text/html"),uu=ou("image/svg+xml"),cu=function(e,t){var n;function r(){var r,i,o=n.length,a=0,s=0;for(r=0;r<o;++r)a+=(i=n[r]).x,s+=i.y;for(a=a/o-e,s=s/o-t,r=0;r<o;++r)(i=n[r]).x-=a,i.y-=s}return null==e&&(e=0),null==t&&(t=0),r.initialize=function(e){n=e},r.x=function(t){return arguments.length?(e=+t,r):e},r.y=function(e){return arguments.length?(t=+e,r):t},r},lu=function(e){return function(){return e}},fu=function(){return 1e-6*(Math.random()-.5)};function hu(e,t,n,r){if(isNaN(t)||isNaN(n))return e;var i,o,a,s,u,c,l,f,h,d=e._root,_={data:r},p=e._x0,m=e._y0,v=e._x1,g=e._y1;if(!d)return e._root=_,e;for(;d.length;)if((c=t>=(o=(p+v)/2))?p=o:v=o,(l=n>=(a=(m+g)/2))?m=a:g=a,i=d,!(d=d[f=l<<1|c]))return i[f]=_,e;if(s=+e._x.call(null,d.data),u=+e._y.call(null,d.data),t===s&&n===u)return _.next=d,i?i[f]=_:e._root=_,e;do{i=i?i[f]=new Array(4):e._root=new Array(4),(c=t>=(o=(p+v)/2))?p=o:v=o,(l=n>=(a=(m+g)/2))?m=a:g=a}while((f=l<<1|c)==(h=(u>=a)<<1|s>=o));return i[h]=d,i[f]=_,e}var du=function(e,t,n,r,i){this.node=e,this.x0=t,this.y0=n,this.x1=r,this.y1=i};function _u(e){return e[0]}function pu(e){return e[1]}function mu(e,t,n){var r=new vu(null==t?_u:t,null==n?pu:n,NaN,NaN,NaN,NaN);return null==e?r:r.addAll(e)}function vu(e,t,n,r,i,o){this._x=e,this._y=t,this._x0=n,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function gu(e){for(var t={data:e.data},n=t;e=e.next;)n=n.next={data:e.data};return t}var yu=mu.prototype=vu.prototype;function bu(e){return e.x+e.vx}function xu(e){return e.y+e.vy}yu.copy=function(){var e,t,n=new vu(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=gu(r),n;for(e=[{source:r,target:n._root=new Array(4)}];r=e.pop();)for(var i=0;i<4;++i)(t=r.source[i])&&(t.length?e.push({source:t,target:r.target[i]=new Array(4)}):r.target[i]=gu(t));return n},yu.add=function(e){var t=+this._x.call(null,e),n=+this._y.call(null,e);return hu(this.cover(t,n),t,n,e)},yu.addAll=function(e){var t,n,r,i,o=e.length,a=new Array(o),s=new Array(o),u=1/0,c=1/0,l=-1/0,f=-1/0;for(n=0;n<o;++n)isNaN(r=+this._x.call(null,t=e[n]))||isNaN(i=+this._y.call(null,t))||(a[n]=r,s[n]=i,r<u&&(u=r),r>l&&(l=r),i<c&&(c=i),i>f&&(f=i));if(u>l||c>f)return this;for(this.cover(u,c).cover(l,f),n=0;n<o;++n)hu(this,a[n],s[n],e[n]);return this},yu.cover=function(e,t){if(isNaN(e=+e)||isNaN(t=+t))return this;var n=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(n))i=(n=Math.floor(e))+1,o=(r=Math.floor(t))+1;else{for(var a,s,u=i-n,c=this._root;n>e||e>=i||r>t||t>=o;)switch(s=(t<r)<<1|e<n,(a=new Array(4))[s]=c,c=a,u*=2,s){case 0:i=n+u,o=r+u;break;case 1:n=i-u,o=r+u;break;case 2:i=n+u,r=o-u;break;case 3:n=i-u,r=o-u}this._root&&this._root.length&&(this._root=c)}return this._x0=n,this._y0=r,this._x1=i,this._y1=o,this},yu.data=function(){var e=[];return this.visit((function(t){if(!t.length)do{e.push(t.data)}while(t=t.next)})),e},yu.extent=function(e){return arguments.length?this.cover(+e[0][0],+e[0][1]).cover(+e[1][0],+e[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},yu.find=function(e,t,n){var r,i,o,a,s,u,c,l=this._x0,f=this._y0,h=this._x1,d=this._y1,_=[],p=this._root;for(p&&_.push(new du(p,l,f,h,d)),null==n?n=1/0:(l=e-n,f=t-n,h=e+n,d=t+n,n*=n);u=_.pop();)if(!(!(p=u.node)||(i=u.x0)>h||(o=u.y0)>d||(a=u.x1)<l||(s=u.y1)<f))if(p.length){var m=(i+a)/2,v=(o+s)/2;_.push(new du(p[3],m,v,a,s),new du(p[2],i,v,m,s),new du(p[1],m,o,a,v),new du(p[0],i,o,m,v)),(c=(t>=v)<<1|e>=m)&&(u=_[_.length-1],_[_.length-1]=_[_.length-1-c],_[_.length-1-c]=u)}else{var g=e-+this._x.call(null,p.data),y=t-+this._y.call(null,p.data),b=g*g+y*y;if(b<n){var x=Math.sqrt(n=b);l=e-x,f=t-x,h=e+x,d=t+x,r=p.data}}return r},yu.remove=function(e){if(isNaN(o=+this._x.call(null,e))||isNaN(a=+this._y.call(null,e)))return this;var t,n,r,i,o,a,s,u,c,l,f,h,d=this._root,_=this._x0,p=this._y0,m=this._x1,v=this._y1;if(!d)return this;if(d.length)for(;;){if((c=o>=(s=(_+m)/2))?_=s:m=s,(l=a>=(u=(p+v)/2))?p=u:v=u,t=d,!(d=d[f=l<<1|c]))return this;if(!d.length)break;(t[f+1&3]||t[f+2&3]||t[f+3&3])&&(n=t,h=f)}for(;d.data!==e;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):t?(i?t[f]=i:delete t[f],(d=t[0]||t[1]||t[2]||t[3])&&d===(t[3]||t[2]||t[1]||t[0])&&!d.length&&(n?n[h]=d:this._root=d),this):(this._root=i,this)},yu.removeAll=function(e){for(var t=0,n=e.length;t<n;++t)this.remove(e[t]);return this},yu.root=function(){return this._root},yu.size=function(){var e=0;return this.visit((function(t){if(!t.length)do{++e}while(t=t.next)})),e},yu.visit=function(e){var t,n,r,i,o,a,s=[],u=this._root;for(u&&s.push(new du(u,this._x0,this._y0,this._x1,this._y1));t=s.pop();)if(!e(u=t.node,r=t.x0,i=t.y0,o=t.x1,a=t.y1)&&u.length){var c=(r+o)/2,l=(i+a)/2;(n=u[3])&&s.push(new du(n,c,l,o,a)),(n=u[2])&&s.push(new du(n,r,l,c,a)),(n=u[1])&&s.push(new du(n,c,i,o,l)),(n=u[0])&&s.push(new du(n,r,i,c,l))}return this},yu.visitAfter=function(e){var t,n=[],r=[];for(this._root&&n.push(new du(this._root,this._x0,this._y0,this._x1,this._y1));t=n.pop();){var i=t.node;if(i.length){var o,a=t.x0,s=t.y0,u=t.x1,c=t.y1,l=(a+u)/2,f=(s+c)/2;(o=i[0])&&n.push(new du(o,a,s,l,f)),(o=i[1])&&n.push(new du(o,l,s,u,f)),(o=i[2])&&n.push(new du(o,a,f,l,c)),(o=i[3])&&n.push(new du(o,l,f,u,c))}r.push(t)}for(;t=r.pop();)e(t.node,t.x0,t.y0,t.x1,t.y1);return this},yu.x=function(e){return arguments.length?(this._x=e,this):this._x},yu.y=function(e){return arguments.length?(this._y=e,this):this._y};var wu=function(e){var t,n,r=1,i=1;function o(){for(var e,o,s,u,c,l,f,h=t.length,d=0;d<i;++d)for(o=mu(t,bu,xu).visitAfter(a),e=0;e<h;++e)s=t[e],l=n[s.index],f=l*l,u=s.x+s.vx,c=s.y+s.vy,o.visit(_);function _(e,t,n,i,o){var a=e.data,h=e.r,d=l+h;if(!a)return t>u+d||i<u-d||n>c+d||o<c-d;if(a.index>s.index){var _=u-a.x-a.vx,p=c-a.y-a.vy,m=_*_+p*p;m<d*d&&(0===_&&(m+=(_=fu())*_),0===p&&(m+=(p=fu())*p),m=(d-(m=Math.sqrt(m)))/m*r,s.vx+=(_*=m)*(d=(h*=h)/(f+h)),s.vy+=(p*=m)*d,a.vx-=_*(d=1-d),a.vy-=p*d)}}}function a(e){if(e.data)return e.r=n[e.data.index];for(var t=e.r=0;t<4;++t)e[t]&&e[t].r>e.r&&(e.r=e[t].r)}function s(){if(t){var r,i,o=t.length;for(n=new Array(o),r=0;r<o;++r)i=t[r],n[i.index]=+e(i,r,t)}}return"function"!=typeof e&&(e=lu(null==e?1:+e)),o.initialize=function(e){t=e,s()},o.iterations=function(e){return arguments.length?(i=+e,o):i},o.strength=function(e){return arguments.length?(r=+e,o):r},o.radius=function(t){return arguments.length?(e="function"==typeof t?t:lu(+t),s(),o):e},o};function Eu(e){return e.index}function Au(e,t){var n=e.get(t);if(!n)throw new Error("missing: "+t);return n}var Mu=function(e){var t,n,r,i,o,a=Eu,s=function(e){return 1/Math.min(i[e.source.index],i[e.target.index])},u=lu(30),c=1;function l(r){for(var i=0,a=e.length;i<c;++i)for(var s,u,l,f,h,d,_,p=0;p<a;++p)u=(s=e[p]).source,f=(l=s.target).x+l.vx-u.x-u.vx||fu(),h=l.y+l.vy-u.y-u.vy||fu(),f*=d=((d=Math.sqrt(f*f+h*h))-n[p])/d*r*t[p],h*=d,l.vx-=f*(_=o[p]),l.vy-=h*_,u.vx+=f*(_=1-_),u.vy+=h*_}function f(){if(r){var s,u,c=r.length,l=e.length,f=Wa(r,a);for(s=0,i=new Array(c);s<l;++s)(u=e[s]).index=s,"object"!=typeof u.source&&(u.source=Au(f,u.source)),"object"!=typeof u.target&&(u.target=Au(f,u.target)),i[u.source.index]=(i[u.source.index]||0)+1,i[u.target.index]=(i[u.target.index]||0)+1;for(s=0,o=new Array(l);s<l;++s)u=e[s],o[s]=i[u.source.index]/(i[u.source.index]+i[u.target.index]);t=new Array(l),h(),n=new Array(l),d()}}function h(){if(r)for(var n=0,i=e.length;n<i;++n)t[n]=+s(e[n],n,e)}function d(){if(r)for(var t=0,i=e.length;t<i;++t)n[t]=+u(e[t],t,e)}return null==e&&(e=[]),l.initialize=function(e){r=e,f()},l.links=function(t){return arguments.length?(e=t,f(),l):e},l.id=function(e){return arguments.length?(a=e,l):a},l.iterations=function(e){return arguments.length?(c=+e,l):c},l.strength=function(e){return arguments.length?(s="function"==typeof e?e:lu(+e),h(),l):s},l.distance=function(e){return arguments.length?(u="function"==typeof e?e:lu(+e),d(),l):u},l};function Su(e){return e.x}function Tu(e){return e.y}var Cu=10,ku=Math.PI*(3-Math.sqrt(5)),Ou=function(e){var t,n=1,r=.001,i=1-Math.pow(r,1/300),o=0,a=.6,s=Wa(),u=fi(l),c=pe("tick","end");function l(){f(),c.call("tick",t),n<r&&(u.stop(),c.call("end",t))}function f(r){var u,c,l=e.length;void 0===r&&(r=1);for(var f=0;f<r;++f)for(n+=(o-n)*i,s.each((function(e){e(n)})),u=0;u<l;++u)null==(c=e[u]).fx?c.x+=c.vx*=a:(c.x=c.fx,c.vx=0),null==c.fy?c.y+=c.vy*=a:(c.y=c.fy,c.vy=0);return t}function h(){for(var t,n=0,r=e.length;n<r;++n){if((t=e[n]).index=n,null!=t.fx&&(t.x=t.fx),null!=t.fy&&(t.y=t.fy),isNaN(t.x)||isNaN(t.y)){var i=Cu*Math.sqrt(n),o=n*ku;t.x=i*Math.cos(o),t.y=i*Math.sin(o)}(isNaN(t.vx)||isNaN(t.vy))&&(t.vx=t.vy=0)}}function d(t){return t.initialize&&t.initialize(e),t}return null==e&&(e=[]),h(),t={tick:f,restart:function(){return u.restart(l),t},stop:function(){return u.stop(),t},nodes:function(n){return arguments.length?(e=n,h(),s.each(d),t):e},alpha:function(e){return arguments.length?(n=+e,t):n},alphaMin:function(e){return arguments.length?(r=+e,t):r},alphaDecay:function(e){return arguments.length?(i=+e,t):+i},alphaTarget:function(e){return arguments.length?(o=+e,t):o},velocityDecay:function(e){return arguments.length?(a=1-e,t):1-a},force:function(e,n){return arguments.length>1?(null==n?s.remove(e):s.set(e,d(n)),t):s.get(e)},find:function(t,n,r){var i,o,a,s,u,c=0,l=e.length;for(null==r?r=1/0:r*=r,c=0;c<l;++c)(a=(i=t-(s=e[c]).x)*i+(o=n-s.y)*o)<r&&(u=s,r=a);return u},on:function(e,n){return arguments.length>1?(c.on(e,n),t):c.on(e)}}},Lu=function(){var e,t,n,r,i=lu(-30),o=1,a=1/0,s=.81;function u(r){var i,o=e.length,a=mu(e,Su,Tu).visitAfter(l);for(n=r,i=0;i<o;++i)t=e[i],a.visit(f)}function c(){if(e){var t,n,o=e.length;for(r=new Array(o),t=0;t<o;++t)n=e[t],r[n.index]=+i(n,t,e)}}function l(e){var t,n,i,o,a,s=0,u=0;if(e.length){for(i=o=a=0;a<4;++a)(t=e[a])&&(n=Math.abs(t.value))&&(s+=t.value,u+=n,i+=n*t.x,o+=n*t.y);e.x=i/u,e.y=o/u}else{(t=e).x=t.data.x,t.y=t.data.y;do{s+=r[t.data.index]}while(t=t.next)}e.value=s}function f(e,i,u,c){if(!e.value)return!0;var l=e.x-t.x,f=e.y-t.y,h=c-i,d=l*l+f*f;if(h*h/s<d)return d<a&&(0===l&&(d+=(l=fu())*l),0===f&&(d+=(f=fu())*f),d<o&&(d=Math.sqrt(o*d)),t.vx+=l*e.value*n/d,t.vy+=f*e.value*n/d),!0;if(!(e.length||d>=a)){(e.data!==t||e.next)&&(0===l&&(d+=(l=fu())*l),0===f&&(d+=(f=fu())*f),d<o&&(d=Math.sqrt(o*d)));do{e.data!==t&&(h=r[e.data.index]*n/d,t.vx+=l*h,t.vy+=f*h)}while(e=e.next)}}return u.initialize=function(t){e=t,c()},u.strength=function(e){return arguments.length?(i="function"==typeof e?e:lu(+e),c(),u):i},u.distanceMin=function(e){return arguments.length?(o=e*e,u):Math.sqrt(o)},u.distanceMax=function(e){return arguments.length?(a=e*e,u):Math.sqrt(a)},u.theta=function(e){return arguments.length?(s=e*e,u):Math.sqrt(s)},u},ju=function(e,t,n){var r,i,o,a=lu(.1);function s(e){for(var a=0,s=r.length;a<s;++a){var u=r[a],c=u.x-t||1e-6,l=u.y-n||1e-6,f=Math.sqrt(c*c+l*l),h=(o[a]-f)*i[a]*e/f;u.vx+=c*h,u.vy+=l*h}}function u(){if(r){var t,n=r.length;for(i=new Array(n),o=new Array(n),t=0;t<n;++t)o[t]=+e(r[t],t,r),i[t]=isNaN(o[t])?0:+a(r[t],t,r)}}return"function"!=typeof e&&(e=lu(+e)),null==t&&(t=0),null==n&&(n=0),s.initialize=function(e){r=e,u()},s.strength=function(e){return arguments.length?(a="function"==typeof e?e:lu(+e),u(),s):a},s.radius=function(t){return arguments.length?(e="function"==typeof t?t:lu(+t),u(),s):e},s.x=function(e){return arguments.length?(t=+e,s):t},s.y=function(e){return arguments.length?(n=+e,s):n},s},zu=function(e){var t,n,r,i=lu(.1);function o(e){for(var i,o=0,a=t.length;o<a;++o)(i=t[o]).vx+=(r[o]-i.x)*n[o]*e}function a(){if(t){var o,a=t.length;for(n=new Array(a),r=new Array(a),o=0;o<a;++o)n[o]=isNaN(r[o]=+e(t[o],o,t))?0:+i(t[o],o,t)}}return"function"!=typeof e&&(e=lu(null==e?0:+e)),o.initialize=function(e){t=e,a()},o.strength=function(e){return arguments.length?(i="function"==typeof e?e:lu(+e),a(),o):i},o.x=function(t){return arguments.length?(e="function"==typeof t?t:lu(+t),a(),o):e},o},Nu=function(e){var t,n,r,i=lu(.1);function o(e){for(var i,o=0,a=t.length;o<a;++o)(i=t[o]).vy+=(r[o]-i.y)*n[o]*e}function a(){if(t){var o,a=t.length;for(n=new Array(a),r=new Array(a),o=0;o<a;++o)n[o]=isNaN(r[o]=+e(t[o],o,t))?0:+i(t[o],o,t)}}return"function"!=typeof e&&(e=lu(null==e?0:+e)),o.initialize=function(e){t=e,a()},o.strength=function(e){return arguments.length?(i="function"==typeof e?e:lu(+e),a(),o):i},o.y=function(t){return arguments.length?(e="function"==typeof t?t:lu(+t),a(),o):e},o},Pu=function(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]},Ru=function(e){return(e=Pu(Math.abs(e)))?e[1]:NaN},Du=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Iu(e){if(!(t=Du.exec(e)))throw new Error("invalid format: "+e);var t;return new Uu({fill:t[1],align:t[2],sign:t[3],symbol:t[4],zero:t[5],width:t[6],comma:t[7],precision:t[8]&&t[8].slice(1),trim:t[9],type:t[10]})}function Uu(e){this.fill=void 0===e.fill?" ":e.fill+"",this.align=void 0===e.align?">":e.align+"",this.sign=void 0===e.sign?"-":e.sign+"",this.symbol=void 0===e.symbol?"":e.symbol+"",this.zero=!!e.zero,this.width=void 0===e.width?void 0:+e.width,this.comma=!!e.comma,this.precision=void 0===e.precision?void 0:+e.precision,this.trim=!!e.trim,this.type=void 0===e.type?"":e.type+""}Iu.prototype=Uu.prototype,Uu.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Fu,Hu,Bu,Vu,qu=function(e){e:for(var t,n=e.length,r=1,i=-1;r<n;++r)switch(e[r]){case".":i=t=r;break;case"0":0===i&&(i=r),t=r;break;default:if(i>0){if(!+e[r])break e;i=0}}return i>0?e.slice(0,i)+e.slice(t+1):e},Yu=function(e,t){var n=Pu(e,t);if(!n)return e+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Xu={"%":function(e,t){return(100*e).toFixed(t)},b:function(e){return Math.round(e).toString(2)},c:function(e){return e+""},d:function(e){return Math.round(e).toString(10)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},g:function(e,t){return e.toPrecision(t)},o:function(e){return Math.round(e).toString(8)},p:function(e,t){return Yu(100*e,t)},r:Yu,s:function(e,t){var n=Pu(e,t);if(!n)return e+"";var r=n[0],i=n[1],o=i-(Fu=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Pu(e,Math.max(0,t+o-1))[0]},X:function(e){return Math.round(e).toString(16).toUpperCase()},x:function(e){return Math.round(e).toString(16)}},Gu=function(e){return e},Wu=Array.prototype.map,Zu=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],$u=function(e){var t,n,r=void 0===e.grouping||void 0===e.thousands?Gu:(t=Wu.call(e.grouping,Number),n=e.thousands+"",function(e,r){for(var i=e.length,o=[],a=0,s=t[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(e.substring(i-=s,i+s)),!((u+=s+1)>r));)s=t[a=(a+1)%t.length];return o.reverse().join(n)}),i=void 0===e.currency?"":e.currency[0]+"",o=void 0===e.currency?"":e.currency[1]+"",a=void 0===e.decimal?".":e.decimal+"",s=void 0===e.numerals?Gu:function(e){return function(t){return t.replace(/[0-9]/g,(function(t){return e[+t]}))}}(Wu.call(e.numerals,String)),u=void 0===e.percent?"%":e.percent+"",c=void 0===e.minus?"-":e.minus+"",l=void 0===e.nan?"NaN":e.nan+"";function f(e){var t=(e=Iu(e)).fill,n=e.align,f=e.sign,h=e.symbol,d=e.zero,_=e.width,p=e.comma,m=e.precision,v=e.trim,g=e.type;"n"===g?(p=!0,g="g"):Xu[g]||(void 0===m&&(m=12),v=!0,g="g"),(d||"0"===t&&"="===n)&&(d=!0,t="0",n="=");var y="$"===h?i:"#"===h&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",b="$"===h?o:/[%p]/.test(g)?u:"",x=Xu[g],w=/[defgprs%]/.test(g);function E(e){var i,o,u,h=y,E=b;if("c"===g)E=x(e)+E,e="";else{var A=(e=+e)<0;if(e=isNaN(e)?l:x(Math.abs(e),m),v&&(e=qu(e)),A&&0==+e&&(A=!1),h=(A?"("===f?f:c:"-"===f||"("===f?"":f)+h,E=("s"===g?Zu[8+Fu/3]:"")+E+(A&&"("===f?")":""),w)for(i=-1,o=e.length;++i<o;)if(48>(u=e.charCodeAt(i))||u>57){E=(46===u?a+e.slice(i+1):e.slice(i))+E,e=e.slice(0,i);break}}p&&!d&&(e=r(e,1/0));var M=h.length+e.length+E.length,S=M<_?new Array(_-M+1).join(t):"";switch(p&&d&&(e=r(S+e,S.length?_-E.length:1/0),S=""),n){case"<":e=h+e+E+S;break;case"=":e=h+S+e+E;break;case"^":e=S.slice(0,M=S.length>>1)+h+e+E+S.slice(M);break;default:e=S+h+e+E}return s(e)}return m=void 0===m?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),E.toString=function(){return e+""},E}return{format:f,formatPrefix:function(e,t){var n=f(((e=Iu(e)).type="f",e)),r=3*Math.max(-8,Math.min(8,Math.floor(Ru(t)/3))),i=Math.pow(10,-r),o=Zu[8+r/3];return function(e){return n(i*e)+o}}}};function Ku(e){return Hu=$u(e),Bu=Hu.format,Vu=Hu.formatPrefix,Hu}Ku({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"});var Qu=function(e){return Math.max(0,-Ru(Math.abs(e)))},Ju=function(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Ru(t)/3)))-Ru(Math.abs(e)))},ec=function(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,Ru(t)-Ru(e))+1},tc=function(){return new nc};function nc(){this.reset()}nc.prototype={constructor:nc,reset:function(){this.s=this.t=0},add:function(e){ic(rc,e,this.t),ic(this,rc.s,this.s),this.s?this.t+=rc.t:this.s=rc.t},valueOf:function(){return this.s}};var rc=new nc;function ic(e,t,n){var r=e.s=t+n,i=r-t,o=r-i;e.t=t-o+(n-i)}var oc=1e-6,ac=1e-12,sc=Math.PI,uc=sc/2,cc=sc/4,lc=2*sc,fc=180/sc,hc=sc/180,dc=Math.abs,_c=Math.atan,pc=Math.atan2,mc=Math.cos,vc=Math.ceil,gc=Math.exp,yc=(Math.floor,Math.log),bc=Math.pow,xc=Math.sin,wc=Math.sign||function(e){return e>0?1:e<0?-1:0},Ec=Math.sqrt,Ac=Math.tan;function Mc(e){return e>1?0:e<-1?sc:Math.acos(e)}function Sc(e){return e>1?uc:e<-1?-uc:Math.asin(e)}function Tc(e){return(e=xc(e/2))*e}function Cc(){}function kc(e,t){e&&Lc.hasOwnProperty(e.type)&&Lc[e.type](e,t)}var Oc={Feature:function(e,t){kc(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,r=-1,i=n.length;++r<i;)kc(n[r].geometry,t)}},Lc={Sphere:function(e,t){t.sphere()},Point:function(e,t){e=e.coordinates,t.point(e[0],e[1],e[2])},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)e=n[r],t.point(e[0],e[1],e[2])},LineString:function(e,t){jc(e.coordinates,t,0)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)jc(n[r],t,0)},Polygon:function(e,t){zc(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)zc(n[r],t)},GeometryCollection:function(e,t){for(var n=e.geometries,r=-1,i=n.length;++r<i;)kc(n[r],t)}};function jc(e,t,n){var r,i=-1,o=e.length-n;for(t.lineStart();++i<o;)r=e[i],t.point(r[0],r[1],r[2]);t.lineEnd()}function zc(e,t){var n=-1,r=e.length;for(t.polygonStart();++n<r;)jc(e[n],t,1);t.polygonEnd()}var Nc,Pc,Rc,Dc,Ic,Uc=function(e,t){e&&Oc.hasOwnProperty(e.type)?Oc[e.type](e,t):kc(e,t)},Fc=tc(),Hc=tc(),Bc={point:Cc,lineStart:Cc,lineEnd:Cc,polygonStart:function(){Fc.reset(),Bc.lineStart=Vc,Bc.lineEnd=qc},polygonEnd:function(){var e=+Fc;Hc.add(e<0?lc+e:e),this.lineStart=this.lineEnd=this.point=Cc},sphere:function(){Hc.add(lc)}};function Vc(){Bc.point=Yc}function qc(){Xc(Nc,Pc)}function Yc(e,t){Bc.point=Xc,Nc=e,Pc=t,Rc=e*=hc,Dc=mc(t=(t*=hc)/2+cc),Ic=xc(t)}function Xc(e,t){var n=(e*=hc)-Rc,r=n>=0?1:-1,i=r*n,o=mc(t=(t*=hc)/2+cc),a=xc(t),s=Ic*a,u=Dc*o+s*mc(i),c=s*r*xc(i);Fc.add(pc(c,u)),Rc=e,Dc=o,Ic=a}var Gc=function(e){return Hc.reset(),Uc(e,Bc),2*Hc};function Wc(e){return[pc(e[1],e[0]),Sc(e[2])]}function Zc(e){var t=e[0],n=e[1],r=mc(n);return[r*mc(t),r*xc(t),xc(n)]}function $c(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function Kc(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}function Qc(e,t){e[0]+=t[0],e[1]+=t[1],e[2]+=t[2]}function Jc(e,t){return[e[0]*t,e[1]*t,e[2]*t]}function el(e){var t=Ec(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);e[0]/=t,e[1]/=t,e[2]/=t}var tl,nl,rl,il,ol,al,sl,ul,cl,ll,fl=tc(),hl={point:dl,lineStart:pl,lineEnd:ml,polygonStart:function(){hl.point=vl,hl.lineStart=gl,hl.lineEnd=yl,fl.reset(),Bc.polygonStart()},polygonEnd:function(){Bc.polygonEnd(),hl.point=dl,hl.lineStart=pl,hl.lineEnd=ml,Fc<0?(tl=-(rl=180),nl=-(il=90)):fl>oc?il=90:fl<-oc&&(nl=-90),ll[0]=tl,ll[1]=rl},sphere:function(){tl=-(rl=180),nl=-(il=90)}};function dl(e,t){cl.push(ll=[tl=e,rl=e]),t<nl&&(nl=t),t>il&&(il=t)}function _l(e,t){var n=Zc([e*hc,t*hc]);if(ul){var r=Kc(ul,n),i=Kc([r[1],-r[0],0],r);el(i),i=Wc(i);var o,a=e-ol,s=a>0?1:-1,u=i[0]*fc*s,c=dc(a)>180;c^(s*ol<u&&u<s*e)?(o=i[1]*fc)>il&&(il=o):c^(s*ol<(u=(u+360)%360-180)&&u<s*e)?(o=-i[1]*fc)<nl&&(nl=o):(t<nl&&(nl=t),t>il&&(il=t)),c?e<ol?bl(tl,e)>bl(tl,rl)&&(rl=e):bl(e,rl)>bl(tl,rl)&&(tl=e):rl>=tl?(e<tl&&(tl=e),e>rl&&(rl=e)):e>ol?bl(tl,e)>bl(tl,rl)&&(rl=e):bl(e,rl)>bl(tl,rl)&&(tl=e)}else cl.push(ll=[tl=e,rl=e]);t<nl&&(nl=t),t>il&&(il=t),ul=n,ol=e}function pl(){hl.point=_l}function ml(){ll[0]=tl,ll[1]=rl,hl.point=dl,ul=null}function vl(e,t){if(ul){var n=e-ol;fl.add(dc(n)>180?n+(n>0?360:-360):n)}else al=e,sl=t;Bc.point(e,t),_l(e,t)}function gl(){Bc.lineStart()}function yl(){vl(al,sl),Bc.lineEnd(),dc(fl)>oc&&(tl=-(rl=180)),ll[0]=tl,ll[1]=rl,ul=null}function bl(e,t){return(t-=e)<0?t+360:t}function xl(e,t){return e[0]-t[0]}function wl(e,t){return e[0]<=e[1]?e[0]<=t&&t<=e[1]:t<e[0]||e[1]<t}var El,Al,Ml,Sl,Tl,Cl,kl,Ol,Ll,jl,zl,Nl,Pl,Rl,Dl,Il,Ul=function(e){var t,n,r,i,o,a,s;if(il=rl=-(tl=nl=1/0),cl=[],Uc(e,hl),n=cl.length){for(cl.sort(xl),t=1,o=[r=cl[0]];t<n;++t)wl(r,(i=cl[t])[0])||wl(r,i[1])?(bl(r[0],i[1])>bl(r[0],r[1])&&(r[1]=i[1]),bl(i[0],r[1])>bl(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(a=-1/0,t=0,r=o[n=o.length-1];t<=n;r=i,++t)i=o[t],(s=bl(r[1],i[0]))>a&&(a=s,tl=i[0],rl=r[1])}return cl=ll=null,tl===1/0||nl===1/0?[[NaN,NaN],[NaN,NaN]]:[[tl,nl],[rl,il]]},Fl={sphere:Cc,point:Hl,lineStart:Vl,lineEnd:Xl,polygonStart:function(){Fl.lineStart=Gl,Fl.lineEnd=Wl},polygonEnd:function(){Fl.lineStart=Vl,Fl.lineEnd=Xl}};function Hl(e,t){e*=hc;var n=mc(t*=hc);Bl(n*mc(e),n*xc(e),xc(t))}function Bl(e,t,n){Ml+=(e-Ml)/++El,Sl+=(t-Sl)/El,Tl+=(n-Tl)/El}function Vl(){Fl.point=ql}function ql(e,t){e*=hc;var n=mc(t*=hc);Rl=n*mc(e),Dl=n*xc(e),Il=xc(t),Fl.point=Yl,Bl(Rl,Dl,Il)}function Yl(e,t){e*=hc;var n=mc(t*=hc),r=n*mc(e),i=n*xc(e),o=xc(t),a=pc(Ec((a=Dl*o-Il*i)*a+(a=Il*r-Rl*o)*a+(a=Rl*i-Dl*r)*a),Rl*r+Dl*i+Il*o);Al+=a,Cl+=a*(Rl+(Rl=r)),kl+=a*(Dl+(Dl=i)),Ol+=a*(Il+(Il=o)),Bl(Rl,Dl,Il)}function Xl(){Fl.point=Hl}function Gl(){Fl.point=Zl}function Wl(){$l(Nl,Pl),Fl.point=Hl}function Zl(e,t){Nl=e,Pl=t,e*=hc,t*=hc,Fl.point=$l;var n=mc(t);Rl=n*mc(e),Dl=n*xc(e),Il=xc(t),Bl(Rl,Dl,Il)}function $l(e,t){e*=hc;var n=mc(t*=hc),r=n*mc(e),i=n*xc(e),o=xc(t),a=Dl*o-Il*i,s=Il*r-Rl*o,u=Rl*i-Dl*r,c=Ec(a*a+s*s+u*u),l=Sc(c),f=c&&-l/c;Ll+=f*a,jl+=f*s,zl+=f*u,Al+=l,Cl+=l*(Rl+(Rl=r)),kl+=l*(Dl+(Dl=i)),Ol+=l*(Il+(Il=o)),Bl(Rl,Dl,Il)}var Kl=function(e){El=Al=Ml=Sl=Tl=Cl=kl=Ol=Ll=jl=zl=0,Uc(e,Fl);var t=Ll,n=jl,r=zl,i=t*t+n*n+r*r;return i<ac&&(t=Cl,n=kl,r=Ol,Al<oc&&(t=Ml,n=Sl,r=Tl),(i=t*t+n*n+r*r)<ac)?[NaN,NaN]:[pc(n,t)*fc,Sc(r/Ec(i))*fc]},Ql=function(e){return function(){return e}},Jl=function(e,t){function n(n,r){return n=e(n,r),t(n[0],n[1])}return e.invert&&t.invert&&(n.invert=function(n,r){return(n=t.invert(n,r))&&e.invert(n[0],n[1])}),n};function ef(e,t){return[dc(e)>sc?e+Math.round(-e/lc)*lc:e,t]}function tf(e,t,n){return(e%=lc)?t||n?Jl(rf(e),of(t,n)):rf(e):t||n?of(t,n):ef}function nf(e){return function(t,n){return[(t+=e)>sc?t-lc:t<-sc?t+lc:t,n]}}function rf(e){var t=nf(e);return t.invert=nf(-e),t}function of(e,t){var n=mc(e),r=xc(e),i=mc(t),o=xc(t);function a(e,t){var a=mc(t),s=mc(e)*a,u=xc(e)*a,c=xc(t),l=c*n+s*r;return[pc(u*i-l*o,s*n-c*r),Sc(l*i+u*o)]}return a.invert=function(e,t){var a=mc(t),s=mc(e)*a,u=xc(e)*a,c=xc(t),l=c*i-u*o;return[pc(u*i+c*o,s*n+l*r),Sc(l*n-s*r)]},a}ef.invert=ef;var af=function(e){function t(t){return(t=e(t[0]*hc,t[1]*hc))[0]*=fc,t[1]*=fc,t}return e=tf(e[0]*hc,e[1]*hc,e.length>2?e[2]*hc:0),t.invert=function(t){return(t=e.invert(t[0]*hc,t[1]*hc))[0]*=fc,t[1]*=fc,t},t};function sf(e,t,n,r,i,o){if(n){var a=mc(t),s=xc(t),u=r*n;null==i?(i=t+r*lc,o=t-u/2):(i=uf(a,i),o=uf(a,o),(r>0?i<o:i>o)&&(i+=r*lc));for(var c,l=i;r>0?l>o:l<o;l-=u)c=Wc([a,-s*mc(l),-s*xc(l)]),e.point(c[0],c[1])}}function uf(e,t){(t=Zc(t))[0]-=e,el(t);var n=Mc(-t[1]);return((-t[2]<0?-n:n)+lc-oc)%lc}var cf=function(){var e,t,n=Ql([0,0]),r=Ql(90),i=Ql(6),o={point:function(n,r){e.push(n=t(n,r)),n[0]*=fc,n[1]*=fc}};function a(){var a=n.apply(this,arguments),s=r.apply(this,arguments)*hc,u=i.apply(this,arguments)*hc;return e=[],t=tf(-a[0]*hc,-a[1]*hc,0).invert,sf(o,s,u,1),a={type:"Polygon",coordinates:[e]},e=t=null,a}return a.center=function(e){return arguments.length?(n="function"==typeof e?e:Ql([+e[0],+e[1]]),a):n},a.radius=function(e){return arguments.length?(r="function"==typeof e?e:Ql(+e),a):r},a.precision=function(e){return arguments.length?(i="function"==typeof e?e:Ql(+e),a):i},a},lf=function(){var e,t=[];return{point:function(t,n){e.push([t,n])},lineStart:function(){t.push(e=[])},lineEnd:Cc,rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))},result:function(){var n=t;return t=[],e=null,n}}},ff=function(e,t){return dc(e[0]-t[0])<oc&&dc(e[1]-t[1])<oc};function hf(e,t,n,r){this.x=e,this.z=t,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var df=function(e,t,n,r,i){var o,a,s=[],u=[];if(e.forEach((function(e){if(!((t=e.length-1)<=0)){var t,n,r=e[0],a=e[t];if(ff(r,a)){for(i.lineStart(),o=0;o<t;++o)i.point((r=e[o])[0],r[1]);i.lineEnd()}else s.push(n=new hf(r,e,null,!0)),u.push(n.o=new hf(r,null,n,!1)),s.push(n=new hf(a,e,null,!1)),u.push(n.o=new hf(a,null,n,!0))}})),s.length){for(u.sort(t),_f(s),_f(u),o=0,a=u.length;o<a;++o)u[o].e=n=!n;for(var c,l,f=s[0];;){for(var h=f,d=!0;h.v;)if((h=h.n)===f)return;c=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(o=0,a=c.length;o<a;++o)i.point((l=c[o])[0],l[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(c=h.p.z,o=c.length-1;o>=0;--o)i.point((l=c[o])[0],l[1]);else r(h.x,h.p.x,-1,i);h=h.p}c=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}};function _f(e){if(t=e.length){for(var t,n,r=0,i=e[0];++r<t;)i.n=n=e[r],n.p=i,i=n;i.n=n=e[0],n.p=i}}var pf=tc();function mf(e){return dc(e[0])<=sc?e[0]:wc(e[0])*((dc(e[0])+sc)%lc-sc)}var vf=function(e,t){var n=mf(t),r=t[1],i=xc(r),o=[xc(n),-mc(n),0],a=0,s=0;pf.reset(),1===i?r=uc+oc:-1===i&&(r=-uc-oc);for(var u=0,c=e.length;u<c;++u)if(f=(l=e[u]).length)for(var l,f,h=l[f-1],d=mf(h),_=h[1]/2+cc,p=xc(_),m=mc(_),v=0;v<f;++v,d=y,p=x,m=w,h=g){var g=l[v],y=mf(g),b=g[1]/2+cc,x=xc(b),w=mc(b),E=y-d,A=E>=0?1:-1,M=A*E,S=M>sc,T=p*x;if(pf.add(pc(T*A*xc(M),m*w+T*mc(M))),a+=S?E+A*lc:E,S^d>=n^y>=n){var C=Kc(Zc(h),Zc(g));el(C);var k=Kc(o,C);el(k);var O=(S^E>=0?-1:1)*Sc(k[2]);(r>O||r===O&&(C[0]||C[1]))&&(s+=S^E>=0?1:-1)}}return(a<-oc||a<oc&&pf<-oc)^1&s},gf=function(e,t,n,r){return function(i){var o,a,s,u=t(i),c=lf(),l=t(c),f=!1,h={point:d,lineStart:p,lineEnd:m,polygonStart:function(){h.point=v,h.lineStart=g,h.lineEnd=y,a=[],o=[]},polygonEnd:function(){h.point=d,h.lineStart=p,h.lineEnd=m,a=D(a);var e=vf(o,r);a.length?(f||(i.polygonStart(),f=!0),df(a,bf,e,n,i)):e&&(f||(i.polygonStart(),f=!0),i.lineStart(),n(null,null,1,i),i.lineEnd()),f&&(i.polygonEnd(),f=!1),a=o=null},sphere:function(){i.polygonStart(),i.lineStart(),n(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(t,n){e(t,n)&&i.point(t,n)}function _(e,t){u.point(e,t)}function p(){h.point=_,u.lineStart()}function m(){h.point=d,u.lineEnd()}function v(e,t){s.push([e,t]),l.point(e,t)}function g(){l.lineStart(),s=[]}function y(){v(s[0][0],s[0][1]),l.lineEnd();var e,t,n,r,u=l.clean(),h=c.result(),d=h.length;if(s.pop(),o.push(s),s=null,d)if(1&u){if((t=(n=h[0]).length-1)>0){for(f||(i.polygonStart(),f=!0),i.lineStart(),e=0;e<t;++e)i.point((r=n[e])[0],r[1]);i.lineEnd()}}else d>1&&2&u&&h.push(h.pop().concat(h.shift())),a.push(h.filter(yf))}return h}};function yf(e){return e.length>1}function bf(e,t){return((e=e.x)[0]<0?e[1]-uc-oc:uc-e[1])-((t=t.x)[0]<0?t[1]-uc-oc:uc-t[1])}var xf=gf((function(){return!0}),(function(e){var t,n=NaN,r=NaN,i=NaN;return{lineStart:function(){e.lineStart(),t=1},point:function(o,a){var s=o>0?sc:-sc,u=dc(o-n);dc(u-sc)<oc?(e.point(n,r=(r+a)/2>0?uc:-uc),e.point(i,r),e.lineEnd(),e.lineStart(),e.point(s,r),e.point(o,r),t=0):i!==s&&u>=sc&&(dc(n-i)<oc&&(n-=i*oc),dc(o-s)<oc&&(o-=s*oc),r=function(e,t,n,r){var i,o,a=xc(e-n);return dc(a)>oc?_c((xc(t)*(o=mc(r))*xc(n)-xc(r)*(i=mc(t))*xc(e))/(i*o*a)):(t+r)/2}(n,r,o,a),e.point(i,r),e.lineEnd(),e.lineStart(),e.point(s,r),t=0),e.point(n=o,r=a),i=s},lineEnd:function(){e.lineEnd(),n=r=NaN},clean:function(){return 2-t}}}),(function(e,t,n,r){var i;if(null==e)i=n*uc,r.point(-sc,i),r.point(0,i),r.point(sc,i),r.point(sc,0),r.point(sc,-i),r.point(0,-i),r.point(-sc,-i),r.point(-sc,0),r.point(-sc,i);else if(dc(e[0]-t[0])>oc){var o=e[0]<t[0]?sc:-sc;i=n*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(t[0],t[1])}),[-sc,-uc]);var wf=function(e){var t=mc(e),n=6*hc,r=t>0,i=dc(t)>oc;function o(e,n){return mc(e)*mc(n)>t}function a(e,n,r){var i=[1,0,0],o=Kc(Zc(e),Zc(n)),a=$c(o,o),s=o[0],u=a-s*s;if(!u)return!r&&e;var c=t*a/u,l=-t*s/u,f=Kc(i,o),h=Jc(i,c);Qc(h,Jc(o,l));var d=f,_=$c(h,d),p=$c(d,d),m=_*_-p*($c(h,h)-1);if(!(m<0)){var v=Ec(m),g=Jc(d,(-_-v)/p);if(Qc(g,h),g=Wc(g),!r)return g;var y,b=e[0],x=n[0],w=e[1],E=n[1];x<b&&(y=b,b=x,x=y);var A=x-b,M=dc(A-sc)<oc;if(!M&&E<w&&(y=w,w=E,E=y),M||A<oc?M?w+E>0^g[1]<(dc(g[0]-b)<oc?w:E):w<=g[1]&&g[1]<=E:A>sc^(b<=g[0]&&g[0]<=x)){var S=Jc(d,(-_+v)/p);return Qc(S,h),[g,Wc(S)]}}}function s(t,n){var i=r?e:sc-e,o=0;return t<-i?o|=1:t>i&&(o|=2),n<-i?o|=4:n>i&&(o|=8),o}return gf(o,(function(e){var t,n,u,c,l;return{lineStart:function(){c=u=!1,l=1},point:function(f,h){var d,_=[f,h],p=o(f,h),m=r?p?0:s(f,h):p?s(f+(f<0?sc:-sc),h):0;if(!t&&(c=u=p)&&e.lineStart(),p!==u&&(!(d=a(t,_))||ff(t,d)||ff(_,d))&&(_[0]+=oc,_[1]+=oc,p=o(_[0],_[1])),p!==u)l=0,p?(e.lineStart(),d=a(_,t),e.point(d[0],d[1])):(d=a(t,_),e.point(d[0],d[1]),e.lineEnd()),t=d;else if(i&&t&&r^p){var v;m&n||!(v=a(_,t,!0))||(l=0,r?(e.lineStart(),e.point(v[0][0],v[0][1]),e.point(v[1][0],v[1][1]),e.lineEnd()):(e.point(v[1][0],v[1][1]),e.lineEnd(),e.lineStart(),e.point(v[0][0],v[0][1])))}!p||t&&ff(t,_)||e.point(_[0],_[1]),t=_,u=p,n=m},lineEnd:function(){u&&e.lineEnd(),t=null},clean:function(){return l|(c&&u)<<1}}}),(function(t,r,i,o){sf(o,e,n,i,t,r)}),r?[0,-e]:[-sc,e-sc])},Ef=function(e,t,n,r,i,o){var a,s=e[0],u=e[1],c=0,l=1,f=t[0]-s,h=t[1]-u;if(a=n-s,f||!(a>0)){if(a/=f,f<0){if(a<c)return;a<l&&(l=a)}else if(f>0){if(a>l)return;a>c&&(c=a)}if(a=i-s,f||!(a<0)){if(a/=f,f<0){if(a>l)return;a>c&&(c=a)}else if(f>0){if(a<c)return;a<l&&(l=a)}if(a=r-u,h||!(a>0)){if(a/=h,h<0){if(a<c)return;a<l&&(l=a)}else if(h>0){if(a>l)return;a>c&&(c=a)}if(a=o-u,h||!(a<0)){if(a/=h,h<0){if(a>l)return;a>c&&(c=a)}else if(h>0){if(a<c)return;a<l&&(l=a)}return c>0&&(e[0]=s+c*f,e[1]=u+c*h),l<1&&(t[0]=s+l*f,t[1]=u+l*h),!0}}}}},Af=1e9,Mf=-Af;function Sf(e,t,n,r){function i(i,o){return e<=i&&i<=n&&t<=o&&o<=r}function o(i,o,s,c){var l=0,f=0;if(null==i||(l=a(i,s))!==(f=a(o,s))||u(i,o)<0^s>0)do{c.point(0===l||3===l?e:n,l>1?r:t)}while((l=(l+s+4)%4)!==f);else c.point(o[0],o[1])}function a(r,i){return dc(r[0]-e)<oc?i>0?0:3:dc(r[0]-n)<oc?i>0?2:1:dc(r[1]-t)<oc?i>0?1:0:i>0?3:2}function s(e,t){return u(e.x,t.x)}function u(e,t){var n=a(e,1),r=a(t,1);return n!==r?n-r:0===n?t[1]-e[1]:1===n?e[0]-t[0]:2===n?e[1]-t[1]:t[0]-e[0]}return function(a){var u,c,l,f,h,d,_,p,m,v,g,y=a,b=lf(),x={point:w,lineStart:function(){x.point=E,c&&c.push(l=[]);v=!0,m=!1,_=p=NaN},lineEnd:function(){u&&(E(f,h),d&&m&&b.rejoin(),u.push(b.result()));x.point=w,m&&y.lineEnd()},polygonStart:function(){y=b,u=[],c=[],g=!0},polygonEnd:function(){var t=function(){for(var t=0,n=0,i=c.length;n<i;++n)for(var o,a,s=c[n],u=1,l=s.length,f=s[0],h=f[0],d=f[1];u<l;++u)o=h,a=d,f=s[u],h=f[0],d=f[1],a<=r?d>r&&(h-o)*(r-a)>(d-a)*(e-o)&&++t:d<=r&&(h-o)*(r-a)<(d-a)*(e-o)&&--t;return t}(),n=g&&t,i=(u=D(u)).length;(n||i)&&(a.polygonStart(),n&&(a.lineStart(),o(null,null,1,a),a.lineEnd()),i&&df(u,s,t,o,a),a.polygonEnd());y=a,u=c=l=null}};function w(e,t){i(e,t)&&y.point(e,t)}function E(o,a){var s=i(o,a);if(c&&l.push([o,a]),v)f=o,h=a,d=s,v=!1,s&&(y.lineStart(),y.point(o,a));else if(s&&m)y.point(o,a);else{var u=[_=Math.max(Mf,Math.min(Af,_)),p=Math.max(Mf,Math.min(Af,p))],b=[o=Math.max(Mf,Math.min(Af,o)),a=Math.max(Mf,Math.min(Af,a))];Ef(u,b,e,t,n,r)?(m||(y.lineStart(),y.point(u[0],u[1])),y.point(b[0],b[1]),s||y.lineEnd(),g=!1):s&&(y.lineStart(),y.point(o,a),g=!1)}_=o,p=a,m=s}return x}}var Tf,Cf,kf,Of=function(){var e,t,n,r=0,i=0,o=960,a=500;return n={stream:function(n){return e&&t===n?e:e=Sf(r,i,o,a)(t=n)},extent:function(s){return arguments.length?(r=+s[0][0],i=+s[0][1],o=+s[1][0],a=+s[1][1],e=t=null,n):[[r,i],[o,a]]}}},Lf=tc(),jf={sphere:Cc,point:Cc,lineStart:function(){jf.point=Nf,jf.lineEnd=zf},lineEnd:Cc,polygonStart:Cc,polygonEnd:Cc};function zf(){jf.point=jf.lineEnd=Cc}function Nf(e,t){Tf=e*=hc,Cf=xc(t*=hc),kf=mc(t),jf.point=Pf}function Pf(e,t){e*=hc;var n=xc(t*=hc),r=mc(t),i=dc(e-Tf),o=mc(i),a=r*xc(i),s=kf*n-Cf*r*o,u=Cf*n+kf*r*o;Lf.add(pc(Ec(a*a+s*s),u)),Tf=e,Cf=n,kf=r}var Rf=function(e){return Lf.reset(),Uc(e,jf),+Lf},Df=[null,null],If={type:"LineString",coordinates:Df},Uf=function(e,t){return Df[0]=e,Df[1]=t,Rf(If)},Ff={Feature:function(e,t){return Bf(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,r=-1,i=n.length;++r<i;)if(Bf(n[r].geometry,t))return!0;return!1}},Hf={Sphere:function(){return!0},Point:function(e,t){return Vf(e.coordinates,t)},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)if(Vf(n[r],t))return!0;return!1},LineString:function(e,t){return qf(e.coordinates,t)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)if(qf(n[r],t))return!0;return!1},Polygon:function(e,t){return Yf(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)if(Yf(n[r],t))return!0;return!1},GeometryCollection:function(e,t){for(var n=e.geometries,r=-1,i=n.length;++r<i;)if(Bf(n[r],t))return!0;return!1}};function Bf(e,t){return!(!e||!Hf.hasOwnProperty(e.type))&&Hf[e.type](e,t)}function Vf(e,t){return 0===Uf(e,t)}function qf(e,t){for(var n,r,i,o=0,a=e.length;o<a;o++){if(0===(r=Uf(e[o],t)))return!0;if(o>0&&(i=Uf(e[o],e[o-1]))>0&&n<=i&&r<=i&&(n+r-i)*(1-Math.pow((n-r)/i,2))<ac*i)return!0;n=r}return!1}function Yf(e,t){return!!vf(e.map(Xf),Gf(t))}function Xf(e){return(e=e.map(Gf)).pop(),e}function Gf(e){return[e[0]*hc,e[1]*hc]}var Wf=function(e,t){return(e&&Ff.hasOwnProperty(e.type)?Ff[e.type]:Bf)(e,t)};function Zf(e,t,n){var r=w(e,t-oc,n).concat(t);return function(e){return r.map((function(t){return[e,t]}))}}function $f(e,t,n){var r=w(e,t-oc,n).concat(t);return function(e){return r.map((function(t){return[t,e]}))}}function Kf(){var e,t,n,r,i,o,a,s,u,c,l,f,h=10,d=h,_=90,p=360,m=2.5;function v(){return{type:"MultiLineString",coordinates:g()}}function g(){return w(vc(r/_)*_,n,_).map(l).concat(w(vc(s/p)*p,a,p).map(f)).concat(w(vc(t/h)*h,e,h).filter((function(e){return dc(e%_)>oc})).map(u)).concat(w(vc(o/d)*d,i,d).filter((function(e){return dc(e%p)>oc})).map(c))}return v.lines=function(){return g().map((function(e){return{type:"LineString",coordinates:e}}))},v.outline=function(){return{type:"Polygon",coordinates:[l(r).concat(f(a).slice(1),l(n).reverse().slice(1),f(s).reverse().slice(1))]}},v.extent=function(e){return arguments.length?v.extentMajor(e).extentMinor(e):v.extentMinor()},v.extentMajor=function(e){return arguments.length?(r=+e[0][0],n=+e[1][0],s=+e[0][1],a=+e[1][1],r>n&&(e=r,r=n,n=e),s>a&&(e=s,s=a,a=e),v.precision(m)):[[r,s],[n,a]]},v.extentMinor=function(n){return arguments.length?(t=+n[0][0],e=+n[1][0],o=+n[0][1],i=+n[1][1],t>e&&(n=t,t=e,e=n),o>i&&(n=o,o=i,i=n),v.precision(m)):[[t,o],[e,i]]},v.step=function(e){return arguments.length?v.stepMajor(e).stepMinor(e):v.stepMinor()},v.stepMajor=function(e){return arguments.length?(_=+e[0],p=+e[1],v):[_,p]},v.stepMinor=function(e){return arguments.length?(h=+e[0],d=+e[1],v):[h,d]},v.precision=function(h){return arguments.length?(m=+h,u=Zf(o,i,90),c=$f(t,e,m),l=Zf(s,a,90),f=$f(r,n,m),v):m},v.extentMajor([[-180,-90+oc],[180,90-oc]]).extentMinor([[-180,-80-oc],[180,80+oc]])}function Qf(){return Kf()()}var Jf,eh,th,nh,rh=function(e,t){var n=e[0]*hc,r=e[1]*hc,i=t[0]*hc,o=t[1]*hc,a=mc(r),s=xc(r),u=mc(o),c=xc(o),l=a*mc(n),f=a*xc(n),h=u*mc(i),d=u*xc(i),_=2*Sc(Ec(Tc(o-r)+a*u*Tc(i-n))),p=xc(_),m=_?function(e){var t=xc(e*=_)/p,n=xc(_-e)/p,r=n*l+t*h,i=n*f+t*d,o=n*s+t*c;return[pc(i,r)*fc,pc(o,Ec(r*r+i*i))*fc]}:function(){return[n*fc,r*fc]};return m.distance=_,m},ih=function(e){return e},oh=tc(),ah=tc(),sh={point:Cc,lineStart:Cc,lineEnd:Cc,polygonStart:function(){sh.lineStart=uh,sh.lineEnd=fh},polygonEnd:function(){sh.lineStart=sh.lineEnd=sh.point=Cc,oh.add(dc(ah)),ah.reset()},result:function(){var e=oh/2;return oh.reset(),e}};function uh(){sh.point=ch}function ch(e,t){sh.point=lh,Jf=th=e,eh=nh=t}function lh(e,t){ah.add(nh*e-th*t),th=e,nh=t}function fh(){lh(Jf,eh)}var hh=sh,dh=1/0,_h=dh,ph=-dh,mh=ph;var vh,gh,yh,bh,xh={point:function(e,t){e<dh&&(dh=e);e>ph&&(ph=e);t<_h&&(_h=t);t>mh&&(mh=t)},lineStart:Cc,lineEnd:Cc,polygonStart:Cc,polygonEnd:Cc,result:function(){var e=[[dh,_h],[ph,mh]];return ph=mh=-(_h=dh=1/0),e}},wh=0,Eh=0,Ah=0,Mh=0,Sh=0,Th=0,Ch=0,kh=0,Oh=0,Lh={point:jh,lineStart:zh,lineEnd:Rh,polygonStart:function(){Lh.lineStart=Dh,Lh.lineEnd=Ih},polygonEnd:function(){Lh.point=jh,Lh.lineStart=zh,Lh.lineEnd=Rh},result:function(){var e=Oh?[Ch/Oh,kh/Oh]:Th?[Mh/Th,Sh/Th]:Ah?[wh/Ah,Eh/Ah]:[NaN,NaN];return wh=Eh=Ah=Mh=Sh=Th=Ch=kh=Oh=0,e}};function jh(e,t){wh+=e,Eh+=t,++Ah}function zh(){Lh.point=Nh}function Nh(e,t){Lh.point=Ph,jh(yh=e,bh=t)}function Ph(e,t){var n=e-yh,r=t-bh,i=Ec(n*n+r*r);Mh+=i*(yh+e)/2,Sh+=i*(bh+t)/2,Th+=i,jh(yh=e,bh=t)}function Rh(){Lh.point=jh}function Dh(){Lh.point=Uh}function Ih(){Fh(vh,gh)}function Uh(e,t){Lh.point=Fh,jh(vh=yh=e,gh=bh=t)}function Fh(e,t){var n=e-yh,r=t-bh,i=Ec(n*n+r*r);Mh+=i*(yh+e)/2,Sh+=i*(bh+t)/2,Th+=i,Ch+=(i=bh*e-yh*t)*(yh+e),kh+=i*(bh+t),Oh+=3*i,jh(yh=e,bh=t)}var Hh=Lh;function Bh(e){this._context=e}Bh.prototype={_radius:4.5,pointRadius:function(e){return this._radius=e,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._context.moveTo(e,t),this._point=1;break;case 1:this._context.lineTo(e,t);break;default:this._context.moveTo(e+this._radius,t),this._context.arc(e,t,this._radius,0,lc)}},result:Cc};var Vh,qh,Yh,Xh,Gh,Wh=tc(),Zh={point:Cc,lineStart:function(){Zh.point=$h},lineEnd:function(){Vh&&Kh(qh,Yh),Zh.point=Cc},polygonStart:function(){Vh=!0},polygonEnd:function(){Vh=null},result:function(){var e=+Wh;return Wh.reset(),e}};function $h(e,t){Zh.point=Kh,qh=Xh=e,Yh=Gh=t}function Kh(e,t){Xh-=e,Gh-=t,Wh.add(Ec(Xh*Xh+Gh*Gh)),Xh=e,Gh=t}var Qh=Zh;function Jh(){this._string=[]}function ed(e){return"m0,"+e+"a"+e+","+e+" 0 1,1 0,"+-2*e+"a"+e+","+e+" 0 1,1 0,"+2*e+"z"}Jh.prototype={_radius:4.5,_circle:ed(4.5),pointRadius:function(e){return(e=+e)!==this._radius&&(this._radius=e,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._string.push("M",e,",",t),this._point=1;break;case 1:this._string.push("L",e,",",t);break;default:null==this._circle&&(this._circle=ed(this._radius)),this._string.push("M",e,",",t,this._circle)}},result:function(){if(this._string.length){var e=this._string.join("");return this._string=[],e}return null}};var td=function(e,t){var n,r,i=4.5;function o(e){return e&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),Uc(e,n(r))),r.result()}return o.area=function(e){return Uc(e,n(hh)),hh.result()},o.measure=function(e){return Uc(e,n(Qh)),Qh.result()},o.bounds=function(e){return Uc(e,n(xh)),xh.result()},o.centroid=function(e){return Uc(e,n(Hh)),Hh.result()},o.projection=function(t){return arguments.length?(n=null==t?(e=null,ih):(e=t).stream,o):e},o.context=function(e){return arguments.length?(r=null==e?(t=null,new Jh):new Bh(t=e),"function"!=typeof i&&r.pointRadius(i),o):t},o.pointRadius=function(e){return arguments.length?(i="function"==typeof e?e:(r.pointRadius(+e),+e),o):i},o.projection(e).context(t)},nd=function(e){return{stream:rd(e)}};function rd(e){return function(t){var n=new id;for(var r in e)n[r]=e[r];return n.stream=t,n}}function id(){}function od(e,t,n){var r=e.clipExtent&&e.clipExtent();return e.scale(150).translate([0,0]),null!=r&&e.clipExtent(null),Uc(n,e.stream(xh)),t(xh.result()),null!=r&&e.clipExtent(r),e}function ad(e,t,n){return od(e,(function(n){var r=t[1][0]-t[0][0],i=t[1][1]-t[0][1],o=Math.min(r/(n[1][0]-n[0][0]),i/(n[1][1]-n[0][1])),a=+t[0][0]+(r-o*(n[1][0]+n[0][0]))/2,s=+t[0][1]+(i-o*(n[1][1]+n[0][1]))/2;e.scale(150*o).translate([a,s])}),n)}function sd(e,t,n){return ad(e,[[0,0],t],n)}function ud(e,t,n){return od(e,(function(n){var r=+t,i=r/(n[1][0]-n[0][0]),o=(r-i*(n[1][0]+n[0][0]))/2,a=-i*n[0][1];e.scale(150*i).translate([o,a])}),n)}function cd(e,t,n){return od(e,(function(n){var r=+t,i=r/(n[1][1]-n[0][1]),o=-i*n[0][0],a=(r-i*(n[1][1]+n[0][1]))/2;e.scale(150*i).translate([o,a])}),n)}id.prototype={constructor:id,point:function(e,t){this.stream.point(e,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var ld=16,fd=mc(30*hc),hd=function(e,t){return+t?function(e,t){function n(r,i,o,a,s,u,c,l,f,h,d,_,p,m){var v=c-r,g=l-i,y=v*v+g*g;if(y>4*t&&p--){var b=a+h,x=s+d,w=u+_,E=Ec(b*b+x*x+w*w),A=Sc(w/=E),M=dc(dc(w)-1)<oc||dc(o-f)<oc?(o+f)/2:pc(x,b),S=e(M,A),T=S[0],C=S[1],k=T-r,O=C-i,L=g*k-v*O;(L*L/y>t||dc((v*k+g*O)/y-.5)>.3||a*h+s*d+u*_<fd)&&(n(r,i,o,a,s,u,T,C,M,b/=E,x/=E,w,p,m),m.point(T,C),n(T,C,M,b,x,w,c,l,f,h,d,_,p,m))}}return function(t){var r,i,o,a,s,u,c,l,f,h,d,_,p={point:m,lineStart:v,lineEnd:y,polygonStart:function(){t.polygonStart(),p.lineStart=b},polygonEnd:function(){t.polygonEnd(),p.lineStart=v}};function m(n,r){n=e(n,r),t.point(n[0],n[1])}function v(){l=NaN,p.point=g,t.lineStart()}function g(r,i){var o=Zc([r,i]),a=e(r,i);n(l,f,c,h,d,_,l=a[0],f=a[1],c=r,h=o[0],d=o[1],_=o[2],ld,t),t.point(l,f)}function y(){p.point=m,t.lineEnd()}function b(){v(),p.point=x,p.lineEnd=w}function x(e,t){g(r=e,t),i=l,o=f,a=h,s=d,u=_,p.point=g}function w(){n(l,f,c,h,d,_,i,o,r,a,s,u,ld,t),p.lineEnd=y,y()}return p}}(e,t):function(e){return rd({point:function(t,n){t=e(t,n),this.stream.point(t[0],t[1])}})}(e)};var dd=rd({point:function(e,t){this.stream.point(e*hc,t*hc)}});function _d(e,t,n){function r(r,i){return[t+e*r,n-e*i]}return r.invert=function(r,i){return[(r-t)/e,(n-i)/e]},r}function pd(e,t,n,r){var i=mc(r),o=xc(r),a=i*e,s=o*e,u=i/e,c=o/e,l=(o*n-i*t)/e,f=(o*t+i*n)/e;function h(e,r){return[a*e-s*r+t,n-s*e-a*r]}return h.invert=function(e,t){return[u*e-c*t+l,f-c*e-u*t]},h}function md(e){return vd((function(){return e}))()}function vd(e){var t,n,r,i,o,a,s,u,c,l,f=150,h=480,d=250,_=0,p=0,m=0,v=0,g=0,y=0,b=null,x=xf,w=null,E=ih,A=.5;function M(e){return u(e[0]*hc,e[1]*hc)}function S(e){return(e=u.invert(e[0],e[1]))&&[e[0]*fc,e[1]*fc]}function T(){var e=pd(f,0,0,y).apply(null,t(_,p)),r=(y?pd:_d)(f,h-e[0],d-e[1],y);return n=tf(m,v,g),s=Jl(t,r),u=Jl(n,s),a=hd(s,A),C()}function C(){return c=l=null,M}return M.stream=function(e){return c&&l===e?c:c=dd(function(e){return rd({point:function(t,n){var r=e(t,n);return this.stream.point(r[0],r[1])}})}(n)(x(a(E(l=e)))))},M.preclip=function(e){return arguments.length?(x=e,b=void 0,C()):x},M.postclip=function(e){return arguments.length?(E=e,w=r=i=o=null,C()):E},M.clipAngle=function(e){return arguments.length?(x=+e?wf(b=e*hc):(b=null,xf),C()):b*fc},M.clipExtent=function(e){return arguments.length?(E=null==e?(w=r=i=o=null,ih):Sf(w=+e[0][0],r=+e[0][1],i=+e[1][0],o=+e[1][1]),C()):null==w?null:[[w,r],[i,o]]},M.scale=function(e){return arguments.length?(f=+e,T()):f},M.translate=function(e){return arguments.length?(h=+e[0],d=+e[1],T()):[h,d]},M.center=function(e){return arguments.length?(_=e[0]%360*hc,p=e[1]%360*hc,T()):[_*fc,p*fc]},M.rotate=function(e){return arguments.length?(m=e[0]%360*hc,v=e[1]%360*hc,g=e.length>2?e[2]%360*hc:0,T()):[m*fc,v*fc,g*fc]},M.angle=function(e){return arguments.length?(y=e%360*hc,T()):y*fc},M.precision=function(e){return arguments.length?(a=hd(s,A=e*e),C()):Ec(A)},M.fitExtent=function(e,t){return ad(M,e,t)},M.fitSize=function(e,t){return sd(M,e,t)},M.fitWidth=function(e,t){return ud(M,e,t)},M.fitHeight=function(e,t){return cd(M,e,t)},function(){return t=e.apply(this,arguments),M.invert=t.invert&&S,T()}}function gd(e){var t=0,n=sc/3,r=vd(e),i=r(t,n);return i.parallels=function(e){return arguments.length?r(t=e[0]*hc,n=e[1]*hc):[t*fc,n*fc]},i}function yd(e,t){var n=xc(e),r=(n+xc(t))/2;if(dc(r)<oc)return function(e){var t=mc(e);function n(e,n){return[e*t,xc(n)/t]}return n.invert=function(e,n){return[e/t,Sc(n*t)]},n}(e);var i=1+n*(2*r-n),o=Ec(i)/r;function a(e,t){var n=Ec(i-2*r*xc(t))/r;return[n*xc(e*=r),o-n*mc(e)]}return a.invert=function(e,t){var n=o-t;return[pc(e,dc(n))/r*wc(n),Sc((i-(e*e+n*n)*r*r)/(2*r))]},a}var bd=function(){return gd(yd).scale(155.424).center([0,33.6442])},xd=function(){return bd().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};var wd=function(){var e,t,n,r,i,o,a=xd(),s=bd().rotate([154,0]).center([-2,58.5]).parallels([55,65]),u=bd().rotate([157,0]).center([-3,19.9]).parallels([8,18]),c={point:function(e,t){o=[e,t]}};function l(e){var t=e[0],a=e[1];return o=null,n.point(t,a),o||(r.point(t,a),o)||(i.point(t,a),o)}function f(){return e=t=null,l}return l.invert=function(e){var t=a.scale(),n=a.translate(),r=(e[0]-n[0])/t,i=(e[1]-n[1])/t;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?s:i>=.166&&i<.234&&r>=-.214&&r<-.115?u:a).invert(e)},l.stream=function(n){return e&&t===n?e:(r=[a.stream(t=n),s.stream(n),u.stream(n)],i=r.length,e={point:function(e,t){for(var n=-1;++n<i;)r[n].point(e,t)},sphere:function(){for(var e=-1;++e<i;)r[e].sphere()},lineStart:function(){for(var e=-1;++e<i;)r[e].lineStart()},lineEnd:function(){for(var e=-1;++e<i;)r[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<i;)r[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<i;)r[e].polygonEnd()}});var r,i},l.precision=function(e){return arguments.length?(a.precision(e),s.precision(e),u.precision(e),f()):a.precision()},l.scale=function(e){return arguments.length?(a.scale(e),s.scale(.35*e),u.scale(e),l.translate(a.translate())):a.scale()},l.translate=function(e){if(!arguments.length)return a.translate();var t=a.scale(),o=+e[0],l=+e[1];return n=a.translate(e).clipExtent([[o-.455*t,l-.238*t],[o+.455*t,l+.238*t]]).stream(c),r=s.translate([o-.307*t,l+.201*t]).clipExtent([[o-.425*t+oc,l+.12*t+oc],[o-.214*t-oc,l+.234*t-oc]]).stream(c),i=u.translate([o-.205*t,l+.212*t]).clipExtent([[o-.214*t+oc,l+.166*t+oc],[o-.115*t-oc,l+.234*t-oc]]).stream(c),f()},l.fitExtent=function(e,t){return ad(l,e,t)},l.fitSize=function(e,t){return sd(l,e,t)},l.fitWidth=function(e,t){return ud(l,e,t)},l.fitHeight=function(e,t){return cd(l,e,t)},l.scale(1070)};function Ed(e){return function(t,n){var r=mc(t),i=mc(n),o=e(r*i);return[o*i*xc(t),o*xc(n)]}}function Ad(e){return function(t,n){var r=Ec(t*t+n*n),i=e(r),o=xc(i),a=mc(i);return[pc(t*o,r*a),Sc(r&&n*o/r)]}}var Md=Ed((function(e){return Ec(2/(1+e))}));Md.invert=Ad((function(e){return 2*Sc(e/2)}));var Sd=function(){return md(Md).scale(124.75).clipAngle(179.999)},Td=Ed((function(e){return(e=Mc(e))&&e/xc(e)}));Td.invert=Ad((function(e){return e}));var Cd=function(){return md(Td).scale(79.4188).clipAngle(179.999)};function kd(e,t){return[e,yc(Ac((uc+t)/2))]}kd.invert=function(e,t){return[e,2*_c(gc(t))-uc]};var Od=function(){return Ld(kd).scale(961/lc)};function Ld(e){var t,n,r,i=md(e),o=i.center,a=i.scale,s=i.translate,u=i.clipExtent,c=null;function l(){var o=sc*a(),s=i(af(i.rotate()).invert([0,0]));return u(null==c?[[s[0]-o,s[1]-o],[s[0]+o,s[1]+o]]:e===kd?[[Math.max(s[0]-o,c),t],[Math.min(s[0]+o,n),r]]:[[c,Math.max(s[1]-o,t)],[n,Math.min(s[1]+o,r)]])}return i.scale=function(e){return arguments.length?(a(e),l()):a()},i.translate=function(e){return arguments.length?(s(e),l()):s()},i.center=function(e){return arguments.length?(o(e),l()):o()},i.clipExtent=function(e){return arguments.length?(null==e?c=t=n=r=null:(c=+e[0][0],t=+e[0][1],n=+e[1][0],r=+e[1][1]),l()):null==c?null:[[c,t],[n,r]]},l()}function jd(e){return Ac((uc+e)/2)}function zd(e,t){var n=mc(e),r=e===t?xc(e):yc(n/mc(t))/yc(jd(t)/jd(e)),i=n*bc(jd(e),r)/r;if(!r)return kd;function o(e,t){i>0?t<-uc+oc&&(t=-uc+oc):t>uc-oc&&(t=uc-oc);var n=i/bc(jd(t),r);return[n*xc(r*e),i-n*mc(r*e)]}return o.invert=function(e,t){var n=i-t,o=wc(r)*Ec(e*e+n*n);return[pc(e,dc(n))/r*wc(n),2*_c(bc(i/o,1/r))-uc]},o}var Nd=function(){return gd(zd).scale(109.5).parallels([30,30])};function Pd(e,t){return[e,t]}Pd.invert=Pd;var Rd=function(){return md(Pd).scale(152.63)};function Dd(e,t){var n=mc(e),r=e===t?xc(e):(n-mc(t))/(t-e),i=n/r+e;if(dc(r)<oc)return Pd;function o(e,t){var n=i-t,o=r*e;return[n*xc(o),i-n*mc(o)]}return o.invert=function(e,t){var n=i-t;return[pc(e,dc(n))/r*wc(n),i-wc(r)*Ec(e*e+n*n)]},o}var Id=function(){return gd(Dd).scale(131.154).center([0,13.9389])},Ud=1.340264,Fd=-.081106,Hd=893e-6,Bd=.003796,Vd=Ec(3)/2;function qd(e,t){var n=Sc(Vd*xc(t)),r=n*n,i=r*r*r;return[e*mc(n)/(Vd*(Ud+3*Fd*r+i*(7*Hd+9*Bd*r))),n*(Ud+Fd*r+i*(Hd+Bd*r))]}qd.invert=function(e,t){for(var n,r=t,i=r*r,o=i*i*i,a=0;a<12&&(o=(i=(r-=n=(r*(Ud+Fd*i+o*(Hd+Bd*i))-t)/(Ud+3*Fd*i+o*(7*Hd+9*Bd*i)))*r)*i*i,!(dc(n)<ac));++a);return[Vd*e*(Ud+3*Fd*i+o*(7*Hd+9*Bd*i))/mc(r),Sc(xc(r)/Vd)]};var Yd=function(){return md(qd).scale(177.158)};function Xd(e,t){var n=mc(t),r=mc(e)*n;return[n*xc(e)/r,xc(t)/r]}Xd.invert=Ad(_c);var Gd=function(){return md(Xd).scale(144.049).clipAngle(60)};function Wd(e,t,n,r){return 1===e&&1===t&&0===n&&0===r?ih:rd({point:function(i,o){this.stream.point(i*e+n,o*t+r)}})}var Zd=function(){var e,t,n,r,i,o,a=1,s=0,u=0,c=1,l=1,f=ih,h=null,d=ih;function _(){return r=i=null,o}return o={stream:function(e){return r&&i===e?r:r=f(d(i=e))},postclip:function(r){return arguments.length?(d=r,h=e=t=n=null,_()):d},clipExtent:function(r){return arguments.length?(d=null==r?(h=e=t=n=null,ih):Sf(h=+r[0][0],e=+r[0][1],t=+r[1][0],n=+r[1][1]),_()):null==h?null:[[h,e],[t,n]]},scale:function(e){return arguments.length?(f=Wd((a=+e)*c,a*l,s,u),_()):a},translate:function(e){return arguments.length?(f=Wd(a*c,a*l,s=+e[0],u=+e[1]),_()):[s,u]},reflectX:function(e){return arguments.length?(f=Wd(a*(c=e?-1:1),a*l,s,u),_()):c<0},reflectY:function(e){return arguments.length?(f=Wd(a*c,a*(l=e?-1:1),s,u),_()):l<0},fitExtent:function(e,t){return ad(o,e,t)},fitSize:function(e,t){return sd(o,e,t)},fitWidth:function(e,t){return ud(o,e,t)},fitHeight:function(e,t){return cd(o,e,t)}}};function $d(e,t){var n=t*t,r=n*n;return[e*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),t*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}$d.invert=function(e,t){var n,r=t,i=25;do{var o=r*r,a=o*o;r-=n=(r*(1.007226+o*(.015085+a*(.028874*o-.044475-.005916*a)))-t)/(1.007226+o*(.045255+a*(.259866*o-.311325-.005916*11*a)))}while(dc(n)>oc&&--i>0);return[e/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]};var Kd=function(){return md($d).scale(175.295)};function Qd(e,t){return[mc(t)*xc(e),xc(t)]}Qd.invert=Ad(Sc);var Jd=function(){return md(Qd).scale(249.5).clipAngle(90+oc)};function e_(e,t){var n=mc(t),r=1+mc(e)*n;return[n*xc(e)/r,xc(t)/r]}e_.invert=Ad((function(e){return 2*_c(e)}));var t_=function(){return md(e_).scale(250).clipAngle(142)};function n_(e,t){return[yc(Ac((uc+t)/2)),-e]}n_.invert=function(e,t){return[-t,2*_c(gc(e))-uc]};var r_=function(){var e=Ld(n_),t=e.center,n=e.rotate;return e.center=function(e){return arguments.length?t([-e[1],e[0]]):[(e=t())[1],-e[0]]},e.rotate=function(e){return arguments.length?n([e[0],e[1],e.length>2?e[2]+90:90]):[(e=n())[0],e[1],e[2]-90]},n([0,0,90]).scale(159.155)};function i_(e,t){return e.parent===t.parent?1:2}function o_(e,t){return e+t.x}function a_(e,t){return Math.max(e,t.y)}var s_=function(){var e=i_,t=1,n=1,r=!1;function i(i){var o,a=0;i.eachAfter((function(t){var n=t.children;n?(t.x=function(e){return e.reduce(o_,0)/e.length}(n),t.y=function(e){return 1+e.reduce(a_,0)}(n)):(t.x=o?a+=e(t,o):0,t.y=0,o=t)}));var s=function(e){for(var t;t=e.children;)e=t[0];return e}(i),u=function(e){for(var t;t=e.children;)e=t[t.length-1];return e}(i),c=s.x-e(s,u)/2,l=u.x+e(u,s)/2;return i.eachAfter(r?function(e){e.x=(e.x-i.x)*t,e.y=(i.y-e.y)*n}:function(e){e.x=(e.x-c)/(l-c)*t,e.y=(1-(i.y?e.y/i.y:1))*n})}return i.separation=function(t){return arguments.length?(e=t,i):e},i.size=function(e){return arguments.length?(r=!1,t=+e[0],n=+e[1],i):r?null:[t,n]},i.nodeSize=function(e){return arguments.length?(r=!0,t=+e[0],n=+e[1],i):r?[t,n]:null},i};function u_(e){var t=0,n=e.children,r=n&&n.length;if(r)for(;--r>=0;)t+=n[r].value;else t=1;e.value=t}function c_(e,t){var n,r,i,o,a,s=new d_(e),u=+e.value&&(s.value=e.value),c=[s];for(null==t&&(t=l_);n=c.pop();)if(u&&(n.value=+n.data.value),(i=t(n.data))&&(a=i.length))for(n.children=new Array(a),o=a-1;o>=0;--o)c.push(r=n.children[o]=new d_(i[o])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(h_)}function l_(e){return e.children}function f_(e){e.data=e.data.data}function h_(e){var t=0;do{e.height=t}while((e=e.parent)&&e.height<++t)}function d_(e){this.data=e,this.depth=this.height=0,this.parent=null}d_.prototype=c_.prototype={constructor:d_,count:function(){return this.eachAfter(u_)},each:function(e){var t,n,r,i,o=this,a=[o];do{for(t=a.reverse(),a=[];o=t.pop();)if(e(o),n=o.children)for(r=0,i=n.length;r<i;++r)a.push(n[r])}while(a.length);return this},eachAfter:function(e){for(var t,n,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),t=i.children)for(n=0,r=t.length;n<r;++n)o.push(t[n]);for(;i=a.pop();)e(i);return this},eachBefore:function(e){for(var t,n,r=this,i=[r];r=i.pop();)if(e(r),t=r.children)for(n=t.length-1;n>=0;--n)i.push(t[n]);return this},sum:function(e){return this.eachAfter((function(t){for(var n=+e(t.data)||0,r=t.children,i=r&&r.length;--i>=0;)n+=r[i].value;t.value=n}))},sort:function(e){return this.eachBefore((function(t){t.children&&t.children.sort(e)}))},path:function(e){for(var t=this,n=function(e,t){if(e===t)return e;var n=e.ancestors(),r=t.ancestors(),i=null;e=n.pop(),t=r.pop();for(;e===t;)i=e,e=n.pop(),t=r.pop();return i}(t,e),r=[t];t!==n;)t=t.parent,r.push(t);for(var i=r.length;e!==n;)r.splice(i,0,e),e=e.parent;return r},ancestors:function(){for(var e=this,t=[e];e=e.parent;)t.push(e);return t},descendants:function(){var e=[];return this.each((function(t){e.push(t)})),e},leaves:function(){var e=[];return this.eachBefore((function(t){t.children||e.push(t)})),e},links:function(){var e=this,t=[];return e.each((function(n){n!==e&&t.push({source:n.parent,target:n})})),t},copy:function(){return c_(this).eachBefore(f_)}};var __=Array.prototype.slice;var p_=function(e){for(var t,n,r=0,i=(e=function(e){for(var t,n,r=e.length;r;)n=Math.random()*r--|0,t=e[r],e[r]=e[n],e[n]=t;return e}(__.call(e))).length,o=[];r<i;)t=e[r],n&&g_(n,t)?++r:(n=b_(o=m_(o,t)),r=0);return n};function m_(e,t){var n,r;if(y_(t,e))return[t];for(n=0;n<e.length;++n)if(v_(t,e[n])&&y_(x_(e[n],t),e))return[e[n],t];for(n=0;n<e.length-1;++n)for(r=n+1;r<e.length;++r)if(v_(x_(e[n],e[r]),t)&&v_(x_(e[n],t),e[r])&&v_(x_(e[r],t),e[n])&&y_(w_(e[n],e[r],t),e))return[e[n],e[r],t];throw new Error}function v_(e,t){var n=e.r-t.r,r=t.x-e.x,i=t.y-e.y;return n<0||n*n<r*r+i*i}function g_(e,t){var n=e.r-t.r+1e-6,r=t.x-e.x,i=t.y-e.y;return n>0&&n*n>r*r+i*i}function y_(e,t){for(var n=0;n<t.length;++n)if(!g_(e,t[n]))return!1;return!0}function b_(e){switch(e.length){case 1:return{x:(t=e[0]).x,y:t.y,r:t.r};case 2:return x_(e[0],e[1]);case 3:return w_(e[0],e[1],e[2])}var t}function x_(e,t){var n=e.x,r=e.y,i=e.r,o=t.x,a=t.y,s=t.r,u=o-n,c=a-r,l=s-i,f=Math.sqrt(u*u+c*c);return{x:(n+o+u/f*l)/2,y:(r+a+c/f*l)/2,r:(f+i+s)/2}}function w_(e,t,n){var r=e.x,i=e.y,o=e.r,a=t.x,s=t.y,u=t.r,c=n.x,l=n.y,f=n.r,h=r-a,d=r-c,_=i-s,p=i-l,m=u-o,v=f-o,g=r*r+i*i-o*o,y=g-a*a-s*s+u*u,b=g-c*c-l*l+f*f,x=d*_-h*p,w=(_*b-p*y)/(2*x)-r,E=(p*m-_*v)/x,A=(d*y-h*b)/(2*x)-i,M=(h*v-d*m)/x,S=E*E+M*M-1,T=2*(o+w*E+A*M),C=w*w+A*A-o*o,k=-(S?(T+Math.sqrt(T*T-4*S*C))/(2*S):C/T);return{x:r+w+E*k,y:i+A+M*k,r:k}}function E_(e,t,n){var r,i,o,a,s=e.x-t.x,u=e.y-t.y,c=s*s+u*u;c?(i=t.r+n.r,i*=i,a=e.r+n.r,i>(a*=a)?(r=(c+a-i)/(2*c),o=Math.sqrt(Math.max(0,a/c-r*r)),n.x=e.x-r*s-o*u,n.y=e.y-r*u+o*s):(r=(c+i-a)/(2*c),o=Math.sqrt(Math.max(0,i/c-r*r)),n.x=t.x+r*s-o*u,n.y=t.y+r*u+o*s)):(n.x=t.x+n.r,n.y=t.y)}function A_(e,t){var n=e.r+t.r-1e-6,r=t.x-e.x,i=t.y-e.y;return n>0&&n*n>r*r+i*i}function M_(e){var t=e._,n=e.next._,r=t.r+n.r,i=(t.x*n.r+n.x*t.r)/r,o=(t.y*n.r+n.y*t.r)/r;return i*i+o*o}function S_(e){this._=e,this.next=null,this.previous=null}function T_(e){if(!(i=e.length))return 0;var t,n,r,i,o,a,s,u,c,l,f;if((t=e[0]).x=0,t.y=0,!(i>1))return t.r;if(n=e[1],t.x=-n.r,n.x=t.r,n.y=0,!(i>2))return t.r+n.r;E_(n,t,r=e[2]),t=new S_(t),n=new S_(n),r=new S_(r),t.next=r.previous=n,n.next=t.previous=r,r.next=n.previous=t;e:for(s=3;s<i;++s){E_(t._,n._,r=e[s]),r=new S_(r),u=n.next,c=t.previous,l=n._.r,f=t._.r;do{if(l<=f){if(A_(u._,r._)){n=u,t.next=n,n.previous=t,--s;continue e}l+=u._.r,u=u.next}else{if(A_(c._,r._)){(t=c).next=n,n.previous=t,--s;continue e}f+=c._.r,c=c.previous}}while(u!==c.next);for(r.previous=t,r.next=n,t.next=n.previous=n=r,o=M_(t);(r=r.next)!==n;)(a=M_(r))<o&&(t=r,o=a);n=t.next}for(t=[n._],r=n;(r=r.next)!==n;)t.push(r._);for(r=p_(t),s=0;s<i;++s)(t=e[s]).x-=r.x,t.y-=r.y;return r.r}var C_=function(e){return T_(e),e};function k_(e){return null==e?null:O_(e)}function O_(e){if("function"!=typeof e)throw new Error;return e}function L_(){return 0}var j_=function(e){return function(){return e}};function z_(e){return Math.sqrt(e.value)}var N_=function(){var e=null,t=1,n=1,r=L_;function i(i){return i.x=t/2,i.y=n/2,e?i.eachBefore(P_(e)).eachAfter(R_(r,.5)).eachBefore(D_(1)):i.eachBefore(P_(z_)).eachAfter(R_(L_,1)).eachAfter(R_(r,i.r/Math.min(t,n))).eachBefore(D_(Math.min(t,n)/(2*i.r))),i}return i.radius=function(t){return arguments.length?(e=k_(t),i):e},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(e){return arguments.length?(r="function"==typeof e?e:j_(+e),i):r},i};function P_(e){return function(t){t.children||(t.r=Math.max(0,+e(t)||0))}}function R_(e,t){return function(n){if(r=n.children){var r,i,o,a=r.length,s=e(n)*t||0;if(s)for(i=0;i<a;++i)r[i].r+=s;if(o=T_(r),s)for(i=0;i<a;++i)r[i].r-=s;n.r=o+s}}}function D_(e){return function(t){var n=t.parent;t.r*=e,n&&(t.x=n.x+e*t.x,t.y=n.y+e*t.y)}}var I_=function(e){e.x0=Math.round(e.x0),e.y0=Math.round(e.y0),e.x1=Math.round(e.x1),e.y1=Math.round(e.y1)},U_=function(e,t,n,r,i){for(var o,a=e.children,s=-1,u=a.length,c=e.value&&(r-t)/e.value;++s<u;)(o=a[s]).y0=n,o.y1=i,o.x0=t,o.x1=t+=o.value*c},F_=function(){var e=1,t=1,n=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=n,i.x1=e,i.y1=t/o,i.eachBefore(function(e,t){return function(r){r.children&&U_(r,r.x0,e*(r.depth+1)/t,r.x1,e*(r.depth+2)/t);var i=r.x0,o=r.y0,a=r.x1-n,s=r.y1-n;a<i&&(i=a=(i+a)/2),s<o&&(o=s=(o+s)/2),r.x0=i,r.y0=o,r.x1=a,r.y1=s}}(t,o)),r&&i.eachBefore(I_),i}return i.round=function(e){return arguments.length?(r=!!e,i):r},i.size=function(n){return arguments.length?(e=+n[0],t=+n[1],i):[e,t]},i.padding=function(e){return arguments.length?(n=+e,i):n},i},H_="$",B_={depth:-1},V_={};function q_(e){return e.id}function Y_(e){return e.parentId}var X_=function(){var e=q_,t=Y_;function n(n){var r,i,o,a,s,u,c,l=n.length,f=new Array(l),h={};for(i=0;i<l;++i)r=n[i],s=f[i]=new d_(r),null!=(u=e(r,i,n))&&(u+="")&&(h[c=H_+(s.id=u)]=c in h?V_:s);for(i=0;i<l;++i)if(s=f[i],null!=(u=t(n[i],i,n))&&(u+="")){if(!(a=h[H_+u]))throw new Error("missing: "+u);if(a===V_)throw new Error("ambiguous: "+u);a.children?a.children.push(s):a.children=[s],s.parent=a}else{if(o)throw new Error("multiple roots");o=s}if(!o)throw new Error("no root");if(o.parent=B_,o.eachBefore((function(e){e.depth=e.parent.depth+1,--l})).eachBefore(h_),o.parent=null,l>0)throw new Error("cycle");return o}return n.id=function(t){return arguments.length?(e=O_(t),n):e},n.parentId=function(e){return arguments.length?(t=O_(e),n):t},n};function G_(e,t){return e.parent===t.parent?1:2}function W_(e){var t=e.children;return t?t[0]:e.t}function Z_(e){var t=e.children;return t?t[t.length-1]:e.t}function $_(e,t,n){var r=n/(t.i-e.i);t.c-=r,t.s+=n,e.c+=r,t.z+=n,t.m+=n}function K_(e,t,n){return e.a.parent===t.parent?e.a:n}function Q_(e,t){this._=e,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=t}Q_.prototype=Object.create(d_.prototype);var J_=function(){var e=G_,t=1,n=1,r=null;function i(i){var u=function(e){for(var t,n,r,i,o,a=new Q_(e,0),s=[a];t=s.pop();)if(r=t._.children)for(t.children=new Array(o=r.length),i=o-1;i>=0;--i)s.push(n=t.children[i]=new Q_(r[i],i)),n.parent=t;return(a.parent=new Q_(null,0)).children=[a],a}(i);if(u.eachAfter(o),u.parent.m=-u.z,u.eachBefore(a),r)i.eachBefore(s);else{var c=i,l=i,f=i;i.eachBefore((function(e){e.x<c.x&&(c=e),e.x>l.x&&(l=e),e.depth>f.depth&&(f=e)}));var h=c===l?1:e(c,l)/2,d=h-c.x,_=t/(l.x+h+d),p=n/(f.depth||1);i.eachBefore((function(e){e.x=(e.x+d)*_,e.y=e.depth*p}))}return i}function o(t){var n=t.children,r=t.parent.children,i=t.i?r[t.i-1]:null;if(n){!function(e){for(var t,n=0,r=0,i=e.children,o=i.length;--o>=0;)(t=i[o]).z+=n,t.m+=n,n+=t.s+(r+=t.c)}(t);var o=(n[0].z+n[n.length-1].z)/2;i?(t.z=i.z+e(t._,i._),t.m=t.z-o):t.z=o}else i&&(t.z=i.z+e(t._,i._));t.parent.A=function(t,n,r){if(n){for(var i,o=t,a=t,s=n,u=o.parent.children[0],c=o.m,l=a.m,f=s.m,h=u.m;s=Z_(s),o=W_(o),s&&o;)u=W_(u),(a=Z_(a)).a=t,(i=s.z+f-o.z-c+e(s._,o._))>0&&($_(K_(s,t,r),t,i),c+=i,l+=i),f+=s.m,c+=o.m,h+=u.m,l+=a.m;s&&!Z_(a)&&(a.t=s,a.m+=f-l),o&&!W_(u)&&(u.t=o,u.m+=c-h,r=t)}return r}(t,i,t.parent.A||r[0])}function a(e){e._.x=e.z+e.parent.m,e.m+=e.parent.m}function s(e){e.x*=t,e.y=e.depth*n}return i.separation=function(t){return arguments.length?(e=t,i):e},i.size=function(e){return arguments.length?(r=!1,t=+e[0],n=+e[1],i):r?null:[t,n]},i.nodeSize=function(e){return arguments.length?(r=!0,t=+e[0],n=+e[1],i):r?[t,n]:null},i},ep=function(e,t,n,r,i){for(var o,a=e.children,s=-1,u=a.length,c=e.value&&(i-n)/e.value;++s<u;)(o=a[s]).x0=t,o.x1=r,o.y0=n,o.y1=n+=o.value*c},tp=(1+Math.sqrt(5))/2;function np(e,t,n,r,i,o){for(var a,s,u,c,l,f,h,d,_,p,m,v=[],g=t.children,y=0,b=0,x=g.length,w=t.value;y<x;){u=i-n,c=o-r;do{l=g[b++].value}while(!l&&b<x);for(f=h=l,m=l*l*(p=Math.max(c/u,u/c)/(w*e)),_=Math.max(h/m,m/f);b<x;++b){if(l+=s=g[b].value,s<f&&(f=s),s>h&&(h=s),m=l*l*p,(d=Math.max(h/m,m/f))>_){l-=s;break}_=d}v.push(a={value:l,dice:u<c,children:g.slice(y,b)}),a.dice?U_(a,n,r,i,w?r+=c*l/w:o):ep(a,n,r,w?n+=u*l/w:i,o),w-=l,y=b}return v}var rp=function e(t){function n(e,n,r,i,o){np(t,e,n,r,i,o)}return n.ratio=function(t){return e((t=+t)>1?t:1)},n}(tp),ip=function(){var e=rp,t=!1,n=1,r=1,i=[0],o=L_,a=L_,s=L_,u=L_,c=L_;function l(e){return e.x0=e.y0=0,e.x1=n,e.y1=r,e.eachBefore(f),i=[0],t&&e.eachBefore(I_),e}function f(t){var n=i[t.depth],r=t.x0+n,l=t.y0+n,f=t.x1-n,h=t.y1-n;f<r&&(r=f=(r+f)/2),h<l&&(l=h=(l+h)/2),t.x0=r,t.y0=l,t.x1=f,t.y1=h,t.children&&(n=i[t.depth+1]=o(t)/2,r+=c(t)-n,l+=a(t)-n,(f-=s(t)-n)<r&&(r=f=(r+f)/2),(h-=u(t)-n)<l&&(l=h=(l+h)/2),e(t,r,l,f,h))}return l.round=function(e){return arguments.length?(t=!!e,l):t},l.size=function(e){return arguments.length?(n=+e[0],r=+e[1],l):[n,r]},l.tile=function(t){return arguments.length?(e=O_(t),l):e},l.padding=function(e){return arguments.length?l.paddingInner(e).paddingOuter(e):l.paddingInner()},l.paddingInner=function(e){return arguments.length?(o="function"==typeof e?e:j_(+e),l):o},l.paddingOuter=function(e){return arguments.length?l.paddingTop(e).paddingRight(e).paddingBottom(e).paddingLeft(e):l.paddingTop()},l.paddingTop=function(e){return arguments.length?(a="function"==typeof e?e:j_(+e),l):a},l.paddingRight=function(e){return arguments.length?(s="function"==typeof e?e:j_(+e),l):s},l.paddingBottom=function(e){return arguments.length?(u="function"==typeof e?e:j_(+e),l):u},l.paddingLeft=function(e){return arguments.length?(c="function"==typeof e?e:j_(+e),l):c},l},op=function(e,t,n,r,i){var o,a,s=e.children,u=s.length,c=new Array(u+1);for(c[0]=a=o=0;o<u;++o)c[o+1]=a+=s[o].value;!function e(t,n,r,i,o,a,u){if(t>=n-1){var l=s[t];return l.x0=i,l.y0=o,l.x1=a,void(l.y1=u)}var f=c[t],h=r/2+f,d=t+1,_=n-1;for(;d<_;){var p=d+_>>>1;c[p]<h?d=p+1:_=p}h-c[d-1]<c[d]-h&&t+1<d&&--d;var m=c[d]-f,v=r-m;if(a-i>u-o){var g=(i*v+a*m)/r;e(t,d,m,i,o,g,u),e(d,n,v,g,o,a,u)}else{var y=(o*v+u*m)/r;e(t,d,m,i,o,a,y),e(d,n,v,i,y,a,u)}}(0,u,e.value,t,n,r,i)},ap=function(e,t,n,r,i){(1&e.depth?ep:U_)(e,t,n,r,i)},sp=function e(t){function n(e,n,r,i,o){if((a=e._squarify)&&a.ratio===t)for(var a,s,u,c,l,f=-1,h=a.length,d=e.value;++f<h;){for(u=(s=a[f]).children,c=s.value=0,l=u.length;c<l;++c)s.value+=u[c].value;s.dice?U_(s,n,r,i,r+=(o-r)*s.value/d):ep(s,n,r,n+=(i-n)*s.value/d,o),d-=s.value}else e._squarify=a=np(t,e,n,r,i,o),a.ratio=t}return n.ratio=function(t){return e((t=+t)>1?t:1)},n}(tp),up=function(e){for(var t,n=-1,r=e.length,i=e[r-1],o=0;++n<r;)t=i,i=e[n],o+=t[1]*i[0]-t[0]*i[1];return o/2},cp=function(e){for(var t,n,r=-1,i=e.length,o=0,a=0,s=e[i-1],u=0;++r<i;)t=s,s=e[r],u+=n=t[0]*s[1]-s[0]*t[1],o+=(t[0]+s[0])*n,a+=(t[1]+s[1])*n;return[o/(u*=3),a/u]},lp=function(e,t,n){return(t[0]-e[0])*(n[1]-e[1])-(t[1]-e[1])*(n[0]-e[0])};function fp(e,t){return e[0]-t[0]||e[1]-t[1]}function hp(e){for(var t=e.length,n=[0,1],r=2,i=2;i<t;++i){for(;r>1&&lp(e[n[r-2]],e[n[r-1]],e[i])<=0;)--r;n[r++]=i}return n.slice(0,r)}var dp=function(e){if((n=e.length)<3)return null;var t,n,r=new Array(n),i=new Array(n);for(t=0;t<n;++t)r[t]=[+e[t][0],+e[t][1],t];for(r.sort(fp),t=0;t<n;++t)i[t]=[r[t][0],-r[t][1]];var o=hp(r),a=hp(i),s=a[0]===o[0],u=a[a.length-1]===o[o.length-1],c=[];for(t=o.length-1;t>=0;--t)c.push(e[r[o[t]][2]]);for(t=+s;t<a.length-u;++t)c.push(e[r[a[t]][2]]);return c},_p=function(e,t){for(var n,r,i=e.length,o=e[i-1],a=t[0],s=t[1],u=o[0],c=o[1],l=!1,f=0;f<i;++f)n=(o=e[f])[0],(r=o[1])>s!=c>s&&a<(u-n)*(s-r)/(c-r)+n&&(l=!l),u=n,c=r;return l},pp=function(e){for(var t,n,r=-1,i=e.length,o=e[i-1],a=o[0],s=o[1],u=0;++r<i;)t=a,n=s,t-=a=(o=e[r])[0],n-=s=o[1],u+=Math.sqrt(t*t+n*n);return u},mp=function(){return Math.random()},vp=function e(t){function n(e,n){return e=null==e?0:+e,n=null==n?1:+n,1===arguments.length?(n=e,e=0):n-=e,function(){return t()*n+e}}return n.source=e,n}(mp),gp=function e(t){function n(e,n){var r,i;return e=null==e?0:+e,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*t()-1,o=2*t()-1,i=r*r+o*o}while(!i||i>1);return e+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=e,n}(mp),yp=function e(t){function n(){var e=gp.source(t).apply(this,arguments);return function(){return Math.exp(e())}}return n.source=e,n}(mp),bp=function e(t){function n(e){return function(){for(var n=0,r=0;r<e;++r)n+=t();return n}}return n.source=e,n}(mp),xp=function e(t){function n(e){var n=bp.source(t)(e);return function(){return n()/e}}return n.source=e,n}(mp),wp=function e(t){function n(e){return function(){return-Math.log(1-t())/e}}return n.source=e,n}(mp);function Ep(e,t){switch(arguments.length){case 0:break;case 1:this.range(e);break;default:this.range(t).domain(e)}return this}function Ap(e,t){switch(arguments.length){case 0:break;case 1:this.interpolator(e);break;default:this.interpolator(t).domain(e)}return this}var Mp=Array.prototype,Sp=Mp.map,Tp=Mp.slice,Cp={name:"implicit"};function kp(){var e=Wa(),t=[],n=[],r=Cp;function i(i){var o=i+"",a=e.get(o);if(!a){if(r!==Cp)return r;e.set(o,a=t.push(i))}return n[(a-1)%n.length]}return i.domain=function(n){if(!arguments.length)return t.slice();t=[],e=Wa();for(var r,o,a=-1,s=n.length;++a<s;)e.has(o=(r=n[a])+"")||e.set(o,t.push(r));return i},i.range=function(e){return arguments.length?(n=Tp.call(e),i):n.slice()},i.unknown=function(e){return arguments.length?(r=e,i):r},i.copy=function(){return kp(t,n).unknown(r)},Ep.apply(i,arguments),i}function Op(){var e,t,n=kp().unknown(void 0),r=n.domain,i=n.range,o=[0,1],a=!1,s=0,u=0,c=.5;function l(){var n=r().length,l=o[1]<o[0],f=o[l-0],h=o[1-l];e=(h-f)/Math.max(1,n-s+2*u),a&&(e=Math.floor(e)),f+=(h-f-e*(n-s))*c,t=e*(1-s),a&&(f=Math.round(f),t=Math.round(t));var d=w(n).map((function(t){return f+e*t}));return i(l?d.reverse():d)}return delete n.unknown,n.domain=function(e){return arguments.length?(r(e),l()):r()},n.range=function(e){return arguments.length?(o=[+e[0],+e[1]],l()):o.slice()},n.rangeRound=function(e){return o=[+e[0],+e[1]],a=!0,l()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(a=!!e,l()):a},n.padding=function(e){return arguments.length?(s=Math.min(1,u=+e),l()):s},n.paddingInner=function(e){return arguments.length?(s=Math.min(1,e),l()):s},n.paddingOuter=function(e){return arguments.length?(u=+e,l()):u},n.align=function(e){return arguments.length?(c=Math.max(0,Math.min(1,e)),l()):c},n.copy=function(){return Op(r(),o).round(a).paddingInner(s).paddingOuter(u).align(c)},Ep.apply(l(),arguments)}function Lp(){return function e(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return e(n())},t}(Op.apply(null,arguments).paddingInner(1))}var jp=function(e){return function(){return e}},zp=function(e){return+e},Np=[0,1];function Pp(e){return e}function Rp(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:jp(isNaN(t)?NaN:.5)}function Dp(e){var t,n=e[0],r=e[e.length-1];return n>r&&(t=n,n=r,r=t),function(e){return Math.max(n,Math.min(r,e))}}function Ip(e,t,n){var r=e[0],i=e[1],o=t[0],a=t[1];return i<r?(r=Rp(i,r),o=n(a,o)):(r=Rp(r,i),o=n(o,a)),function(e){return o(r(e))}}function Up(e,t,n){var r=Math.min(e.length,t.length)-1,i=new Array(r),o=new Array(r),a=-1;for(e[r]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++a<r;)i[a]=Rp(e[a],e[a+1]),o[a]=n(t[a],t[a+1]);return function(t){var n=u(e,t,1,r)-1;return o[n](i[n](t))}}function Fp(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown())}function Hp(){var e,t,n,r,i,o,a=Np,s=Np,u=$n,c=Pp;function l(){return r=Math.min(a.length,s.length)>2?Up:Ip,i=o=null,f}function f(t){return isNaN(t=+t)?n:(i||(i=r(a.map(e),s,u)))(e(c(t)))}return f.invert=function(n){return c(t((o||(o=r(s,a.map(e),Hn)))(n)))},f.domain=function(e){return arguments.length?(a=Sp.call(e,zp),c===Pp||(c=Dp(a)),l()):a.slice()},f.range=function(e){return arguments.length?(s=Tp.call(e),l()):s.slice()},f.rangeRound=function(e){return s=Tp.call(e),u=Jn,l()},f.clamp=function(e){return arguments.length?(c=e?Dp(a):Pp,f):c!==Pp},f.interpolate=function(e){return arguments.length?(u=e,l()):u},f.unknown=function(e){return arguments.length?(n=e,f):n},function(n,r){return e=n,t=r,l()}}function Bp(e,t){return Hp()(e,t)}var Vp=function(e,t,n,r){var i,o=C(e,t,n);switch((r=Iu(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(e),Math.abs(t));return null!=r.precision||isNaN(i=Ju(o,a))||(r.precision=i),Vu(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=ec(o,Math.max(Math.abs(e),Math.abs(t))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=Qu(o))||(r.precision=i-2*("%"===r.type))}return Bu(r)};function qp(e){var t=e.domain;return e.ticks=function(e){var n=t();return S(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){var r=t();return Vp(r[0],r[r.length-1],null==e?10:e,n)},e.nice=function(n){null==n&&(n=10);var r,i=t(),o=0,a=i.length-1,s=i[o],u=i[a];return u<s&&(r=s,s=u,u=r,r=o,o=a,a=r),(r=T(s,u,n))>0?r=T(s=Math.floor(s/r)*r,u=Math.ceil(u/r)*r,n):r<0&&(r=T(s=Math.ceil(s*r)/r,u=Math.floor(u*r)/r,n)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(u/r)*r,t(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(u*r)/r,t(i)),e},e}function Yp(){var e=Bp(Pp,Pp);return e.copy=function(){return Fp(e,Yp())},Ep.apply(e,arguments),qp(e)}function Xp(e){var t;function n(e){return isNaN(e=+e)?t:e}return n.invert=n,n.domain=n.range=function(t){return arguments.length?(e=Sp.call(t,zp),n):e.slice()},n.unknown=function(e){return arguments.length?(t=e,n):t},n.copy=function(){return Xp(e).unknown(t)},e=arguments.length?Sp.call(e,zp):[0,1],qp(n)}var Gp=function(e,t){var n,r=0,i=(e=e.slice()).length-1,o=e[r],a=e[i];return a<o&&(n=r,r=i,i=n,n=o,o=a,a=n),e[r]=t.floor(o),e[i]=t.ceil(a),e};function Wp(e){return Math.log(e)}function Zp(e){return Math.exp(e)}function $p(e){return-Math.log(-e)}function Kp(e){return-Math.exp(-e)}function Qp(e){return isFinite(e)?+("1e"+e):e<0?0:e}function Jp(e){return function(t){return-e(-t)}}function em(e){var t,n,r=e(Wp,Zp),i=r.domain,o=10;function a(){return t=function(e){return e===Math.E?Math.log:10===e&&Math.log10||2===e&&Math.log2||(e=Math.log(e),function(t){return Math.log(t)/e})}(o),n=function(e){return 10===e?Qp:e===Math.E?Math.exp:function(t){return Math.pow(e,t)}}(o),i()[0]<0?(t=Jp(t),n=Jp(n),e($p,Kp)):e(Wp,Zp),r}return r.base=function(e){return arguments.length?(o=+e,a()):o},r.domain=function(e){return arguments.length?(i(e),a()):i()},r.ticks=function(e){var r,a=i(),s=a[0],u=a[a.length-1];(r=u<s)&&(h=s,s=u,u=h);var c,l,f,h=t(s),d=t(u),_=null==e?10:+e,p=[];if(!(o%1)&&d-h<_){if(h=Math.round(h)-1,d=Math.round(d)+1,s>0){for(;h<d;++h)for(l=1,c=n(h);l<o;++l)if(!((f=c*l)<s)){if(f>u)break;p.push(f)}}else for(;h<d;++h)for(l=o-1,c=n(h);l>=1;--l)if(!((f=c*l)<s)){if(f>u)break;p.push(f)}}else p=S(h,d,Math.min(d-h,_)).map(n);return r?p.reverse():p},r.tickFormat=function(e,i){if(null==i&&(i=10===o?".0e":","),"function"!=typeof i&&(i=Bu(i)),e===1/0)return i;null==e&&(e=10);var a=Math.max(1,o*e/r.ticks().length);return function(e){var r=e/n(Math.round(t(e)));return r*o<o-.5&&(r*=o),r<=a?i(e):""}},r.nice=function(){return i(Gp(i(),{floor:function(e){return n(Math.floor(t(e)))},ceil:function(e){return n(Math.ceil(t(e)))}}))},r}function tm(){var e=em(Hp()).domain([1,10]);return e.copy=function(){return Fp(e,tm()).base(e.base())},Ep.apply(e,arguments),e}function nm(e){return function(t){return Math.sign(t)*Math.log1p(Math.abs(t/e))}}function rm(e){return function(t){return Math.sign(t)*Math.expm1(Math.abs(t))*e}}function im(e){var t=1,n=e(nm(t),rm(t));return n.constant=function(n){return arguments.length?e(nm(t=+n),rm(t)):t},qp(n)}function om(){var e=im(Hp());return e.copy=function(){return Fp(e,om()).constant(e.constant())},Ep.apply(e,arguments)}function am(e){return function(t){return t<0?-Math.pow(-t,e):Math.pow(t,e)}}function sm(e){return e<0?-Math.sqrt(-e):Math.sqrt(e)}function um(e){return e<0?-e*e:e*e}function cm(e){var t=e(Pp,Pp),n=1;function r(){return 1===n?e(Pp,Pp):.5===n?e(sm,um):e(am(n),am(1/n))}return t.exponent=function(e){return arguments.length?(n=+e,r()):n},qp(t)}function lm(){var e=cm(Hp());return e.copy=function(){return Fp(e,lm()).exponent(e.exponent())},Ep.apply(e,arguments),e}function fm(){return lm.apply(null,arguments).exponent(.5)}function hm(){var e,t=[],n=[],i=[];function o(){var e=0,r=Math.max(1,n.length);for(i=new Array(r-1);++e<r;)i[e-1]=L(t,e/r);return a}function a(t){return isNaN(t=+t)?e:n[u(i,t)]}return a.invertExtent=function(e){var r=n.indexOf(e);return r<0?[NaN,NaN]:[r>0?i[r-1]:t[0],r<i.length?i[r]:t[t.length-1]]},a.domain=function(e){if(!arguments.length)return t.slice();t=[];for(var n,i=0,a=e.length;i<a;++i)null==(n=e[i])||isNaN(n=+n)||t.push(n);return t.sort(r),o()},a.range=function(e){return arguments.length?(n=Tp.call(e),o()):n.slice()},a.unknown=function(t){return arguments.length?(e=t,a):e},a.quantiles=function(){return i.slice()},a.copy=function(){return hm().domain(t).range(n).unknown(e)},Ep.apply(a,arguments)}function dm(){var e,t=0,n=1,r=1,i=[.5],o=[0,1];function a(t){return t<=t?o[u(i,t,0,r)]:e}function s(){var e=-1;for(i=new Array(r);++e<r;)i[e]=((e+1)*n-(e-r)*t)/(r+1);return a}return a.domain=function(e){return arguments.length?(t=+e[0],n=+e[1],s()):[t,n]},a.range=function(e){return arguments.length?(r=(o=Tp.call(e)).length-1,s()):o.slice()},a.invertExtent=function(e){var a=o.indexOf(e);return a<0?[NaN,NaN]:a<1?[t,i[0]]:a>=r?[i[r-1],n]:[i[a-1],i[a]]},a.unknown=function(t){return arguments.length?(e=t,a):a},a.thresholds=function(){return i.slice()},a.copy=function(){return dm().domain([t,n]).range(o).unknown(e)},Ep.apply(qp(a),arguments)}function _m(){var e,t=[.5],n=[0,1],r=1;function i(i){return i<=i?n[u(t,i,0,r)]:e}return i.domain=function(e){return arguments.length?(t=Tp.call(e),r=Math.min(t.length,n.length-1),i):t.slice()},i.range=function(e){return arguments.length?(n=Tp.call(e),r=Math.min(t.length,n.length-1),i):n.slice()},i.invertExtent=function(e){var r=n.indexOf(e);return[t[r-1],t[r]]},i.unknown=function(t){return arguments.length?(e=t,i):e},i.copy=function(){return _m().domain(t).range(n).unknown(e)},Ep.apply(i,arguments)}var pm=new Date,mm=new Date;function vm(e,t,n,r){function i(t){return e(t=0===arguments.length?new Date:new Date(+t)),t}return i.floor=function(t){return e(t=new Date(+t)),t},i.ceil=function(n){return e(n=new Date(n-1)),t(n,1),e(n),n},i.round=function(e){var t=i(e),n=i.ceil(e);return e-t<n-e?t:n},i.offset=function(e,n){return t(e=new Date(+e),null==n?1:Math.floor(n)),e},i.range=function(n,r,o){var a,s=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return s;do{s.push(a=new Date(+n)),t(n,o),e(n)}while(a<n&&n<r);return s},i.filter=function(n){return vm((function(t){if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)}),(function(e,r){if(e>=e)if(r<0)for(;++r<=0;)for(;t(e,-1),!n(e););else for(;--r>=0;)for(;t(e,1),!n(e););}))},n&&(i.count=function(t,r){return pm.setTime(+t),mm.setTime(+r),e(pm),e(mm),Math.floor(n(pm,mm))},i.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?i.filter(r?function(t){return r(t)%e==0}:function(t){return i.count(0,t)%e==0}):i:null}),i}var gm=vm((function(e){e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,t){e.setFullYear(e.getFullYear()+t)}),(function(e,t){return t.getFullYear()-e.getFullYear()}),(function(e){return e.getFullYear()}));gm.every=function(e){return isFinite(e=Math.floor(e))&&e>0?vm((function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n*e)})):null};var ym=gm,bm=gm.range,xm=vm((function(e){e.setDate(1),e.setHours(0,0,0,0)}),(function(e,t){e.setMonth(e.getMonth()+t)}),(function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())}),(function(e){return e.getMonth()})),wm=xm,Em=xm.range,Am=6e4,Mm=6048e5;function Sm(e){return vm((function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+7*t)}),(function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*Am)/Mm}))}var Tm=Sm(0),Cm=Sm(1),km=Sm(2),Om=Sm(3),Lm=Sm(4),jm=Sm(5),zm=Sm(6),Nm=Tm.range,Pm=Cm.range,Rm=km.range,Dm=Om.range,Im=Lm.range,Um=jm.range,Fm=zm.range,Hm=vm((function(e){e.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+t)}),(function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*Am)/864e5}),(function(e){return e.getDate()-1})),Bm=Hm,Vm=Hm.range,qm=vm((function(e){e.setTime(e-e.getMilliseconds()-1e3*e.getSeconds()-e.getMinutes()*Am)}),(function(e,t){e.setTime(+e+36e5*t)}),(function(e,t){return(t-e)/36e5}),(function(e){return e.getHours()})),Ym=qm,Xm=qm.range,Gm=vm((function(e){e.setTime(e-e.getMilliseconds()-1e3*e.getSeconds())}),(function(e,t){e.setTime(+e+t*Am)}),(function(e,t){return(t-e)/Am}),(function(e){return e.getMinutes()})),Wm=Gm,Zm=Gm.range,$m=vm((function(e){e.setTime(e-e.getMilliseconds())}),(function(e,t){e.setTime(+e+1e3*t)}),(function(e,t){return(t-e)/1e3}),(function(e){return e.getUTCSeconds()})),Km=$m,Qm=$m.range,Jm=vm((function(){}),(function(e,t){e.setTime(+e+t)}),(function(e,t){return t-e}));Jm.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?vm((function(t){t.setTime(Math.floor(t/e)*e)}),(function(t,n){t.setTime(+t+n*e)}),(function(t,n){return(n-t)/e})):Jm:null};var ev=Jm,tv=Jm.range;function nv(e){return vm((function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+7*t)}),(function(e,t){return(t-e)/Mm}))}var rv=nv(0),iv=nv(1),ov=nv(2),av=nv(3),sv=nv(4),uv=nv(5),cv=nv(6),lv=rv.range,fv=iv.range,hv=ov.range,dv=av.range,_v=sv.range,pv=uv.range,mv=cv.range,vv=vm((function(e){e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+t)}),(function(e,t){return(t-e)/864e5}),(function(e){return e.getUTCDate()-1})),gv=vv,yv=vv.range,bv=vm((function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)}),(function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()}),(function(e){return e.getUTCFullYear()}));bv.every=function(e){return isFinite(e=Math.floor(e))&&e>0?vm((function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)})):null};var xv=bv,wv=bv.range;function Ev(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function Av(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function Mv(e,t,n){return{y:e,m:t,d:n,H:0,M:0,S:0,L:0}}function Sv(e){var t=e.dateTime,n=e.date,r=e.time,i=e.periods,o=e.days,a=e.shortDays,s=e.months,u=e.shortMonths,c=Iv(i),l=Uv(i),f=Iv(o),h=Uv(o),d=Iv(a),_=Uv(a),p=Iv(s),m=Uv(s),v=Iv(u),g=Uv(u),y={a:function(e){return a[e.getDay()]},A:function(e){return o[e.getDay()]},b:function(e){return u[e.getMonth()]},B:function(e){return s[e.getMonth()]},c:null,d:ag,e:ag,f:fg,H:sg,I:ug,j:cg,L:lg,m:hg,M:dg,p:function(e){return i[+(e.getHours()>=12)]},q:function(e){return 1+~~(e.getMonth()/3)},Q:Hg,s:Bg,S:_g,u:pg,U:mg,V:vg,w:gg,W:yg,x:null,X:null,y:bg,Y:xg,Z:wg,"%":Fg},b={a:function(e){return a[e.getUTCDay()]},A:function(e){return o[e.getUTCDay()]},b:function(e){return u[e.getUTCMonth()]},B:function(e){return s[e.getUTCMonth()]},c:null,d:Eg,e:Eg,f:Cg,H:Ag,I:Mg,j:Sg,L:Tg,m:kg,M:Og,p:function(e){return i[+(e.getUTCHours()>=12)]},q:function(e){return 1+~~(e.getUTCMonth()/3)},Q:Hg,s:Bg,S:Lg,u:jg,U:zg,V:Ng,w:Pg,W:Rg,x:null,X:null,y:Dg,Y:Ig,Z:Ug,"%":Fg},x={a:function(e,t,n){var r=d.exec(t.slice(n));return r?(e.w=_[r[0].toLowerCase()],n+r[0].length):-1},A:function(e,t,n){var r=f.exec(t.slice(n));return r?(e.w=h[r[0].toLowerCase()],n+r[0].length):-1},b:function(e,t,n){var r=v.exec(t.slice(n));return r?(e.m=g[r[0].toLowerCase()],n+r[0].length):-1},B:function(e,t,n){var r=p.exec(t.slice(n));return r?(e.m=m[r[0].toLowerCase()],n+r[0].length):-1},c:function(e,n,r){return A(e,t,n,r)},d:$v,e:$v,f:ng,H:Qv,I:Qv,j:Kv,L:tg,m:Zv,M:Jv,p:function(e,t,n){var r=c.exec(t.slice(n));return r?(e.p=l[r[0].toLowerCase()],n+r[0].length):-1},q:Wv,Q:ig,s:og,S:eg,u:Hv,U:Bv,V:Vv,w:Fv,W:qv,x:function(e,t,r){return A(e,n,t,r)},X:function(e,t,n){return A(e,r,t,n)},y:Xv,Y:Yv,Z:Gv,"%":rg};function w(e,t){return function(n){var r,i,o,a=[],s=-1,u=0,c=e.length;for(n instanceof Date||(n=new Date(+n));++s<c;)37===e.charCodeAt(s)&&(a.push(e.slice(u,s)),null!=(i=jv[r=e.charAt(++s)])?r=e.charAt(++s):i="e"===r?" ":"0",(o=t[r])&&(r=o(n,i)),a.push(r),u=s+1);return a.push(e.slice(u,s)),a.join("")}}function E(e,t){return function(n){var r,i,o=Mv(1900,void 0,1);if(A(o,e,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(!t||"Z"in o||(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Av(Mv(o.y,0,1))).getUTCDay(),r=i>4||0===i?iv.ceil(r):iv(r),r=gv.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=Ev(Mv(o.y,0,1))).getDay(),r=i>4||0===i?Cm.ceil(r):Cm(r),r=Bm.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Av(Mv(o.y,0,1)).getUTCDay():Ev(Mv(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Av(o)):Ev(o)}}function A(e,t,n,r){for(var i,o,a=0,s=t.length,u=n.length;a<s;){if(r>=u)return-1;if(37===(i=t.charCodeAt(a++))){if(i=t.charAt(a++),!(o=x[i in jv?t.charAt(a++):i])||(r=o(e,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return(y.x=w(n,y),y.X=w(r,y),y.c=w(t,y),b.x=w(n,b),b.X=w(r,b),b.c=w(t,b),{format:function(e){var t=w(e+="",y);return t.toString=function(){return e},t},parse:function(e){var t=E(e+="",!1);return t.toString=function(){return e},t},utcFormat:function(e){var t=w(e+="",b);return t.toString=function(){return e},t},utcParse:function(e){var t=E(e+="",!0);return t.toString=function(){return e},t}})}var Tv,Cv,kv,Ov,Lv,jv={"-":"",_:" ",0:"0"},zv=/^\s*\d+/,Nv=/^%/,Pv=/[\\^$*+?|[\]().{}]/g;function Rv(e,t,n){var r=e<0?"-":"",i=(r?-e:e)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(t)+i:i)}function Dv(e){return e.replace(Pv,"\\$&")}function Iv(e){return new RegExp("^(?:"+e.map(Dv).join("|")+")","i")}function Uv(e){for(var t={},n=-1,r=e.length;++n<r;)t[e[n].toLowerCase()]=n;return t}function Fv(e,t,n){var r=zv.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function Hv(e,t,n){var r=zv.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function Bv(e,t,n){var r=zv.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function Vv(e,t,n){var r=zv.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function qv(e,t,n){var r=zv.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function Yv(e,t,n){var r=zv.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function Xv(e,t,n){var r=zv.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Gv(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Wv(e,t,n){var r=zv.exec(t.slice(n,n+1));return r?(e.q=3*r[0]-3,n+r[0].length):-1}function Zv(e,t,n){var r=zv.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function $v(e,t,n){var r=zv.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function Kv(e,t,n){var r=zv.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function Qv(e,t,n){var r=zv.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function Jv(e,t,n){var r=zv.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function eg(e,t,n){var r=zv.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function tg(e,t,n){var r=zv.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function ng(e,t,n){var r=zv.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function rg(e,t,n){var r=Nv.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function ig(e,t,n){var r=zv.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function og(e,t,n){var r=zv.exec(t.slice(n));return r?(e.s=+r[0],n+r[0].length):-1}function ag(e,t){return Rv(e.getDate(),t,2)}function sg(e,t){return Rv(e.getHours(),t,2)}function ug(e,t){return Rv(e.getHours()%12||12,t,2)}function cg(e,t){return Rv(1+Bm.count(ym(e),e),t,3)}function lg(e,t){return Rv(e.getMilliseconds(),t,3)}function fg(e,t){return lg(e,t)+"000"}function hg(e,t){return Rv(e.getMonth()+1,t,2)}function dg(e,t){return Rv(e.getMinutes(),t,2)}function _g(e,t){return Rv(e.getSeconds(),t,2)}function pg(e){var t=e.getDay();return 0===t?7:t}function mg(e,t){return Rv(Tm.count(ym(e)-1,e),t,2)}function vg(e,t){var n=e.getDay();return e=n>=4||0===n?Lm(e):Lm.ceil(e),Rv(Lm.count(ym(e),e)+(4===ym(e).getDay()),t,2)}function gg(e){return e.getDay()}function yg(e,t){return Rv(Cm.count(ym(e)-1,e),t,2)}function bg(e,t){return Rv(e.getFullYear()%100,t,2)}function xg(e,t){return Rv(e.getFullYear()%1e4,t,4)}function wg(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+Rv(t/60|0,"0",2)+Rv(t%60,"0",2)}function Eg(e,t){return Rv(e.getUTCDate(),t,2)}function Ag(e,t){return Rv(e.getUTCHours(),t,2)}function Mg(e,t){return Rv(e.getUTCHours()%12||12,t,2)}function Sg(e,t){return Rv(1+gv.count(xv(e),e),t,3)}function Tg(e,t){return Rv(e.getUTCMilliseconds(),t,3)}function Cg(e,t){return Tg(e,t)+"000"}function kg(e,t){return Rv(e.getUTCMonth()+1,t,2)}function Og(e,t){return Rv(e.getUTCMinutes(),t,2)}function Lg(e,t){return Rv(e.getUTCSeconds(),t,2)}function jg(e){var t=e.getUTCDay();return 0===t?7:t}function zg(e,t){return Rv(rv.count(xv(e)-1,e),t,2)}function Ng(e,t){var n=e.getUTCDay();return e=n>=4||0===n?sv(e):sv.ceil(e),Rv(sv.count(xv(e),e)+(4===xv(e).getUTCDay()),t,2)}function Pg(e){return e.getUTCDay()}function Rg(e,t){return Rv(iv.count(xv(e)-1,e),t,2)}function Dg(e,t){return Rv(e.getUTCFullYear()%100,t,2)}function Ig(e,t){return Rv(e.getUTCFullYear()%1e4,t,4)}function Ug(){return"+0000"}function Fg(){return"%"}function Hg(e){return+e}function Bg(e){return Math.floor(+e/1e3)}function Vg(e){return Tv=Sv(e),Cv=Tv.format,kv=Tv.parse,Ov=Tv.utcFormat,Lv=Tv.utcParse,Tv}Vg({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var qg=1e3,Yg=60*qg,Xg=60*Yg,Gg=24*Xg,Wg=7*Gg,Zg=30*Gg,$g=365*Gg;function Kg(e){return new Date(e)}function Qg(e){return e instanceof Date?+e:+new Date(+e)}function Jg(e,t,n,r,o,a,s,u,c){var l=Bp(Pp,Pp),f=l.invert,h=l.domain,d=c(".%L"),_=c(":%S"),p=c("%I:%M"),m=c("%I %p"),v=c("%a %d"),g=c("%b %d"),y=c("%B"),b=c("%Y"),x=[[s,1,qg],[s,5,5*qg],[s,15,15*qg],[s,30,30*qg],[a,1,Yg],[a,5,5*Yg],[a,15,15*Yg],[a,30,30*Yg],[o,1,Xg],[o,3,3*Xg],[o,6,6*Xg],[o,12,12*Xg],[r,1,Gg],[r,2,2*Gg],[n,1,Wg],[t,1,Zg],[t,3,3*Zg],[e,1,$g]];function w(i){return(s(i)<i?d:a(i)<i?_:o(i)<i?p:r(i)<i?m:t(i)<i?n(i)<i?v:g:e(i)<i?y:b)(i)}function E(t,n,r,o){if(null==t&&(t=10),"number"==typeof t){var a=Math.abs(r-n)/t,s=i((function(e){return e[2]})).right(x,a);s===x.length?(o=C(n/$g,r/$g,t),t=e):s?(o=(s=x[a/x[s-1][2]<x[s][2]/a?s-1:s])[1],t=s[0]):(o=Math.max(C(n,r,t),1),t=u)}return null==o?t:t.every(o)}return l.invert=function(e){return new Date(f(e))},l.domain=function(e){return arguments.length?h(Sp.call(e,Qg)):h().map(Kg)},l.ticks=function(e,t){var n,r=h(),i=r[0],o=r[r.length-1],a=o<i;return a&&(n=i,i=o,o=n),n=(n=E(e,i,o,t))?n.range(i,o+1):[],a?n.reverse():n},l.tickFormat=function(e,t){return null==t?w:c(t)},l.nice=function(e,t){var n=h();return(e=E(e,n[0],n[n.length-1],t))?h(Gp(n,e)):l},l.copy=function(){return Fp(l,Jg(e,t,n,r,o,a,s,u,c))},l}var ey=function(){return Ep.apply(Jg(ym,wm,Tm,Bm,Ym,Wm,Km,ev,Cv).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)},ty=vm((function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCMonth(e.getUTCMonth()+t)}),(function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())}),(function(e){return e.getUTCMonth()})),ny=ty,ry=ty.range,iy=vm((function(e){e.setUTCMinutes(0,0,0)}),(function(e,t){e.setTime(+e+36e5*t)}),(function(e,t){return(t-e)/36e5}),(function(e){return e.getUTCHours()})),oy=iy,ay=iy.range,sy=vm((function(e){e.setUTCSeconds(0,0)}),(function(e,t){e.setTime(+e+t*Am)}),(function(e,t){return(t-e)/Am}),(function(e){return e.getUTCMinutes()})),uy=sy,cy=sy.range,ly=function(){return Ep.apply(Jg(xv,ny,rv,gv,oy,uy,Km,ev,Ov).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)};function fy(){var e,t,n,r,i,o=0,a=1,s=Pp,u=!1;function c(t){return isNaN(t=+t)?i:s(0===n?.5:(t=(r(t)-e)*n,u?Math.max(0,Math.min(1,t)):t))}return c.domain=function(i){return arguments.length?(e=r(o=+i[0]),t=r(a=+i[1]),n=e===t?0:1/(t-e),c):[o,a]},c.clamp=function(e){return arguments.length?(u=!!e,c):u},c.interpolator=function(e){return arguments.length?(s=e,c):s},c.unknown=function(e){return arguments.length?(i=e,c):i},function(i){return r=i,e=i(o),t=i(a),n=e===t?0:1/(t-e),c}}function hy(e,t){return t.domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown())}function dy(){var e=qp(fy()(Pp));return e.copy=function(){return hy(e,dy())},Ap.apply(e,arguments)}function _y(){var e=em(fy()).domain([1,10]);return e.copy=function(){return hy(e,_y()).base(e.base())},Ap.apply(e,arguments)}function py(){var e=im(fy());return e.copy=function(){return hy(e,py()).constant(e.constant())},Ap.apply(e,arguments)}function my(){var e=cm(fy());return e.copy=function(){return hy(e,my()).exponent(e.exponent())},Ap.apply(e,arguments)}function vy(){return my.apply(null,arguments).exponent(.5)}function gy(){var e=[],t=Pp;function n(n){if(!isNaN(n=+n))return t((u(e,n)-1)/(e.length-1))}return n.domain=function(t){if(!arguments.length)return e.slice();e=[];for(var i,o=0,a=t.length;o<a;++o)null==(i=t[o])||isNaN(i=+i)||e.push(i);return e.sort(r),n},n.interpolator=function(e){return arguments.length?(t=e,n):t},n.copy=function(){return gy(t).domain(e)},Ap.apply(n,arguments)}function yy(){var e,t,n,r,i,o,a,s=0,u=.5,c=1,l=Pp,f=!1;function h(e){return isNaN(e=+e)?a:(e=.5+((e=+o(e))-t)*(e<t?r:i),l(f?Math.max(0,Math.min(1,e)):e))}return h.domain=function(a){return arguments.length?(e=o(s=+a[0]),t=o(u=+a[1]),n=o(c=+a[2]),r=e===t?0:.5/(t-e),i=t===n?0:.5/(n-t),h):[s,u,c]},h.clamp=function(e){return arguments.length?(f=!!e,h):f},h.interpolator=function(e){return arguments.length?(l=e,h):l},h.unknown=function(e){return arguments.length?(a=e,h):a},function(a){return o=a,e=a(s),t=a(u),n=a(c),r=e===t?0:.5/(t-e),i=t===n?0:.5/(n-t),h}}function by(){var e=qp(yy()(Pp));return e.copy=function(){return hy(e,by())},Ap.apply(e,arguments)}function xy(){var e=em(yy()).domain([.1,1,10]);return e.copy=function(){return hy(e,xy()).base(e.base())},Ap.apply(e,arguments)}function wy(){var e=im(yy());return e.copy=function(){return hy(e,wy()).constant(e.constant())},Ap.apply(e,arguments)}function Ey(){var e=cm(yy());return e.copy=function(){return hy(e,Ey()).exponent(e.exponent())},Ap.apply(e,arguments)}function Ay(){return Ey.apply(null,arguments).exponent(.5)}var My=function(e){for(var t=e.length/6|0,n=new Array(t),r=0;r<t;)n[r]="#"+e.slice(6*r,6*++r);return n},Sy=My("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Ty=My("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Cy=My("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),ky=My("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Oy=My("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Ly=My("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),jy=My("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),zy=My("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Ny=My("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),Py=My("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),Ry=function(e){return Dn(e[e.length-1])},Dy=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(My),Iy=Ry(Dy),Uy=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(My),Fy=Ry(Uy),Hy=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(My),By=Ry(Hy),Vy=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(My),qy=Ry(Vy),Yy=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(My),Xy=Ry(Yy),Gy=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(My),Wy=Ry(Gy),Zy=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(My),$y=Ry(Zy),Ky=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(My),Qy=Ry(Ky),Jy=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(My),eb=Ry(Jy),tb=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(My),nb=Ry(tb),rb=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(My),ib=Ry(rb),ob=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(My),ab=Ry(ob),sb=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(My),ub=Ry(sb),cb=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(My),lb=Ry(cb),fb=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(My),hb=Ry(fb),db=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(My),_b=Ry(db),pb=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(My),mb=Ry(pb),vb=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(My),gb=Ry(vb),yb=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(My),bb=Ry(yb),xb=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(My),wb=Ry(xb),Eb=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(My),Ab=Ry(Eb),Mb=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(My),Sb=Ry(Mb),Tb=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(My),Cb=Ry(Tb),kb=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(My),Ob=Ry(kb),Lb=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(My),jb=Ry(Lb),zb=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(My),Nb=Ry(zb),Pb=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(My),Rb=Ry(Pb),Db=function(e){return e=Math.max(0,Math.min(1,e)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-e*(35.34-e*(2381.73-e*(6402.7-e*(7024.72-2710.57*e)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+e*(170.73+e*(52.82-e*(131.46-e*(176.58-67.37*e)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+e*(442.36-e*(2482.43-e*(6167.24-e*(6614.94-2475.67*e)))))))+")"},Ib=Wr(qr(300,.5,0),qr(-240,.5,1)),Ub=Wr(qr(-100,.75,.35),qr(80,1.5,.8)),Fb=Wr(qr(260,.75,.35),qr(80,1.5,.8)),Hb=qr(),Bb=function(e){(e<0||e>1)&&(e-=Math.floor(e));var t=Math.abs(e-.5);return Hb.h=360*e-100,Hb.s=1.5-1.5*t,Hb.l=.8-.9*t,Hb+""},Vb=vn(),qb=Math.PI/3,Yb=2*Math.PI/3,Xb=function(e){var t;return e=(.5-e)*Math.PI,Vb.r=255*(t=Math.sin(e))*t,Vb.g=255*(t=Math.sin(e+qb))*t,Vb.b=255*(t=Math.sin(e+Yb))*t,Vb+""},Gb=function(e){return e=Math.max(0,Math.min(1,e)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+e*(1172.33-e*(10793.56-e*(33300.12-e*(38394.49-14825.05*e)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+e*(557.33+e*(1225.33-e*(3574.96-e*(1073.77+707.56*e)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+e*(3211.1-e*(15327.97-e*(27814-e*(22569.18-6838.66*e)))))))+")"};function Wb(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}var Zb=Wb(My("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),$b=Wb(My("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Kb=Wb(My("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Qb=Wb(My("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),Jb=function(e){return function(){return e}},ex=Math.abs,tx=Math.atan2,nx=Math.cos,rx=Math.max,ix=Math.min,ox=Math.sin,ax=Math.sqrt,sx=1e-12,ux=Math.PI,cx=ux/2,lx=2*ux;function fx(e){return e>=1?cx:e<=-1?-cx:Math.asin(e)}function hx(e){return e.innerRadius}function dx(e){return e.outerRadius}function _x(e){return e.startAngle}function px(e){return e.endAngle}function mx(e){return e&&e.padAngle}function vx(e,t,n,r,i,o,a){var s=e-n,u=t-r,c=(a?o:-o)/ax(s*s+u*u),l=c*u,f=-c*s,h=e+l,d=t+f,_=n+l,p=r+f,m=(h+_)/2,v=(d+p)/2,g=_-h,y=p-d,b=g*g+y*y,x=i-o,w=h*p-_*d,E=(y<0?-1:1)*ax(rx(0,x*x*b-w*w)),A=(w*y-g*E)/b,M=(-w*g-y*E)/b,S=(w*y+g*E)/b,T=(-w*g+y*E)/b,C=A-m,k=M-v,O=S-m,L=T-v;return C*C+k*k>O*O+L*L&&(A=S,M=T),{cx:A,cy:M,x01:-l,y01:-f,x11:A*(i/x-1),y11:M*(i/x-1)}}var gx=function(){var e=hx,t=dx,n=Jb(0),r=null,i=_x,o=px,a=mx,s=null;function u(){var u,c,l,f=+e.apply(this,arguments),h=+t.apply(this,arguments),d=i.apply(this,arguments)-cx,_=o.apply(this,arguments)-cx,p=ex(_-d),m=_>d;if(s||(s=u=Ua()),h<f&&(c=h,h=f,f=c),h>sx)if(p>lx-sx)s.moveTo(h*nx(d),h*ox(d)),s.arc(0,0,h,d,_,!m),f>sx&&(s.moveTo(f*nx(_),f*ox(_)),s.arc(0,0,f,_,d,m));else{var v,g,y=d,b=_,x=d,w=_,E=p,A=p,M=a.apply(this,arguments)/2,S=M>sx&&(r?+r.apply(this,arguments):ax(f*f+h*h)),T=ix(ex(h-f)/2,+n.apply(this,arguments)),C=T,k=T;if(S>sx){var O=fx(S/f*ox(M)),L=fx(S/h*ox(M));(E-=2*O)>sx?(x+=O*=m?1:-1,w-=O):(E=0,x=w=(d+_)/2),(A-=2*L)>sx?(y+=L*=m?1:-1,b-=L):(A=0,y=b=(d+_)/2)}var j=h*nx(y),z=h*ox(y),N=f*nx(w),P=f*ox(w);if(T>sx){var R,D=h*nx(b),I=h*ox(b),U=f*nx(x),F=f*ox(x);if(p<ux&&(R=function(e,t,n,r,i,o,a,s){var u=n-e,c=r-t,l=a-i,f=s-o,h=f*u-l*c;if(!(h*h<sx))return[e+(h=(l*(t-o)-f*(e-i))/h)*u,t+h*c]}(j,z,U,F,D,I,N,P))){var H=j-R[0],B=z-R[1],V=D-R[0],q=I-R[1],Y=1/ox(((l=(H*V+B*q)/(ax(H*H+B*B)*ax(V*V+q*q)))>1?0:l<-1?ux:Math.acos(l))/2),X=ax(R[0]*R[0]+R[1]*R[1]);C=ix(T,(f-X)/(Y-1)),k=ix(T,(h-X)/(Y+1))}}A>sx?k>sx?(v=vx(U,F,j,z,h,k,m),g=vx(D,I,N,P,h,k,m),s.moveTo(v.cx+v.x01,v.cy+v.y01),k<T?s.arc(v.cx,v.cy,k,tx(v.y01,v.x01),tx(g.y01,g.x01),!m):(s.arc(v.cx,v.cy,k,tx(v.y01,v.x01),tx(v.y11,v.x11),!m),s.arc(0,0,h,tx(v.cy+v.y11,v.cx+v.x11),tx(g.cy+g.y11,g.cx+g.x11),!m),s.arc(g.cx,g.cy,k,tx(g.y11,g.x11),tx(g.y01,g.x01),!m))):(s.moveTo(j,z),s.arc(0,0,h,y,b,!m)):s.moveTo(j,z),f>sx&&E>sx?C>sx?(v=vx(N,P,D,I,f,-C,m),g=vx(j,z,U,F,f,-C,m),s.lineTo(v.cx+v.x01,v.cy+v.y01),C<T?s.arc(v.cx,v.cy,C,tx(v.y01,v.x01),tx(g.y01,g.x01),!m):(s.arc(v.cx,v.cy,C,tx(v.y01,v.x01),tx(v.y11,v.x11),!m),s.arc(0,0,f,tx(v.cy+v.y11,v.cx+v.x11),tx(g.cy+g.y11,g.cx+g.x11),m),s.arc(g.cx,g.cy,C,tx(g.y11,g.x11),tx(g.y01,g.x01),!m))):s.arc(0,0,f,w,x,m):s.lineTo(N,P)}else s.moveTo(0,0);if(s.closePath(),u)return s=null,u+""||null}return u.centroid=function(){var n=(+e.apply(this,arguments)+ +t.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-ux/2;return[nx(r)*n,ox(r)*n]},u.innerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Jb(+t),u):e},u.outerRadius=function(e){return arguments.length?(t="function"==typeof e?e:Jb(+e),u):t},u.cornerRadius=function(e){return arguments.length?(n="function"==typeof e?e:Jb(+e),u):n},u.padRadius=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:Jb(+e),u):r},u.startAngle=function(e){return arguments.length?(i="function"==typeof e?e:Jb(+e),u):i},u.endAngle=function(e){return arguments.length?(o="function"==typeof e?e:Jb(+e),u):o},u.padAngle=function(e){return arguments.length?(a="function"==typeof e?e:Jb(+e),u):a},u.context=function(e){return arguments.length?(s=null==e?null:e,u):s},u};function yx(e){this._context=e}yx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t)}}};var bx=function(e){return new yx(e)};function xx(e){return e[0]}function wx(e){return e[1]}var Ex=function(){var e=xx,t=wx,n=Jb(!0),r=null,i=bx,o=null;function a(a){var s,u,c,l=a.length,f=!1;for(null==r&&(o=i(c=Ua())),s=0;s<=l;++s)!(s<l&&n(u=a[s],s,a))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+e(u,s,a),+t(u,s,a));if(c)return o=null,c+""||null}return a.x=function(t){return arguments.length?(e="function"==typeof t?t:Jb(+t),a):e},a.y=function(e){return arguments.length?(t="function"==typeof e?e:Jb(+e),a):t},a.defined=function(e){return arguments.length?(n="function"==typeof e?e:Jb(!!e),a):n},a.curve=function(e){return arguments.length?(i=e,null!=r&&(o=i(r)),a):i},a.context=function(e){return arguments.length?(null==e?r=o=null:o=i(r=e),a):r},a},Ax=function(){var e=xx,t=null,n=Jb(0),r=wx,i=Jb(!0),o=null,a=bx,s=null;function u(u){var c,l,f,h,d,_=u.length,p=!1,m=new Array(_),v=new Array(_);for(null==o&&(s=a(d=Ua())),c=0;c<=_;++c){if(!(c<_&&i(h=u[c],c,u))===p)if(p=!p)l=c,s.areaStart(),s.lineStart();else{for(s.lineEnd(),s.lineStart(),f=c-1;f>=l;--f)s.point(m[f],v[f]);s.lineEnd(),s.areaEnd()}p&&(m[c]=+e(h,c,u),v[c]=+n(h,c,u),s.point(t?+t(h,c,u):m[c],r?+r(h,c,u):v[c]))}if(d)return s=null,d+""||null}function c(){return Ex().defined(i).curve(a).context(o)}return u.x=function(n){return arguments.length?(e="function"==typeof n?n:Jb(+n),t=null,u):e},u.x0=function(t){return arguments.length?(e="function"==typeof t?t:Jb(+t),u):e},u.x1=function(e){return arguments.length?(t=null==e?null:"function"==typeof e?e:Jb(+e),u):t},u.y=function(e){return arguments.length?(n="function"==typeof e?e:Jb(+e),r=null,u):n},u.y0=function(e){return arguments.length?(n="function"==typeof e?e:Jb(+e),u):n},u.y1=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:Jb(+e),u):r},u.lineX0=u.lineY0=function(){return c().x(e).y(n)},u.lineY1=function(){return c().x(e).y(r)},u.lineX1=function(){return c().x(t).y(n)},u.defined=function(e){return arguments.length?(i="function"==typeof e?e:Jb(!!e),u):i},u.curve=function(e){return arguments.length?(a=e,null!=o&&(s=a(o)),u):a},u.context=function(e){return arguments.length?(null==e?o=s=null:s=a(o=e),u):o},u},Mx=function(e,t){return t<e?-1:t>e?1:t>=e?0:NaN},Sx=function(e){return e},Tx=function(){var e=Sx,t=Mx,n=null,r=Jb(0),i=Jb(lx),o=Jb(0);function a(a){var s,u,c,l,f,h=a.length,d=0,_=new Array(h),p=new Array(h),m=+r.apply(this,arguments),v=Math.min(lx,Math.max(-lx,i.apply(this,arguments)-m)),g=Math.min(Math.abs(v)/h,o.apply(this,arguments)),y=g*(v<0?-1:1);for(s=0;s<h;++s)(f=p[_[s]=s]=+e(a[s],s,a))>0&&(d+=f);for(null!=t?_.sort((function(e,n){return t(p[e],p[n])})):null!=n&&_.sort((function(e,t){return n(a[e],a[t])})),s=0,c=d?(v-h*y)/d:0;s<h;++s,m=l)u=_[s],l=m+((f=p[u])>0?f*c:0)+y,p[u]={data:a[u],index:s,value:f,startAngle:m,endAngle:l,padAngle:g};return p}return a.value=function(t){return arguments.length?(e="function"==typeof t?t:Jb(+t),a):e},a.sortValues=function(e){return arguments.length?(t=e,n=null,a):t},a.sort=function(e){return arguments.length?(n=e,t=null,a):n},a.startAngle=function(e){return arguments.length?(r="function"==typeof e?e:Jb(+e),a):r},a.endAngle=function(e){return arguments.length?(i="function"==typeof e?e:Jb(+e),a):i},a.padAngle=function(e){return arguments.length?(o="function"==typeof e?e:Jb(+e),a):o},a},Cx=Ox(bx);function kx(e){this._curve=e}function Ox(e){function t(t){return new kx(e(t))}return t._curve=e,t}function Lx(e){var t=e.curve;return e.angle=e.x,delete e.x,e.radius=e.y,delete e.y,e.curve=function(e){return arguments.length?t(Ox(e)):t()._curve},e}kx.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(e,t){this._curve.point(t*Math.sin(e),t*-Math.cos(e))}};var jx=function(){return Lx(Ex().curve(Cx))},zx=function(){var e=Ax().curve(Cx),t=e.curve,n=e.lineX0,r=e.lineX1,i=e.lineY0,o=e.lineY1;return e.angle=e.x,delete e.x,e.startAngle=e.x0,delete e.x0,e.endAngle=e.x1,delete e.x1,e.radius=e.y,delete e.y,e.innerRadius=e.y0,delete e.y0,e.outerRadius=e.y1,delete e.y1,e.lineStartAngle=function(){return Lx(n())},delete e.lineX0,e.lineEndAngle=function(){return Lx(r())},delete e.lineX1,e.lineInnerRadius=function(){return Lx(i())},delete e.lineY0,e.lineOuterRadius=function(){return Lx(o())},delete e.lineY1,e.curve=function(e){return arguments.length?t(Ox(e)):t()._curve},e},Nx=function(e,t){return[(t=+t)*Math.cos(e-=Math.PI/2),t*Math.sin(e)]},Px=Array.prototype.slice;function Rx(e){return e.source}function Dx(e){return e.target}function Ix(e){var t=Rx,n=Dx,r=xx,i=wx,o=null;function a(){var a,s=Px.call(arguments),u=t.apply(this,s),c=n.apply(this,s);if(o||(o=a=Ua()),e(o,+r.apply(this,(s[0]=u,s)),+i.apply(this,s),+r.apply(this,(s[0]=c,s)),+i.apply(this,s)),a)return o=null,a+""||null}return a.source=function(e){return arguments.length?(t=e,a):t},a.target=function(e){return arguments.length?(n=e,a):n},a.x=function(e){return arguments.length?(r="function"==typeof e?e:Jb(+e),a):r},a.y=function(e){return arguments.length?(i="function"==typeof e?e:Jb(+e),a):i},a.context=function(e){return arguments.length?(o=null==e?null:e,a):o},a}function Ux(e,t,n,r,i){e.moveTo(t,n),e.bezierCurveTo(t=(t+r)/2,n,t,i,r,i)}function Fx(e,t,n,r,i){e.moveTo(t,n),e.bezierCurveTo(t,n=(n+i)/2,r,n,r,i)}function Hx(e,t,n,r,i){var o=Nx(t,n),a=Nx(t,n=(n+i)/2),s=Nx(r,n),u=Nx(r,i);e.moveTo(o[0],o[1]),e.bezierCurveTo(a[0],a[1],s[0],s[1],u[0],u[1])}function Bx(){return Ix(Ux)}function Vx(){return Ix(Fx)}function qx(){var e=Ix(Hx);return e.angle=e.x,delete e.x,e.radius=e.y,delete e.y,e}var Yx={draw:function(e,t){var n=Math.sqrt(t/ux);e.moveTo(n,0),e.arc(0,0,n,0,lx)}},Xx={draw:function(e,t){var n=Math.sqrt(t/5)/2;e.moveTo(-3*n,-n),e.lineTo(-n,-n),e.lineTo(-n,-3*n),e.lineTo(n,-3*n),e.lineTo(n,-n),e.lineTo(3*n,-n),e.lineTo(3*n,n),e.lineTo(n,n),e.lineTo(n,3*n),e.lineTo(-n,3*n),e.lineTo(-n,n),e.lineTo(-3*n,n),e.closePath()}},Gx=Math.sqrt(1/3),Wx=2*Gx,Zx={draw:function(e,t){var n=Math.sqrt(t/Wx),r=n*Gx;e.moveTo(0,-n),e.lineTo(r,0),e.lineTo(0,n),e.lineTo(-r,0),e.closePath()}},$x=Math.sin(ux/10)/Math.sin(7*ux/10),Kx=Math.sin(lx/10)*$x,Qx=-Math.cos(lx/10)*$x,Jx={draw:function(e,t){var n=Math.sqrt(.8908130915292852*t),r=Kx*n,i=Qx*n;e.moveTo(0,-n),e.lineTo(r,i);for(var o=1;o<5;++o){var a=lx*o/5,s=Math.cos(a),u=Math.sin(a);e.lineTo(u*n,-s*n),e.lineTo(s*r-u*i,u*r+s*i)}e.closePath()}},ew={draw:function(e,t){var n=Math.sqrt(t),r=-n/2;e.rect(r,r,n,n)}},tw=Math.sqrt(3),nw={draw:function(e,t){var n=-Math.sqrt(t/(3*tw));e.moveTo(0,2*n),e.lineTo(-tw*n,-n),e.lineTo(tw*n,-n),e.closePath()}},rw=Math.sqrt(3)/2,iw=1/Math.sqrt(12),ow=3*(iw/2+1),aw={draw:function(e,t){var n=Math.sqrt(t/ow),r=n/2,i=n*iw,o=r,a=n*iw+n,s=-o,u=a;e.moveTo(r,i),e.lineTo(o,a),e.lineTo(s,u),e.lineTo(-.5*r-rw*i,rw*r+-.5*i),e.lineTo(-.5*o-rw*a,rw*o+-.5*a),e.lineTo(-.5*s-rw*u,rw*s+-.5*u),e.lineTo(-.5*r+rw*i,-.5*i-rw*r),e.lineTo(-.5*o+rw*a,-.5*a-rw*o),e.lineTo(-.5*s+rw*u,-.5*u-rw*s),e.closePath()}},sw=[Yx,Xx,Zx,ew,Jx,nw,aw],uw=function(){var e=Jb(Yx),t=Jb(64),n=null;function r(){var r;if(n||(n=r=Ua()),e.apply(this,arguments).draw(n,+t.apply(this,arguments)),r)return n=null,r+""||null}return r.type=function(t){return arguments.length?(e="function"==typeof t?t:Jb(t),r):e},r.size=function(e){return arguments.length?(t="function"==typeof e?e:Jb(+e),r):t},r.context=function(e){return arguments.length?(n=null==e?null:e,r):n},r},cw=function(){};function lw(e,t,n){e._context.bezierCurveTo((2*e._x0+e._x1)/3,(2*e._y0+e._y1)/3,(e._x0+2*e._x1)/3,(e._y0+2*e._y1)/3,(e._x0+4*e._x1+t)/6,(e._y0+4*e._y1+n)/6)}function fw(e){this._context=e}fw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:lw(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:lw(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};var hw=function(e){return new fw(e)};function dw(e){this._context=e}dw.prototype={areaStart:cw,areaEnd:cw,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x2=e,this._y2=t;break;case 1:this._point=2,this._x3=e,this._y3=t;break;case 2:this._point=3,this._x4=e,this._y4=t,this._context.moveTo((this._x0+4*this._x1+e)/6,(this._y0+4*this._y1+t)/6);break;default:lw(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};var _w=function(e){return new dw(e)};function pw(e){this._context=e}pw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+e)/6,r=(this._y0+4*this._y1+t)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:lw(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};var mw=function(e){return new pw(e)};function vw(e,t){this._basis=new fw(e),this._beta=t}vw.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var e=this._x,t=this._y,n=e.length-1;if(n>0)for(var r,i=e[0],o=t[0],a=e[n]-i,s=t[n]-o,u=-1;++u<=n;)r=u/n,this._basis.point(this._beta*e[u]+(1-this._beta)*(i+r*a),this._beta*t[u]+(1-this._beta)*(o+r*s));this._x=this._y=null,this._basis.lineEnd()},point:function(e,t){this._x.push(+e),this._y.push(+t)}};var gw=function e(t){function n(e){return 1===t?new fw(e):new vw(e,t)}return n.beta=function(t){return e(+t)},n}(.85);function yw(e,t,n){e._context.bezierCurveTo(e._x1+e._k*(e._x2-e._x0),e._y1+e._k*(e._y2-e._y0),e._x2+e._k*(e._x1-t),e._y2+e._k*(e._y1-n),e._x2,e._y2)}function bw(e,t){this._context=e,this._k=(1-t)/6}bw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:yw(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2,this._x1=e,this._y1=t;break;case 2:this._point=3;default:yw(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var xw=function e(t){function n(e){return new bw(e,t)}return n.tension=function(t){return e(+t)},n}(0);function ww(e,t){this._context=e,this._k=(1-t)/6}ww.prototype={areaStart:cw,areaEnd:cw,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:yw(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var Ew=function e(t){function n(e){return new ww(e,t)}return n.tension=function(t){return e(+t)},n}(0);function Aw(e,t){this._context=e,this._k=(1-t)/6}Aw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:yw(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var Mw=function e(t){function n(e){return new Aw(e,t)}return n.tension=function(t){return e(+t)},n}(0);function Sw(e,t,n){var r=e._x1,i=e._y1,o=e._x2,a=e._y2;if(e._l01_a>sx){var s=2*e._l01_2a+3*e._l01_a*e._l12_a+e._l12_2a,u=3*e._l01_a*(e._l01_a+e._l12_a);r=(r*s-e._x0*e._l12_2a+e._x2*e._l01_2a)/u,i=(i*s-e._y0*e._l12_2a+e._y2*e._l01_2a)/u}if(e._l23_a>sx){var c=2*e._l23_2a+3*e._l23_a*e._l12_a+e._l12_2a,l=3*e._l23_a*(e._l23_a+e._l12_a);o=(o*c+e._x1*e._l23_2a-t*e._l12_2a)/l,a=(a*c+e._y1*e._l23_2a-n*e._l12_2a)/l}e._context.bezierCurveTo(r,i,o,a,e._x2,e._y2)}function Tw(e,t){this._context=e,this._alpha=t}Tw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3;default:Sw(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var Cw=function e(t){function n(e){return t?new Tw(e,t):new bw(e,0)}return n.alpha=function(t){return e(+t)},n}(.5);function kw(e,t){this._context=e,this._alpha=t}kw.prototype={areaStart:cw,areaEnd:cw,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:Sw(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var Ow=function e(t){function n(e){return t?new kw(e,t):new ww(e,0)}return n.alpha=function(t){return e(+t)},n}(.5);function Lw(e,t){this._context=e,this._alpha=t}Lw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Sw(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var jw=function e(t){function n(e){return t?new Lw(e,t):new Aw(e,0)}return n.alpha=function(t){return e(+t)},n}(.5);function zw(e){this._context=e}zw.prototype={areaStart:cw,areaEnd:cw,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(e,t){e=+e,t=+t,this._point?this._context.lineTo(e,t):(this._point=1,this._context.moveTo(e,t))}};var Nw=function(e){return new zw(e)};function Pw(e){return e<0?-1:1}function Rw(e,t,n){var r=e._x1-e._x0,i=t-e._x1,o=(e._y1-e._y0)/(r||i<0&&-0),a=(n-e._y1)/(i||r<0&&-0),s=(o*i+a*r)/(r+i);return(Pw(o)+Pw(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(s))||0}function Dw(e,t){var n=e._x1-e._x0;return n?(3*(e._y1-e._y0)/n-t)/2:t}function Iw(e,t,n){var r=e._x0,i=e._y0,o=e._x1,a=e._y1,s=(o-r)/3;e._context.bezierCurveTo(r+s,i+s*t,o-s,a-s*n,o,a)}function Uw(e){this._context=e}function Fw(e){this._context=new Hw(e)}function Hw(e){this._context=e}function Bw(e){return new Uw(e)}function Vw(e){return new Fw(e)}function qw(e){this._context=e}function Yw(e){var t,n,r=e.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=e[0]+2*e[1],t=1;t<r-1;++t)i[t]=1,o[t]=4,a[t]=4*e[t]+2*e[t+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*e[r-1]+e[r],t=1;t<r;++t)n=i[t]/o[t-1],o[t]-=n,a[t]-=n*a[t-1];for(i[r-1]=a[r-1]/o[r-1],t=r-2;t>=0;--t)i[t]=(a[t]-i[t+1])/o[t];for(o[r-1]=(e[r]+i[r-1])/2,t=0;t<r-1;++t)o[t]=2*e[t+1]-i[t+1];return[i,o]}Uw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Iw(this,this._t0,Dw(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){var n=NaN;if(t=+t,(e=+e)!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,Iw(this,Dw(this,n=Rw(this,e,t)),n);break;default:Iw(this,this._t0,n=Rw(this,e,t))}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=n}}},(Fw.prototype=Object.create(Uw.prototype)).point=function(e,t){Uw.prototype.point.call(this,t,e)},Hw.prototype={moveTo:function(e,t){this._context.moveTo(t,e)},closePath:function(){this._context.closePath()},lineTo:function(e,t){this._context.lineTo(t,e)},bezierCurveTo:function(e,t,n,r,i,o){this._context.bezierCurveTo(t,e,r,n,o,i)}},qw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var e=this._x,t=this._y,n=e.length;if(n)if(this._line?this._context.lineTo(e[0],t[0]):this._context.moveTo(e[0],t[0]),2===n)this._context.lineTo(e[1],t[1]);else for(var r=Yw(e),i=Yw(t),o=0,a=1;a<n;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],e[a],t[a]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(e,t){this._x.push(+e),this._y.push(+t)}};var Xw=function(e){return new qw(e)};function Gw(e,t){this._context=e,this._t=t}Gw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,t),this._context.lineTo(e,t);else{var n=this._x*(1-this._t)+e*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,t)}}this._x=e,this._y=t}};var Ww=function(e){return new Gw(e,.5)};function Zw(e){return new Gw(e,0)}function $w(e){return new Gw(e,1)}var Kw=function(e,t){if((i=e.length)>1)for(var n,r,i,o=1,a=e[t[0]],s=a.length;o<i;++o)for(r=a,a=e[t[o]],n=0;n<s;++n)a[n][1]+=a[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]},Qw=function(e){for(var t=e.length,n=new Array(t);--t>=0;)n[t]=t;return n};function Jw(e,t){return e[t]}var eE=function(){var e=Jb([]),t=Qw,n=Kw,r=Jw;function i(i){var o,a,s=e.apply(this,arguments),u=i.length,c=s.length,l=new Array(c);for(o=0;o<c;++o){for(var f,h=s[o],d=l[o]=new Array(u),_=0;_<u;++_)d[_]=f=[0,+r(i[_],h,_,i)],f.data=i[_];d.key=h}for(o=0,a=t(l);o<c;++o)l[a[o]].index=o;return n(l,a),l}return i.keys=function(t){return arguments.length?(e="function"==typeof t?t:Jb(Px.call(t)),i):e},i.value=function(e){return arguments.length?(r="function"==typeof e?e:Jb(+e),i):r},i.order=function(e){return arguments.length?(t=null==e?Qw:"function"==typeof e?e:Jb(Px.call(e)),i):t},i.offset=function(e){return arguments.length?(n=null==e?Kw:e,i):n},i},tE=function(e,t){if((r=e.length)>0){for(var n,r,i,o=0,a=e[0].length;o<a;++o){for(i=n=0;n<r;++n)i+=e[n][o][1]||0;if(i)for(n=0;n<r;++n)e[n][o][1]/=i}Kw(e,t)}},nE=function(e,t){if((s=e.length)>0)for(var n,r,i,o,a,s,u=0,c=e[t[0]].length;u<c;++u)for(o=a=0,n=0;n<s;++n)(i=(r=e[t[n]][u])[1]-r[0])>=0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=a,r[0]=a+=i):r[0]=o},rE=function(e,t){if((n=e.length)>0){for(var n,r=0,i=e[t[0]],o=i.length;r<o;++r){for(var a=0,s=0;a<n;++a)s+=e[a][r][1]||0;i[r][1]+=i[r][0]=-s/2}Kw(e,t)}},iE=function(e,t){if((i=e.length)>0&&(r=(n=e[t[0]]).length)>0){for(var n,r,i,o=0,a=1;a<r;++a){for(var s=0,u=0,c=0;s<i;++s){for(var l=e[t[s]],f=l[a][1]||0,h=(f-(l[a-1][1]||0))/2,d=0;d<s;++d){var _=e[t[d]];h+=(_[a][1]||0)-(_[a-1][1]||0)}u+=f,c+=h*f}n[a-1][1]+=n[a-1][0]=o,u&&(o-=c/u)}n[a-1][1]+=n[a-1][0]=o,Kw(e,t)}},oE=function(e){var t=e.map(aE);return Qw(e).sort((function(e,n){return t[e]-t[n]}))};function aE(e){for(var t,n=-1,r=0,i=e.length,o=-1/0;++n<i;)(t=+e[n][1])>o&&(o=t,r=n);return r}var sE=function(e){var t=e.map(uE);return Qw(e).sort((function(e,n){return t[e]-t[n]}))};function uE(e){for(var t,n=0,r=-1,i=e.length;++r<i;)(t=+e[r][1])&&(n+=t);return n}var cE=function(e){return sE(e).reverse()},lE=function(e){var t,n,r=e.length,i=e.map(uE),o=oE(e),a=0,s=0,u=[],c=[];for(t=0;t<r;++t)n=o[t],a<s?(a+=i[n],u.push(n)):(s+=i[n],c.push(n));return c.reverse().concat(u)},fE=function(e){return Qw(e).reverse()};var hE=Date.prototype.toISOString?function(e){return e.toISOString()}:Ov("%Y-%m-%dT%H:%M:%S.%LZ");var dE=+new Date("2000-01-01T00:00:00.000Z")?function(e){var t=new Date(e);return isNaN(t)?null:t}:Lv("%Y-%m-%dT%H:%M:%S.%LZ"),_E=function(e){return function(){return e}};function pE(e){return e[0]}function mE(e){return e[1]}function vE(){this._=null}function gE(e){e.U=e.C=e.L=e.R=e.P=e.N=null}function yE(e,t){var n=t,r=t.R,i=n.U;i?i.L===n?i.L=r:i.R=r:e._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function bE(e,t){var n=t,r=t.L,i=n.U;i?i.L===n?i.L=r:i.R=r:e._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function xE(e){for(;e.L;)e=e.L;return e}vE.prototype={constructor:vE,insert:function(e,t){var n,r,i;if(e){if(t.P=e,t.N=e.N,e.N&&(e.N.P=t),e.N=t,e.R){for(e=e.R;e.L;)e=e.L;e.L=t}else e.R=t;n=e}else this._?(e=xE(this._),t.P=null,t.N=e,e.P=e.L=t,n=e):(t.P=t.N=null,this._=t,n=null);for(t.L=t.R=null,t.U=n,t.C=!0,e=t;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,e=r):(e===n.R&&(yE(this,n),n=(e=n).U),n.C=!1,r.C=!0,bE(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,e=r):(e===n.L&&(bE(this,n),n=(e=n).U),n.C=!1,r.C=!0,yE(this,r)),n=e.U;this._.C=!1},remove:function(e){e.N&&(e.N.P=e.P),e.P&&(e.P.N=e.N),e.N=e.P=null;var t,n,r,i=e.U,o=e.L,a=e.R;if(n=o?a?xE(a):o:a,i?i.L===e?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=e.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=e.U,e=n.R,i.L=e,n.R=a,a.U=n):(n.U=i,i=n,e=n.R)):(r=e.C,e=n),e&&(e.U=i),!r)if(e&&e.C)e.C=!1;else{do{if(e===this._)break;if(e===i.L){if((t=i.R).C&&(t.C=!1,i.C=!0,yE(this,i),t=i.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,bE(this,t),t=i.R),t.C=i.C,i.C=t.R.C=!1,yE(this,i),e=this._;break}}else if((t=i.L).C&&(t.C=!1,i.C=!0,bE(this,i),t=i.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,yE(this,t),t=i.L),t.C=i.C,i.C=t.L.C=!1,bE(this,i),e=this._;break}t.C=!0,e=i,i=i.U}while(!e.C);e&&(e.C=!1)}}};var wE=vE;function EE(e,t,n,r){var i=[null,null],o=GE.push(i)-1;return i.left=e,i.right=t,n&&ME(i,e,t,n),r&&ME(i,t,e,r),YE[e.index].halfedges.push(o),YE[t.index].halfedges.push(o),i}function AE(e,t,n){var r=[t,n];return r.left=e,r}function ME(e,t,n,r){e[0]||e[1]?e.left===n?e[1]=r:e[0]=r:(e[0]=r,e.left=t,e.right=n)}function SE(e,t,n,r,i){var o,a=e[0],s=e[1],u=a[0],c=a[1],l=0,f=1,h=s[0]-u,d=s[1]-c;if(o=t-u,h||!(o>0)){if(o/=h,h<0){if(o<l)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>l&&(l=o)}if(o=r-u,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>l&&(l=o)}else if(h>0){if(o<l)return;o<f&&(f=o)}if(o=n-c,d||!(o>0)){if(o/=d,d<0){if(o<l)return;o<f&&(f=o)}else if(d>0){if(o>f)return;o>l&&(l=o)}if(o=i-c,d||!(o<0)){if(o/=d,d<0){if(o>f)return;o>l&&(l=o)}else if(d>0){if(o<l)return;o<f&&(f=o)}return!(l>0||f<1)||(l>0&&(e[0]=[u+l*h,c+l*d]),f<1&&(e[1]=[u+f*h,c+f*d]),!0)}}}}}function TE(e,t,n,r,i){var o=e[1];if(o)return!0;var a,s,u=e[0],c=e.left,l=e.right,f=c[0],h=c[1],d=l[0],_=l[1],p=(f+d)/2,m=(h+_)/2;if(_===h){if(p<t||p>=r)return;if(f>d){if(u){if(u[1]>=i)return}else u=[p,n];o=[p,i]}else{if(u){if(u[1]<n)return}else u=[p,i];o=[p,n]}}else if(s=m-(a=(f-d)/(_-h))*p,a<-1||a>1)if(f>d){if(u){if(u[1]>=i)return}else u=[(n-s)/a,n];o=[(i-s)/a,i]}else{if(u){if(u[1]<n)return}else u=[(i-s)/a,i];o=[(n-s)/a,n]}else if(h<_){if(u){if(u[0]>=r)return}else u=[t,a*t+s];o=[r,a*r+s]}else{if(u){if(u[0]<t)return}else u=[r,a*r+s];o=[t,a*t+s]}return e[0]=u,e[1]=o,!0}function CE(e,t){var n=e.site,r=t.left,i=t.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=t[1],i=t[0]):(r=t[0],i=t[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function kE(e,t){return t[+(t.left!==e.site)]}function OE(e,t){return t[+(t.left===e.site)]}var LE,jE=[];function zE(){gE(this),this.x=this.y=this.arc=this.site=this.cy=null}function NE(e){var t=e.P,n=e.N;if(t&&n){var r=t.site,i=e.site,o=n.site;if(r!==o){var a=i[0],s=i[1],u=r[0]-a,c=r[1]-s,l=o[0]-a,f=o[1]-s,h=2*(u*f-c*l);if(!(h>=-ZE)){var d=u*u+c*c,_=l*l+f*f,p=(f*d-c*_)/h,m=(u*_-l*d)/h,v=jE.pop()||new zE;v.arc=e,v.site=i,v.x=p+a,v.y=(v.cy=m+s)+Math.sqrt(p*p+m*m),e.circle=v;for(var g=null,y=XE._;y;)if(v.y<y.y||v.y===y.y&&v.x<=y.x){if(!y.L){g=y.P;break}y=y.L}else{if(!y.R){g=y;break}y=y.R}XE.insert(g,v),g||(LE=v)}}}}function PE(e){var t=e.circle;t&&(t.P||(LE=t.N),XE.remove(t),jE.push(t),gE(t),e.circle=null)}var RE=[];function DE(){gE(this),this.edge=this.site=this.circle=null}function IE(e){var t=RE.pop()||new DE;return t.site=e,t}function UE(e){PE(e),qE.remove(e),RE.push(e),gE(e)}function FE(e){var t=e.circle,n=t.x,r=t.cy,i=[n,r],o=e.P,a=e.N,s=[e];UE(e);for(var u=o;u.circle&&Math.abs(n-u.circle.x)<WE&&Math.abs(r-u.circle.cy)<WE;)o=u.P,s.unshift(u),UE(u),u=o;s.unshift(u),PE(u);for(var c=a;c.circle&&Math.abs(n-c.circle.x)<WE&&Math.abs(r-c.circle.cy)<WE;)a=c.N,s.push(c),UE(c),c=a;s.push(c),PE(c);var l,f=s.length;for(l=1;l<f;++l)c=s[l],u=s[l-1],ME(c.edge,u.site,c.site,i);u=s[0],(c=s[f-1]).edge=EE(u.site,c.site,null,i),NE(u),NE(c)}function HE(e){for(var t,n,r,i,o=e[0],a=e[1],s=qE._;s;)if((r=BE(s,a)-o)>WE)s=s.L;else{if(!((i=o-VE(s,a))>WE)){r>-WE?(t=s.P,n=s):i>-WE?(t=s,n=s.N):t=n=s;break}if(!s.R){t=s;break}s=s.R}!function(e){YE[e.index]={site:e,halfedges:[]}}(e);var u=IE(e);if(qE.insert(t,u),t||n){if(t===n)return PE(t),n=IE(t.site),qE.insert(u,n),u.edge=n.edge=EE(t.site,u.site),NE(t),void NE(n);if(n){PE(t),PE(n);var c=t.site,l=c[0],f=c[1],h=e[0]-l,d=e[1]-f,_=n.site,p=_[0]-l,m=_[1]-f,v=2*(h*m-d*p),g=h*h+d*d,y=p*p+m*m,b=[(m*g-d*y)/v+l,(h*y-p*g)/v+f];ME(n.edge,c,_,b),u.edge=EE(c,e,null,b),n.edge=EE(e,_,null,b),NE(t),NE(n)}else u.edge=EE(t.site,u.site)}}function BE(e,t){var n=e.site,r=n[0],i=n[1],o=i-t;if(!o)return r;var a=e.P;if(!a)return-1/0;var s=(n=a.site)[0],u=n[1],c=u-t;if(!c)return s;var l=s-r,f=1/o-1/c,h=l/c;return f?(-h+Math.sqrt(h*h-2*f*(l*l/(-2*c)-u+c/2+i-o/2)))/f+r:(r+s)/2}function VE(e,t){var n=e.N;if(n)return BE(n,t);var r=e.site;return r[1]===t?r[0]:1/0}var qE,YE,XE,GE,WE=1e-6,ZE=1e-12;function $E(e,t){return t[1]-e[1]||t[0]-e[0]}function KE(e,t){var n,r,i,o=e.sort($E).pop();for(GE=[],YE=new Array(e.length),qE=new wE,XE=new wE;;)if(i=LE,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(HE(o),n=o[0],r=o[1]),o=e.pop();else{if(!i)break;FE(i.arc)}if(function(){for(var e,t,n,r,i=0,o=YE.length;i<o;++i)if((e=YE[i])&&(r=(t=e.halfedges).length)){var a=new Array(r),s=new Array(r);for(n=0;n<r;++n)a[n]=n,s[n]=CE(e,GE[t[n]]);for(a.sort((function(e,t){return s[t]-s[e]})),n=0;n<r;++n)s[n]=t[a[n]];for(n=0;n<r;++n)t[n]=s[n]}}(),t){var a=+t[0][0],s=+t[0][1],u=+t[1][0],c=+t[1][1];!function(e,t,n,r){for(var i,o=GE.length;o--;)TE(i=GE[o],e,t,n,r)&&SE(i,e,t,n,r)&&(Math.abs(i[0][0]-i[1][0])>WE||Math.abs(i[0][1]-i[1][1])>WE)||delete GE[o]}(a,s,u,c),function(e,t,n,r){var i,o,a,s,u,c,l,f,h,d,_,p,m=YE.length,v=!0;for(i=0;i<m;++i)if(o=YE[i]){for(a=o.site,s=(u=o.halfedges).length;s--;)GE[u[s]]||u.splice(s,1);for(s=0,c=u.length;s<c;)_=(d=OE(o,GE[u[s]]))[0],p=d[1],f=(l=kE(o,GE[u[++s%c]]))[0],h=l[1],(Math.abs(_-f)>WE||Math.abs(p-h)>WE)&&(u.splice(s,0,GE.push(AE(a,d,Math.abs(_-e)<WE&&r-p>WE?[e,Math.abs(f-e)<WE?h:r]:Math.abs(p-r)<WE&&n-_>WE?[Math.abs(h-r)<WE?f:n,r]:Math.abs(_-n)<WE&&p-t>WE?[n,Math.abs(f-n)<WE?h:t]:Math.abs(p-t)<WE&&_-e>WE?[Math.abs(h-t)<WE?f:e,t]:null))-1),++c);c&&(v=!1)}if(v){var g,y,b,x=1/0;for(i=0,v=null;i<m;++i)(o=YE[i])&&(b=(g=(a=o.site)[0]-e)*g+(y=a[1]-t)*y)<x&&(x=b,v=o);if(v){var w=[e,t],E=[e,r],A=[n,r],M=[n,t];v.halfedges.push(GE.push(AE(a=v.site,w,E))-1,GE.push(AE(a,E,A))-1,GE.push(AE(a,A,M))-1,GE.push(AE(a,M,w))-1)}}for(i=0;i<m;++i)(o=YE[i])&&(o.halfedges.length||delete YE[i])}(a,s,u,c)}this.edges=GE,this.cells=YE,qE=XE=GE=YE=null}KE.prototype={constructor:KE,polygons:function(){var e=this.edges;return this.cells.map((function(t){var n=t.halfedges.map((function(n){return kE(t,e[n])}));return n.data=t.site.data,n}))},triangles:function(){var e=[],t=this.edges;return this.cells.forEach((function(n,r){if(o=(i=n.halfedges).length)for(var i,o,a,s,u,c,l=n.site,f=-1,h=t[i[o-1]],d=h.left===l?h.right:h.left;++f<o;)a=d,d=(h=t[i[f]]).left===l?h.right:h.left,a&&d&&r<a.index&&r<d.index&&(u=a,c=d,((s=l)[0]-c[0])*(u[1]-s[1])-(s[0]-u[0])*(c[1]-s[1])<0)&&e.push([l.data,a.data,d.data])})),e},links:function(){return this.edges.filter((function(e){return e.right})).map((function(e){return{source:e.left.data,target:e.right.data}}))},find:function(e,t,n){for(var r,i,o=this,a=o._found||0,s=o.cells.length;!(i=o.cells[a]);)if(++a>=s)return null;var u=e-i.site[0],c=t-i.site[1],l=u*u+c*c;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(n){var r=o.edges[n],s=r.left;if(s!==i.site&&s||(s=r.right)){var u=e-s[0],c=t-s[1],f=u*u+c*c;f<l&&(l=f,a=s.index)}}))}while(null!==a);return o._found=r,null==n||l<=n*n?i.site:null}};var QE=function(){var e=pE,t=mE,n=null;function r(r){return new KE(r.map((function(n,i){var o=[Math.round(e(n,i,r)/WE)*WE,Math.round(t(n,i,r)/WE)*WE];return o.index=i,o.data=n,o})),n)}return r.polygons=function(e){return r(e).polygons()},r.links=function(e){return r(e).links()},r.triangles=function(e){return r(e).triangles()},r.x=function(t){return arguments.length?(e="function"==typeof t?t:_E(+t),r):e},r.y=function(e){return arguments.length?(t="function"==typeof e?e:_E(+e),r):t},r.extent=function(e){return arguments.length?(n=null==e?null:[[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]],r):n&&[[n[0][0],n[0][1]],[n[1][0],n[1][1]]]},r.size=function(e){return arguments.length?(n=null==e?null:[[0,0],[+e[0],+e[1]]],r):n&&[n[1][0]-n[0][0],n[1][1]-n[0][1]]},r},JE=function(e){return function(){return e}};function eA(e,t,n){this.target=e,this.type=t,this.transform=n}function tA(e,t,n){this.k=e,this.x=t,this.y=n}tA.prototype={constructor:tA,scale:function(e){return 1===e?this:new tA(this.k*e,this.x,this.y)},translate:function(e,t){return 0===e&0===t?this:new tA(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var nA=new tA(1,0,0);function rA(e){for(;!e.__zoom;)if(!(e=e.parentNode))return nA;return e.__zoom}function iA(){_t.stopImmediatePropagation()}rA.prototype=tA.prototype;var oA=function(){_t.preventDefault(),_t.stopImmediatePropagation()};function aA(){return!_t.ctrlKey&&!_t.button}function sA(){var e=this;return e instanceof SVGElement?(e=e.ownerSVGElement||e).hasAttribute("viewBox")?[[(e=e.viewBox.baseVal).x,e.y],[e.x+e.width,e.y+e.height]]:[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]:[[0,0],[e.clientWidth,e.clientHeight]]}function uA(){return this.__zoom||nA}function cA(){return-_t.deltaY*(1===_t.deltaMode?.05:_t.deltaMode?1:.002)}function lA(){return navigator.maxTouchPoints||"ontouchstart"in this}function fA(e,t,n){var r=e.invertX(t[0][0])-n[0][0],i=e.invertX(t[1][0])-n[1][0],o=e.invertY(t[0][1])-n[0][1],a=e.invertY(t[1][1])-n[1][1];return e.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),a>o?(o+a)/2:Math.min(0,o)||Math.max(0,a))}var hA=function(){var e,t,n=aA,r=sA,i=fA,o=cA,a=lA,s=[0,1/0],u=[[-1/0,-1/0],[1/0,1/0]],c=250,l=ur,f=pe("start","zoom","end"),h=500,d=150,_=0;function p(e){e.property("__zoom",uA).on("wheel.zoom",w).on("mousedown.zoom",E).on("dblclick.zoom",A).filter(a).on("touchstart.zoom",M).on("touchmove.zoom",S).on("touchend.zoom touchcancel.zoom",T).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function m(e,t){return(t=Math.max(s[0],Math.min(s[1],t)))===e.k?e:new tA(t,e.x,e.y)}function v(e,t,n){var r=t[0]-n[0]*e.k,i=t[1]-n[1]*e.k;return r===e.x&&i===e.y?e:new tA(e.k,r,i)}function g(e){return[(+e[0][0]+ +e[1][0])/2,(+e[0][1]+ +e[1][1])/2]}function y(e,t,n){e.on("start.zoom",(function(){b(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){b(this,arguments).end()})).tween("zoom",(function(){var e=this,i=arguments,o=b(e,i),a=r.apply(e,i),s=null==n?g(a):"function"==typeof n?n.apply(e,i):n,u=Math.max(a[1][0]-a[0][0],a[1][1]-a[0][1]),c=e.__zoom,f="function"==typeof t?t.apply(e,i):t,h=l(c.invert(s).concat(u/c.k),f.invert(s).concat(u/f.k));return function(e){if(1===e)e=f;else{var t=h(e),n=u/t[2];e=new tA(n,s[0]-t[0]*n,s[1]-t[1]*n)}o.zoom(null,e)}}))}function b(e,t,n){return!n&&e.__zooming||new x(e,t)}function x(e,t){this.that=e,this.args=t,this.active=0,this.extent=r.apply(e,t),this.taps=0}function w(){if(n.apply(this,arguments)){var e=b(this,arguments),t=this.__zoom,r=Math.max(s[0],Math.min(s[1],t.k*Math.pow(2,o.apply(this,arguments)))),a=Pt(this);if(e.wheel)e.mouse[0][0]===a[0]&&e.mouse[0][1]===a[1]||(e.mouse[1]=t.invert(e.mouse[0]=a)),clearTimeout(e.wheel);else{if(t.k===r)return;e.mouse=[a,t.invert(a)],Li(this),e.start()}oA(),e.wheel=setTimeout((function(){e.wheel=null,e.end()}),d),e.zoom("mouse",i(v(m(t,r),e.mouse[0],e.mouse[1]),e.extent,u))}}function E(){if(!t&&n.apply(this,arguments)){var e=b(this,arguments,!0),r=Ct(_t.view).on("mousemove.zoom",(function(){if(oA(),!e.moved){var t=_t.clientX-a,n=_t.clientY-s;e.moved=t*t+n*n>_}e.zoom("mouse",i(v(e.that.__zoom,e.mouse[0]=Pt(e.that),e.mouse[1]),e.extent,u))}),!0).on("mouseup.zoom",(function(){r.on("mousemove.zoom mouseup.zoom",null),Bt(_t.view,e.moved),oA(),e.end()}),!0),o=Pt(this),a=_t.clientX,s=_t.clientY;Ht(_t.view),iA(),e.mouse=[o,this.__zoom.invert(o)],Li(this),e.start()}}function A(){if(n.apply(this,arguments)){var e=this.__zoom,t=Pt(this),o=e.invert(t),a=e.k*(_t.shiftKey?.5:2),s=i(v(m(e,a),t,o),r.apply(this,arguments),u);oA(),c>0?Ct(this).transition().duration(c).call(y,s,t):Ct(this).call(p.transform,s)}}function M(){if(n.apply(this,arguments)){var t,r,i,o,a=_t.touches,s=a.length,u=b(this,arguments,_t.changedTouches.length===s);for(iA(),r=0;r<s;++r)i=a[r],o=[o=Dt(this,a,i.identifier),this.__zoom.invert(o),i.identifier],u.touch0?u.touch1||u.touch0[2]===o[2]||(u.touch1=o,u.taps=0):(u.touch0=o,t=!0,u.taps=1+!!e);e&&(e=clearTimeout(e)),t&&(u.taps<2&&(e=setTimeout((function(){e=null}),h)),Li(this),u.start())}}function S(){if(this.__zooming){var t,n,r,o,a=b(this,arguments),s=_t.changedTouches,c=s.length;for(oA(),e&&(e=clearTimeout(e)),a.taps=0,t=0;t<c;++t)n=s[t],r=Dt(this,s,n.identifier),a.touch0&&a.touch0[2]===n.identifier?a.touch0[0]=r:a.touch1&&a.touch1[2]===n.identifier&&(a.touch1[0]=r);if(n=a.that.__zoom,a.touch1){var l=a.touch0[0],f=a.touch0[1],h=a.touch1[0],d=a.touch1[1],_=(_=h[0]-l[0])*_+(_=h[1]-l[1])*_,p=(p=d[0]-f[0])*p+(p=d[1]-f[1])*p;n=m(n,Math.sqrt(_/p)),r=[(l[0]+h[0])/2,(l[1]+h[1])/2],o=[(f[0]+d[0])/2,(f[1]+d[1])/2]}else{if(!a.touch0)return;r=a.touch0[0],o=a.touch0[1]}a.zoom("touch",i(v(n,r,o),a.extent,u))}}function T(){if(this.__zooming){var e,n,r=b(this,arguments),i=_t.changedTouches,o=i.length;for(iA(),t&&clearTimeout(t),t=setTimeout((function(){t=null}),h),e=0;e<o;++e)n=i[e],r.touch0&&r.touch0[2]===n.identifier?delete r.touch0:r.touch1&&r.touch1[2]===n.identifier&&delete r.touch1;if(r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0)r.touch0[1]=this.__zoom.invert(r.touch0[0]);else if(r.end(),2===r.taps){var a=Ct(this).on("dblclick.zoom");a&&a.apply(this,arguments)}}}return p.transform=function(e,t,n){var r=e.selection?e.selection():e;r.property("__zoom",uA),e!==r?y(e,t,n):r.interrupt().each((function(){b(this,arguments).start().zoom(null,"function"==typeof t?t.apply(this,arguments):t).end()}))},p.scaleBy=function(e,t,n){p.scaleTo(e,(function(){var e=this.__zoom.k,n="function"==typeof t?t.apply(this,arguments):t;return e*n}),n)},p.scaleTo=function(e,t,n){p.transform(e,(function(){var e=r.apply(this,arguments),o=this.__zoom,a=null==n?g(e):"function"==typeof n?n.apply(this,arguments):n,s=o.invert(a),c="function"==typeof t?t.apply(this,arguments):t;return i(v(m(o,c),a,s),e,u)}),n)},p.translateBy=function(e,t,n){p.transform(e,(function(){return i(this.__zoom.translate("function"==typeof t?t.apply(this,arguments):t,"function"==typeof n?n.apply(this,arguments):n),r.apply(this,arguments),u)}))},p.translateTo=function(e,t,n,o){p.transform(e,(function(){var e=r.apply(this,arguments),a=this.__zoom,s=null==o?g(e):"function"==typeof o?o.apply(this,arguments):o;return i(nA.translate(s[0],s[1]).scale(a.k).translate("function"==typeof t?-t.apply(this,arguments):-t,"function"==typeof n?-n.apply(this,arguments):-n),e,u)}),o)},x.prototype={start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(e,t){return this.mouse&&"mouse"!==e&&(this.mouse[1]=t.invert(this.mouse[0])),this.touch0&&"touch"!==e&&(this.touch0[1]=t.invert(this.touch0[0])),this.touch1&&"touch"!==e&&(this.touch1[1]=t.invert(this.touch1[0])),this.that.__zoom=t,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(e){bt(new eA(p,e,this.that.__zoom),f.apply,f,[e,this.that,this.args])}},p.wheelDelta=function(e){return arguments.length?(o="function"==typeof e?e:JE(+e),p):o},p.filter=function(e){return arguments.length?(n="function"==typeof e?e:JE(!!e),p):n},p.touchable=function(e){return arguments.length?(a="function"==typeof e?e:JE(!!e),p):a},p.extent=function(e){return arguments.length?(r="function"==typeof e?e:JE([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),p):r},p.scaleExtent=function(e){return arguments.length?(s[0]=+e[0],s[1]=+e[1],p):[s[0],s[1]]},p.translateExtent=function(e){return arguments.length?(u[0][0]=+e[0][0],u[1][0]=+e[1][0],u[0][1]=+e[0][1],u[1][1]=+e[1][1],p):[[u[0][0],u[0][1]],[u[1][0],u[1][1]]]},p.constrain=function(e){return arguments.length?(i=e,p):i},p.duration=function(e){return arguments.length?(c=+e,p):c},p.interpolate=function(e){return arguments.length?(l=e,p):l},p.on=function(){var e=f.on.apply(f,arguments);return e===f?p:e},p.clickDistance=function(e){return arguments.length?(_=(e=+e)*e,p):Math.sqrt(_)},p};n.d(t,"version",(function(){return"5.12.0"})),n.d(t,"bisect",(function(){return u})),n.d(t,"bisectRight",(function(){return a})),n.d(t,"bisectLeft",(function(){return s})),n.d(t,"ascending",(function(){return r})),n.d(t,"bisector",(function(){return i})),n.d(t,"cross",(function(){return f})),n.d(t,"descending",(function(){return h})),n.d(t,"deviation",(function(){return p})),n.d(t,"extent",(function(){return m})),n.d(t,"histogram",(function(){return O})),n.d(t,"thresholdFreedmanDiaconis",(function(){return j})),n.d(t,"thresholdScott",(function(){return z})),n.d(t,"thresholdSturges",(function(){return k})),n.d(t,"max",(function(){return N})),n.d(t,"mean",(function(){return P})),n.d(t,"median",(function(){return R})),n.d(t,"merge",(function(){return D})),n.d(t,"min",(function(){return I})),n.d(t,"pairs",(function(){return c})),n.d(t,"permute",(function(){return U})),n.d(t,"quantile",(function(){return L})),n.d(t,"range",(function(){return w})),n.d(t,"scan",(function(){return F})),n.d(t,"shuffle",(function(){return H})),n.d(t,"sum",(function(){return B})),n.d(t,"ticks",(function(){return S})),n.d(t,"tickIncrement",(function(){return T})),n.d(t,"tickStep",(function(){return C})),n.d(t,"transpose",(function(){return V})),n.d(t,"variance",(function(){return _})),n.d(t,"zip",(function(){return Y})),n.d(t,"axisTop",(function(){return oe})),n.d(t,"axisRight",(function(){return ae})),n.d(t,"axisBottom",(function(){return se})),n.d(t,"axisLeft",(function(){return ue})),n.d(t,"brush",(function(){return wa})),n.d(t,"brushX",(function(){return ba})),n.d(t,"brushY",(function(){return xa})),n.d(t,"brushSelection",(function(){return ya})),n.d(t,"chord",(function(){return La})),n.d(t,"ribbon",(function(){return Ya})),n.d(t,"nest",(function(){return Za})),n.d(t,"set",(function(){return rs})),n.d(t,"map",(function(){return Wa})),n.d(t,"keys",(function(){return is})),n.d(t,"values",(function(){return os})),n.d(t,"entries",(function(){return as})),n.d(t,"color",(function(){return dn})),n.d(t,"rgb",(function(){return vn})),n.d(t,"hsl",(function(){return An})),n.d(t,"lab",(function(){return Er})),n.d(t,"hcl",(function(){return Lr})),n.d(t,"lch",(function(){return Or})),n.d(t,"gray",(function(){return wr})),n.d(t,"cubehelix",(function(){return qr})),n.d(t,"contours",(function(){return ms})),n.d(t,"contourDensity",(function(){return ws})),n.d(t,"dispatch",(function(){return pe})),n.d(t,"drag",(function(){return Zt})),n.d(t,"dragDisable",(function(){return Ht})),n.d(t,"dragEnable",(function(){return Bt})),n.d(t,"dsvFormat",(function(){return js})),n.d(t,"csvParse",(function(){return Ns})),n.d(t,"csvParseRows",(function(){return Ps})),n.d(t,"csvFormat",(function(){return Rs})),n.d(t,"csvFormatBody",(function(){return Ds})),n.d(t,"csvFormatRows",(function(){return Is})),n.d(t,"tsvParse",(function(){return Fs})),n.d(t,"tsvParseRows",(function(){return Hs})),n.d(t,"tsvFormat",(function(){return Bs})),n.d(t,"tsvFormatBody",(function(){return Vs})),n.d(t,"tsvFormatRows",(function(){return qs})),n.d(t,"autoType",(function(){return Ys})),n.d(t,"easeLinear",(function(){return io})),n.d(t,"easeQuad",(function(){return so})),n.d(t,"easeQuadIn",(function(){return oo})),n.d(t,"easeQuadOut",(function(){return ao})),n.d(t,"easeQuadInOut",(function(){return so})),n.d(t,"easeCubic",(function(){return lo})),n.d(t,"easeCubicIn",(function(){return uo})),n.d(t,"easeCubicOut",(function(){return co})),n.d(t,"easeCubicInOut",(function(){return lo})),n.d(t,"easePoly",(function(){return _o})),n.d(t,"easePolyIn",(function(){return fo})),n.d(t,"easePolyOut",(function(){return ho})),n.d(t,"easePolyInOut",(function(){return _o})),n.d(t,"easeSin",(function(){return yo})),n.d(t,"easeSinIn",(function(){return vo})),n.d(t,"easeSinOut",(function(){return go})),n.d(t,"easeSinInOut",(function(){return yo})),n.d(t,"easeExp",(function(){return wo})),n.d(t,"easeExpIn",(function(){return bo})),n.d(t,"easeExpOut",(function(){return xo})),n.d(t,"easeExpInOut",(function(){return wo})),n.d(t,"easeCircle",(function(){return Mo})),n.d(t,"easeCircleIn",(function(){return Eo})),n.d(t,"easeCircleOut",(function(){return Ao})),n.d(t,"easeCircleInOut",(function(){return Mo})),n.d(t,"easeBounce",(function(){return Do})),n.d(t,"easeBounceIn",(function(){return Ro})),n.d(t,"easeBounceOut",(function(){return Do})),n.d(t,"easeBounceInOut",(function(){return Io})),n.d(t,"easeBack",(function(){return Ho})),n.d(t,"easeBackIn",(function(){return Uo})),n.d(t,"easeBackOut",(function(){return Fo})),n.d(t,"easeBackInOut",(function(){return Ho})),n.d(t,"easeElastic",(function(){return qo})),n.d(t,"easeElasticIn",(function(){return Vo})),n.d(t,"easeElasticOut",(function(){return qo})),n.d(t,"easeElasticInOut",(function(){return Yo})),n.d(t,"blob",(function(){return Gs})),n.d(t,"buffer",(function(){return Zs})),n.d(t,"dsv",(function(){return Js})),n.d(t,"csv",(function(){return eu})),n.d(t,"tsv",(function(){return tu})),n.d(t,"image",(function(){return nu})),n.d(t,"json",(function(){return iu})),n.d(t,"text",(function(){return Ks})),n.d(t,"xml",(function(){return au})),n.d(t,"html",(function(){return su})),n.d(t,"svg",(function(){return uu})),n.d(t,"forceCenter",(function(){return cu})),n.d(t,"forceCollide",(function(){return wu})),n.d(t,"forceLink",(function(){return Mu})),n.d(t,"forceManyBody",(function(){return Lu})),n.d(t,"forceRadial",(function(){return ju})),n.d(t,"forceSimulation",(function(){return Ou})),n.d(t,"forceX",(function(){return zu})),n.d(t,"forceY",(function(){return Nu})),n.d(t,"formatDefaultLocale",(function(){return Ku})),n.d(t,"format",(function(){return Bu})),n.d(t,"formatPrefix",(function(){return Vu})),n.d(t,"formatLocale",(function(){return $u})),n.d(t,"formatSpecifier",(function(){return Iu})),n.d(t,"FormatSpecifier",(function(){return Uu})),n.d(t,"precisionFixed",(function(){return Qu})),n.d(t,"precisionPrefix",(function(){return Ju})),n.d(t,"precisionRound",(function(){return ec})),n.d(t,"geoArea",(function(){return Gc})),n.d(t,"geoBounds",(function(){return Ul})),n.d(t,"geoCentroid",(function(){return Kl})),n.d(t,"geoCircle",(function(){return cf})),n.d(t,"geoClipAntimeridian",(function(){return xf})),n.d(t,"geoClipCircle",(function(){return wf})),n.d(t,"geoClipExtent",(function(){return Of})),n.d(t,"geoClipRectangle",(function(){return Sf})),n.d(t,"geoContains",(function(){return Wf})),n.d(t,"geoDistance",(function(){return Uf})),n.d(t,"geoGraticule",(function(){return Kf})),n.d(t,"geoGraticule10",(function(){return Qf})),n.d(t,"geoInterpolate",(function(){return rh})),n.d(t,"geoLength",(function(){return Rf})),n.d(t,"geoPath",(function(){return td})),n.d(t,"geoAlbers",(function(){return xd})),n.d(t,"geoAlbersUsa",(function(){return wd})),n.d(t,"geoAzimuthalEqualArea",(function(){return Sd})),n.d(t,"geoAzimuthalEqualAreaRaw",(function(){return Md})),n.d(t,"geoAzimuthalEquidistant",(function(){return Cd})),n.d(t,"geoAzimuthalEquidistantRaw",(function(){return Td})),n.d(t,"geoConicConformal",(function(){return Nd})),n.d(t,"geoConicConformalRaw",(function(){return zd})),n.d(t,"geoConicEqualArea",(function(){return bd})),n.d(t,"geoConicEqualAreaRaw",(function(){return yd})),n.d(t,"geoConicEquidistant",(function(){return Id})),n.d(t,"geoConicEquidistantRaw",(function(){return Dd})),n.d(t,"geoEqualEarth",(function(){return Yd})),n.d(t,"geoEqualEarthRaw",(function(){return qd})),n.d(t,"geoEquirectangular",(function(){return Rd})),n.d(t,"geoEquirectangularRaw",(function(){return Pd})),n.d(t,"geoGnomonic",(function(){return Gd})),n.d(t,"geoGnomonicRaw",(function(){return Xd})),n.d(t,"geoIdentity",(function(){return Zd})),n.d(t,"geoProjection",(function(){return md})),n.d(t,"geoProjectionMutator",(function(){return vd})),n.d(t,"geoMercator",(function(){return Od})),n.d(t,"geoMercatorRaw",(function(){return kd})),n.d(t,"geoNaturalEarth1",(function(){return Kd})),n.d(t,"geoNaturalEarth1Raw",(function(){return $d})),n.d(t,"geoOrthographic",(function(){return Jd})),n.d(t,"geoOrthographicRaw",(function(){return Qd})),n.d(t,"geoStereographic",(function(){return t_})),n.d(t,"geoStereographicRaw",(function(){return e_})),n.d(t,"geoTransverseMercator",(function(){return r_})),n.d(t,"geoTransverseMercatorRaw",(function(){return n_})),n.d(t,"geoRotation",(function(){return af})),n.d(t,"geoStream",(function(){return Uc})),n.d(t,"geoTransform",(function(){return nd})),n.d(t,"cluster",(function(){return s_})),n.d(t,"hierarchy",(function(){return c_})),n.d(t,"pack",(function(){return N_})),n.d(t,"packSiblings",(function(){return C_})),n.d(t,"packEnclose",(function(){return p_})),n.d(t,"partition",(function(){return F_})),n.d(t,"stratify",(function(){return X_})),n.d(t,"tree",(function(){return J_})),n.d(t,"treemap",(function(){return ip})),n.d(t,"treemapBinary",(function(){return op})),n.d(t,"treemapDice",(function(){return U_})),n.d(t,"treemapSlice",(function(){return ep})),n.d(t,"treemapSliceDice",(function(){return ap})),n.d(t,"treemapSquarify",(function(){return rp})),n.d(t,"treemapResquarify",(function(){return sp})),n.d(t,"interpolate",(function(){return $n})),n.d(t,"interpolateArray",(function(){return Un})),n.d(t,"interpolateBasis",(function(){return Cn})),n.d(t,"interpolateBasisClosed",(function(){return kn})),n.d(t,"interpolateDate",(function(){return Fn})),n.d(t,"interpolateDiscrete",(function(){return Kn})),n.d(t,"interpolateHue",(function(){return Qn})),n.d(t,"interpolateNumber",(function(){return Hn})),n.d(t,"interpolateObject",(function(){return Bn})),n.d(t,"interpolateRound",(function(){return Jn})),n.d(t,"interpolateString",(function(){return Zn})),n.d(t,"interpolateTransformCss",(function(){return ir})),n.d(t,"interpolateTransformSvg",(function(){return or})),n.d(t,"interpolateZoom",(function(){return ur})),n.d(t,"interpolateRgb",(function(){return Pn})),n.d(t,"interpolateRgbBasis",(function(){return Dn})),n.d(t,"interpolateRgbBasisClosed",(function(){return In})),n.d(t,"interpolateHsl",(function(){return lr})),n.d(t,"interpolateHslLong",(function(){return fr})),n.d(t,"interpolateLab",(function(){return Nr})),n.d(t,"interpolateHcl",(function(){return Rr})),n.d(t,"interpolateHclLong",(function(){return Dr})),n.d(t,"interpolateCubehelix",(function(){return Gr})),n.d(t,"interpolateCubehelixLong",(function(){return Wr})),n.d(t,"piecewise",(function(){return Zr})),n.d(t,"quantize",(function(){return Qr})),n.d(t,"path",(function(){return Ua})),n.d(t,"polygonArea",(function(){return up})),n.d(t,"polygonCentroid",(function(){return cp})),n.d(t,"polygonHull",(function(){return dp})),n.d(t,"polygonContains",(function(){return _p})),n.d(t,"polygonLength",(function(){return pp})),n.d(t,"quadtree",(function(){return mu})),n.d(t,"randomUniform",(function(){return vp})),n.d(t,"randomNormal",(function(){return gp})),n.d(t,"randomLogNormal",(function(){return yp})),n.d(t,"randomBates",(function(){return xp})),n.d(t,"randomIrwinHall",(function(){return bp})),n.d(t,"randomExponential",(function(){return wp})),n.d(t,"scaleBand",(function(){return Op})),n.d(t,"scalePoint",(function(){return Lp})),n.d(t,"scaleIdentity",(function(){return Xp})),n.d(t,"scaleLinear",(function(){return Yp})),n.d(t,"scaleLog",(function(){return tm})),n.d(t,"scaleSymlog",(function(){return om})),n.d(t,"scaleOrdinal",(function(){return kp})),n.d(t,"scaleImplicit",(function(){return Cp})),n.d(t,"scalePow",(function(){return lm})),n.d(t,"scaleSqrt",(function(){return fm})),n.d(t,"scaleQuantile",(function(){return hm})),n.d(t,"scaleQuantize",(function(){return dm})),n.d(t,"scaleThreshold",(function(){return _m})),n.d(t,"scaleTime",(function(){return ey})),n.d(t,"scaleUtc",(function(){return ly})),n.d(t,"scaleSequential",(function(){return dy})),n.d(t,"scaleSequentialLog",(function(){return _y})),n.d(t,"scaleSequentialPow",(function(){return my})),n.d(t,"scaleSequentialSqrt",(function(){return vy})),n.d(t,"scaleSequentialSymlog",(function(){return py})),n.d(t,"scaleSequentialQuantile",(function(){return gy})),n.d(t,"scaleDiverging",(function(){return by})),n.d(t,"scaleDivergingLog",(function(){return xy})),n.d(t,"scaleDivergingPow",(function(){return Ey})),n.d(t,"scaleDivergingSqrt",(function(){return Ay})),n.d(t,"scaleDivergingSymlog",(function(){return wy})),n.d(t,"tickFormat",(function(){return Vp})),n.d(t,"schemeCategory10",(function(){return Sy})),n.d(t,"schemeAccent",(function(){return Ty})),n.d(t,"schemeDark2",(function(){return Cy})),n.d(t,"schemePaired",(function(){return ky})),n.d(t,"schemePastel1",(function(){return Oy})),n.d(t,"schemePastel2",(function(){return Ly})),n.d(t,"schemeSet1",(function(){return jy})),n.d(t,"schemeSet2",(function(){return zy})),n.d(t,"schemeSet3",(function(){return Ny})),n.d(t,"schemeTableau10",(function(){return Py})),n.d(t,"interpolateBrBG",(function(){return Iy})),n.d(t,"schemeBrBG",(function(){return Dy})),n.d(t,"interpolatePRGn",(function(){return Fy})),n.d(t,"schemePRGn",(function(){return Uy})),n.d(t,"interpolatePiYG",(function(){return By})),n.d(t,"schemePiYG",(function(){return Hy})),n.d(t,"interpolatePuOr",(function(){return qy})),n.d(t,"schemePuOr",(function(){return Vy})),n.d(t,"interpolateRdBu",(function(){return Xy})),n.d(t,"schemeRdBu",(function(){return Yy})),n.d(t,"interpolateRdGy",(function(){return Wy})),n.d(t,"schemeRdGy",(function(){return Gy})),n.d(t,"interpolateRdYlBu",(function(){return $y})),n.d(t,"schemeRdYlBu",(function(){return Zy})),n.d(t,"interpolateRdYlGn",(function(){return Qy})),n.d(t,"schemeRdYlGn",(function(){return Ky})),n.d(t,"interpolateSpectral",(function(){return eb})),n.d(t,"schemeSpectral",(function(){return Jy})),n.d(t,"interpolateBuGn",(function(){return nb})),n.d(t,"schemeBuGn",(function(){return tb})),n.d(t,"interpolateBuPu",(function(){return ib})),n.d(t,"schemeBuPu",(function(){return rb})),n.d(t,"interpolateGnBu",(function(){return ab})),n.d(t,"schemeGnBu",(function(){return ob})),n.d(t,"interpolateOrRd",(function(){return ub})),n.d(t,"schemeOrRd",(function(){return sb})),n.d(t,"interpolatePuBuGn",(function(){return lb})),n.d(t,"schemePuBuGn",(function(){return cb})),n.d(t,"interpolatePuBu",(function(){return hb})),n.d(t,"schemePuBu",(function(){return fb})),n.d(t,"interpolatePuRd",(function(){return _b})),n.d(t,"schemePuRd",(function(){return db})),n.d(t,"interpolateRdPu",(function(){return mb})),n.d(t,"schemeRdPu",(function(){return pb})),n.d(t,"interpolateYlGnBu",(function(){return gb})),n.d(t,"schemeYlGnBu",(function(){return vb})),n.d(t,"interpolateYlGn",(function(){return bb})),n.d(t,"schemeYlGn",(function(){return yb})),n.d(t,"interpolateYlOrBr",(function(){return wb})),n.d(t,"schemeYlOrBr",(function(){return xb})),n.d(t,"interpolateYlOrRd",(function(){return Ab})),n.d(t,"schemeYlOrRd",(function(){return Eb})),n.d(t,"interpolateBlues",(function(){return Sb})),n.d(t,"schemeBlues",(function(){return Mb})),n.d(t,"interpolateGreens",(function(){return Cb})),n.d(t,"schemeGreens",(function(){return Tb})),n.d(t,"interpolateGreys",(function(){return Ob})),n.d(t,"schemeGreys",(function(){return kb})),n.d(t,"interpolatePurples",(function(){return jb})),n.d(t,"schemePurples",(function(){return Lb})),n.d(t,"interpolateReds",(function(){return Nb})),n.d(t,"schemeReds",(function(){return zb})),n.d(t,"interpolateOranges",(function(){return Rb})),n.d(t,"schemeOranges",(function(){return Pb})),n.d(t,"interpolateCividis",(function(){return Db})),n.d(t,"interpolateCubehelixDefault",(function(){return Ib})),n.d(t,"interpolateRainbow",(function(){return Bb})),n.d(t,"interpolateWarm",(function(){return Ub})),n.d(t,"interpolateCool",(function(){return Fb})),n.d(t,"interpolateSinebow",(function(){return Xb})),n.d(t,"interpolateTurbo",(function(){return Gb})),n.d(t,"interpolateViridis",(function(){return Zb})),n.d(t,"interpolateMagma",(function(){return $b})),n.d(t,"interpolateInferno",(function(){return Kb})),n.d(t,"interpolatePlasma",(function(){return Qb})),n.d(t,"create",(function(){return kt})),n.d(t,"creator",(function(){return xe})),n.d(t,"local",(function(){return Lt})),n.d(t,"matcher",(function(){return Se})),n.d(t,"mouse",(function(){return Pt})),n.d(t,"namespace",(function(){return ge})),n.d(t,"namespaces",(function(){return ve})),n.d(t,"clientPoint",(function(){return Nt})),n.d(t,"select",(function(){return Ct})),n.d(t,"selectAll",(function(){return Rt})),n.d(t,"selection",(function(){return Tt})),n.d(t,"selector",(function(){return Ee})),n.d(t,"selectorAll",(function(){return Me})),n.d(t,"style",(function(){return Ve})),n.d(t,"touch",(function(){return Dt})),n.d(t,"touches",(function(){return It})),n.d(t,"window",(function(){return Ue})),n.d(t,"event",(function(){return _t})),n.d(t,"customEvent",(function(){return bt})),n.d(t,"arc",(function(){return gx})),n.d(t,"area",(function(){return Ax})),n.d(t,"line",(function(){return Ex})),n.d(t,"pie",(function(){return Tx})),n.d(t,"areaRadial",(function(){return zx})),n.d(t,"radialArea",(function(){return zx})),n.d(t,"lineRadial",(function(){return jx})),n.d(t,"radialLine",(function(){return jx})),n.d(t,"pointRadial",(function(){return Nx})),n.d(t,"linkHorizontal",(function(){return Bx})),n.d(t,"linkVertical",(function(){return Vx})),n.d(t,"linkRadial",(function(){return qx})),n.d(t,"symbol",(function(){return uw})),n.d(t,"symbols",(function(){return sw})),n.d(t,"symbolCircle",(function(){return Yx})),n.d(t,"symbolCross",(function(){return Xx})),n.d(t,"symbolDiamond",(function(){return Zx})),n.d(t,"symbolSquare",(function(){return ew})),n.d(t,"symbolStar",(function(){return Jx})),n.d(t,"symbolTriangle",(function(){return nw})),n.d(t,"symbolWye",(function(){return aw})),n.d(t,"curveBasisClosed",(function(){return _w})),n.d(t,"curveBasisOpen",(function(){return mw})),n.d(t,"curveBasis",(function(){return hw})),n.d(t,"curveBundle",(function(){return gw})),n.d(t,"curveCardinalClosed",(function(){return Ew})),n.d(t,"curveCardinalOpen",(function(){return Mw})),n.d(t,"curveCardinal",(function(){return xw})),n.d(t,"curveCatmullRomClosed",(function(){return Ow})),n.d(t,"curveCatmullRomOpen",(function(){return jw})),n.d(t,"curveCatmullRom",(function(){return Cw})),n.d(t,"curveLinearClosed",(function(){return Nw})),n.d(t,"curveLinear",(function(){return bx})),n.d(t,"curveMonotoneX",(function(){return Bw})),n.d(t,"curveMonotoneY",(function(){return Vw})),n.d(t,"curveNatural",(function(){return Xw})),n.d(t,"curveStep",(function(){return Ww})),n.d(t,"curveStepAfter",(function(){return $w})),n.d(t,"curveStepBefore",(function(){return Zw})),n.d(t,"stack",(function(){return eE})),n.d(t,"stackOffsetExpand",(function(){return tE})),n.d(t,"stackOffsetDiverging",(function(){return nE})),n.d(t,"stackOffsetNone",(function(){return Kw})),n.d(t,"stackOffsetSilhouette",(function(){return rE})),n.d(t,"stackOffsetWiggle",(function(){return iE})),n.d(t,"stackOrderAppearance",(function(){return oE})),n.d(t,"stackOrderAscending",(function(){return sE})),n.d(t,"stackOrderDescending",(function(){return cE})),n.d(t,"stackOrderInsideOut",(function(){return lE})),n.d(t,"stackOrderNone",(function(){return Qw})),n.d(t,"stackOrderReverse",(function(){return fE})),n.d(t,"timeInterval",(function(){return vm})),n.d(t,"timeMillisecond",(function(){return ev})),n.d(t,"timeMilliseconds",(function(){return tv})),n.d(t,"utcMillisecond",(function(){return ev})),n.d(t,"utcMilliseconds",(function(){return tv})),n.d(t,"timeSecond",(function(){return Km})),n.d(t,"timeSeconds",(function(){return Qm})),n.d(t,"utcSecond",(function(){return Km})),n.d(t,"utcSeconds",(function(){return Qm})),n.d(t,"timeMinute",(function(){return Wm})),n.d(t,"timeMinutes",(function(){return Zm})),n.d(t,"timeHour",(function(){return Ym})),n.d(t,"timeHours",(function(){return Xm})),n.d(t,"timeDay",(function(){return Bm})),n.d(t,"timeDays",(function(){return Vm})),n.d(t,"timeWeek",(function(){return Tm})),n.d(t,"timeWeeks",(function(){return Nm})),n.d(t,"timeSunday",(function(){return Tm})),n.d(t,"timeSundays",(function(){return Nm})),n.d(t,"timeMonday",(function(){return Cm})),n.d(t,"timeMondays",(function(){return Pm})),n.d(t,"timeTuesday",(function(){return km})),n.d(t,"timeTuesdays",(function(){return Rm})),n.d(t,"timeWednesday",(function(){return Om})),n.d(t,"timeWednesdays",(function(){return Dm})),n.d(t,"timeThursday",(function(){return Lm})),n.d(t,"timeThursdays",(function(){return Im})),n.d(t,"timeFriday",(function(){return jm})),n.d(t,"timeFridays",(function(){return Um})),n.d(t,"timeSaturday",(function(){return zm})),n.d(t,"timeSaturdays",(function(){return Fm})),n.d(t,"timeMonth",(function(){return wm})),n.d(t,"timeMonths",(function(){return Em})),n.d(t,"timeYear",(function(){return ym})),n.d(t,"timeYears",(function(){return bm})),n.d(t,"utcMinute",(function(){return uy})),n.d(t,"utcMinutes",(function(){return cy})),n.d(t,"utcHour",(function(){return oy})),n.d(t,"utcHours",(function(){return ay})),n.d(t,"utcDay",(function(){return gv})),n.d(t,"utcDays",(function(){return yv})),n.d(t,"utcWeek",(function(){return rv})),n.d(t,"utcWeeks",(function(){return lv})),n.d(t,"utcSunday",(function(){return rv})),n.d(t,"utcSundays",(function(){return lv})),n.d(t,"utcMonday",(function(){return iv})),n.d(t,"utcMondays",(function(){return fv})),n.d(t,"utcTuesday",(function(){return ov})),n.d(t,"utcTuesdays",(function(){return hv})),n.d(t,"utcWednesday",(function(){return av})),n.d(t,"utcWednesdays",(function(){return dv})),n.d(t,"utcThursday",(function(){return sv})),n.d(t,"utcThursdays",(function(){return _v})),n.d(t,"utcFriday",(function(){return uv})),n.d(t,"utcFridays",(function(){return pv})),n.d(t,"utcSaturday",(function(){return cv})),n.d(t,"utcSaturdays",(function(){return mv})),n.d(t,"utcMonth",(function(){return ny})),n.d(t,"utcMonths",(function(){return ry})),n.d(t,"utcYear",(function(){return xv})),n.d(t,"utcYears",(function(){return wv})),n.d(t,"timeFormatDefaultLocale",(function(){return Vg})),n.d(t,"timeFormat",(function(){return Cv})),n.d(t,"timeParse",(function(){return kv})),n.d(t,"utcFormat",(function(){return Ov})),n.d(t,"utcParse",(function(){return Lv})),n.d(t,"timeFormatLocale",(function(){return Sv})),n.d(t,"isoFormat",(function(){return hE})),n.d(t,"isoParse",(function(){return dE})),n.d(t,"now",(function(){return ui})),n.d(t,"timer",(function(){return fi})),n.d(t,"timerFlush",(function(){return hi})),n.d(t,"timeout",(function(){return mi})),n.d(t,"interval",(function(){return vi})),n.d(t,"transition",(function(){return to})),n.d(t,"active",(function(){return Zo})),n.d(t,"interrupt",(function(){return Li})),n.d(t,"voronoi",(function(){return QE})),n.d(t,"zoom",(function(){return hA})),n.d(t,"zoomTransform",(function(){return rA})),n.d(t,"zoomIdentity",(function(){return nA}))},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(21)),r(n(65)),r(n(15)),r(n(16)),r(n(8))},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(2)),o=r(n(19)),a=r(n(22)),s=r(n(23)),u=r(n(0)),c=r(n(24)),l=n(8),f=n(15),h=n(1),d=n(1),_=n(16),p=n(3),m=n(45),v=n(46);n(47);const g=n(52);window.THREE=u;const y=n(4);n(53),n(54),n(55),n(56),n(57),n(58);const b={"screen-fragment":n(59).default,"screen-vertex":n(60).default,"volr-fragment":n(61).default,"volr-vertex":n(62).default,"shadow-fragment":n(63).default,"shadow-vertex":n(64).default,"box-fragment":n(17).default,"box-vertex":n(18).default};function x(e,t){return function(){const n=[this].concat([].slice.call(arguments));e.apply(t,n)}}class w{constructor(e,t){this.a=document.createElement("a"),this.a.className="ipyvolume-toolicon",this.a.setAttribute("href","javascript:void(0)"),this.li=document.createElement("li"),this.li.className="fa "+e,this.sub=document.createElement("div"),this.sub.className="ipyvolume-toolicon-dropdown-container",this.a.appendChild(this.li),this.a.appendChild(this.sub),t.appendChild(this.a)}active(e){e?this.li.classList.remove("fa-inactive"):this.li.classList.add("fa-inactive")}}class E{constructor(e,t,n){this.a=document.createElement("a"),this.a.className="ipyvolume-toolicon-dropdown",this.a.setAttribute("href","javascript:void(0)"),this.li=document.createElement("li"),this.li.className="fa "+e,this.span_text=document.createElement("span"),this.span_text.innerText=n,this.a.appendChild(this.li),this.li.appendChild(this.span_text),t.appendChild(this.a)}active(e){e?this.a.classList.remove("ipyvolume-toolicon-inactive"):this.a.classList.add("ipyvolume-toolicon-inactive")}}class A extends i.DOMWidgetModel{defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:"FigureModel",_view_name:"FigureView",_model_module:"ipyvolume",_view_module:"ipyvolume",_model_module_version:d.semver_range,_view_module_version:d.semver_range,eye_separation:6.4,stereo:!1,camera_control:"trackball",camera_fov:45,camera_center:[0,0,0],ambient_coefficient:.5,diffuse_coefficient:.8,specular_coefficient:.5,specular_exponent:5,width:500,height:400,pixel_ratio:null,displayscale:1,scatters:null,meshes:null,lights:[],volumes:null,show:"render",scales:{},xlabel:"x",ylabel:"y",zlabel:"z",animation:1e3,animation_exponent:1,style:g.light,render_continuous:!1,selector:"lasso",selection_mode:"replace",mouse_mode:"normal",panorama_mode:"no",capture_fps:null,cube_resolution:512,box_center:[.5,.5,.5],box_size:[1,1,1],popup_debouce:100,slice_x:0,slice_y:0,slice_z:0,_shaders:{}})}}t.FigureModel=A,A.serializers=Object.assign(Object.assign({},i.DOMWidgetModel.serializers),{scatters:{deserialize:i.unpack_models},meshes:{deserialize:i.unpack_models},lights:{deserialize:i.unpack_models},volumes:{deserialize:i.unpack_models},camera:{deserialize:i.unpack_models},scene:{deserialize:i.unpack_models},controls:{deserialize:i.unpack_models},scales:{deserialize:i.unpack_models}});class M extends i.DOMWidgetView{constructor(){super(...arguments),this.control_external=null,this.rootObject=null}readPixel(e,t){return this.readPixelFrom(this.screen_texture,e,t)}readId(e,t){const[n,r,i,o]=this.readPixelFrom(this.id_pass_target,e,t);return n+256*r+256*i*256}readPixelFrom(e,t,n){const r=new Uint8Array(4),i=this.renderer.domElement.clientHeight,o=this.model.get("pixel_ratio")||window.devicePixelRatio;return this.renderer.readRenderTargetPixels(e,t*o,(i-n)*o,1,1,r),r}render(){this.transitions=[],this._update_requested=!1,this.update_counter=0;const e=this.model.get("width"),t=this.model.get("height");this.toolbar_div=document.createElement("div"),this.el.appendChild(this.toolbar_div);const n=this._special_keys_down.bind(this),r=this._special_keys_up.bind(this);document.addEventListener("keydown",n),document.addEventListener("keyup",r),this.once("remove",()=>{document.removeEventListener("keydown",n),document.removeEventListener("keyup",r)}),this.fullscreen_icon=new w("fa-arrows-alt",this.toolbar_div),this.fullscreen_icon.a.title="Fullscreen",this.fullscreen_icon.a.onclick=()=>{const e=this.renderer.domElement,t=e.style.width,n=e.style.height,r=()=>{s.isFullscreen?(e.style.width="100vw",e.style.height="100vh"):(e.style.width=t,e.style.height=n,s.off("change",r)),this.update_size()};s.onchange(r),s.request(e)},this.stereo_icon=new w("fa-eye",this.toolbar_div),this.stereo_icon.a.title="Stereoscopic view",this.stereo_icon.a.onclick=()=>{this.model.set("stereo",!this.model.get("stereo")),this.model.save_changes()},this.stereo_icon.active(this.model.get("stereo")),this.model.on("change:stereo",()=>{this.stereo_icon.active(this.model.get("stereo"))}),this.screenshot_icon=new w("fa-picture-o",this.toolbar_div),this.screenshot_icon.a.title="Take a screenshot (hold shift to copy to clipboard)",this.screenshot_icon.a.onclick=e=>{try{const t=this.screenshot();e.shiftKey?h.copy_image_to_clipboard(t):h.download_image(t)}finally{e.preventDefault()}return!1},window.ipvss=()=>{return this.screenshot()},this.camera_control_icon=new w("fa-arrow-up",this.toolbar_div),this.camera_control_icon.a.title="Camera locked to 'up' axis (orbit), instead of trackball mode",this.camera_control_icon.a.onclick=()=>{"trackball"===this.model.get("camera_control")?(this.model.set("camera_control","orbit"),this.camera_control_icon.active(!0)):(this.model.set("camera_control","trackball"),this.camera_control_icon.active(!1)),this.touch()},this.camera_control_icon.active(!1),this.select_icon=new w("fa-pencil-square-o",this.toolbar_div),this.select_icon.a.title="Select mode (auto when control key is pressed)",this.select_icon.a.onclick=()=>{"select"===this.model.get("mouse_mode")?this.model.set("mouse_mode","normal"):this.model.set("mouse_mode","select"),this.update_icons(),this.touch()},this.select_icon.active(!1),this.select_icon_lasso=new E("fa-vine",this.select_icon.sub,"Lasso selector"),this.select_icon_circle=new E("fa-circle",this.select_icon.sub,"Circle selector"),this.select_icon_rectangle=new E("fa-square",this.select_icon.sub,"Rectangle selector"),this.select_icon_lasso.a.onclick=e=>{e.stopPropagation(),this.model.set("mouse_mode","select"),this.model.set("selector","lasso"),this.touch()},this.select_icon_circle.a.onclick=e=>{e.stopPropagation(),this.model.set("mouse_mode","select"),this.model.set("selector","circle"),this.touch()},this.select_icon_rectangle.a.onclick=e=>{e.stopPropagation(),this.model.set("mouse_mode","select"),this.model.set("selector","rectangle"),this.touch()},this.zoom_icon=new w("fa-search-plus",this.toolbar_div),this.zoom_icon.a.title="Zoom mode (auto when control key is pressed, use scrolling)",this.zoom_icon.a.onclick=()=>{"zoom"===this.model.get("mouse_mode")?this.model.set("mouse_mode","normal"):this.model.set("mouse_mode","zoom"),this.touch()},this.slice_icon=new w("fa-cut",this.toolbar_div),this.slice_icon.a.title="Set slice coordinate by hovering or clicking the edges of the bounding box",this.slice_icon.a.onclick=()=>{"slice"===this.model.get("mouse_mode")?this.model.set("mouse_mode","normal"):this.model.set("mouse_mode","slice"),this.touch()},this.quick_mouse_mode_change=!1,this.quick_mouse_previous_mode=this.model.get("mouse_mode"),this.update_icons(),this.model.on("change:mouse_mode change:selector",this.update_icons,this),this.model.on("change:mouse_mode change:selector",this.update_mouse_mode,this),this.reset_icon=new w("fa-home",this.toolbar_div),this.reset_icon.a.title="Reset view";this.model.get("camera_fov");this.reset_icon.a.onclick=()=>{this.camera.copy(this.camera_initial),this.camera.ipymodel&&this.camera.ipymodel.syncToModel(!0)},this.setting_icon=new w("fa-cog",this.toolbar_div),this.setting_icon_180=new E("fa-circle",this.setting_icon.sub,"180 degrees"),this.setting_icon_360=new E("fa-circle",this.setting_icon.sub,"360 degrees");const i=(e,t,n)=>{new E("fa-cogs",this.setting_icon.sub,e+" ("+t+"x"+n+")").a.onclick=e=>{this.model.set("width",t),this.model.set("height",n),this.touch()}};i("default",this.model.get("width"),this.model.get("height")),i("small",500,400),i("medium",640,480),i("large",800,600),i("HD 720",1280,720),i("HD",1920,1080),i("2k",2048,1080),i("2k x 2k",2048,2048),i("4k UHD ",3840,2160),i("4k",4096,2160),i("4k x 4k",4096,4096);const o=e=>{new E("fa-compress",this.setting_icon.sub,"Scale canvas (down) by "+e).a.onclick=t=>{this.model.set("displayscale",1/e),this.touch()}};o(1),o(2),o(4),o(8),this.setting_icon_180.a.onclick=e=>{e.stopPropagation(),"180"===this.model.get("panorama_mode")?this.model.set("panorama_mode","no"):this.model.set("panorama_mode","180"),this.touch()},this.setting_icon_360.a.onclick=e=>{e.stopPropagation(),"360"===this.model.get("panorama_mode")?this.model.set("panorama_mode","no"):this.model.set("panorama_mode","360"),this.touch()},this.setting_icon_360.active("360"===this.model.get("panorama_mode")),this.setting_icon_180.active("180"===this.model.get("panorama_mode")),this.model.on("change:panorama_mode",()=>{this.setting_icon_360.active("360"===this.model.get("panorama_mode")),this.setting_icon_180.active("180"===this.model.get("panorama_mode")),this.update_panorama()}),this.el.classList.add("jupyter-widgets"),this.canvas_container=document.createElement("div"),this.canvas_overlay_container=document.createElement("div"),this.canvas_overlay=document.createElement("canvas"),this.canvas_overlay_container.appendChild(this.canvas_overlay),this.canvas_container.appendChild(this.canvas_overlay_container),this.renderer=new u.WebGLRenderer({alpha:!0,antialias:!0});this.renderer.setPixelRatio(this.model.get("pixel_ratio")||window.devicePixelRatio),this.listenTo(this.model,"change:pixel_ratio",()=>{this.renderer.setPixelRatio(this.model.get("pixel_ratio")||window.devicePixelRatio),this._update_size()}),this.canvas_renderer_container=document.createElement("div"),this.canvas_renderer_container.appendChild(this.renderer.domElement),this.popup_container=document.createElement("div"),this.popup_container.classList.add("ipyvolume-popup-container"),this.canvas_container.appendChild(this.canvas_renderer_container),this.canvas_container.appendChild(this.canvas_overlay_container),this.canvas_container.appendChild(this.popup_container),this.canvas_overlay_container.style.position="absolute",this.canvas_overlay_container.style.zIndex="2",this.canvas_overlay_container.style.pointerEvents="none",this.canvas_renderer_container.style.position="absolute",this.canvas_renderer_container.style.zIndex="1",this.canvas_container.classList.add("ipyvolume-canvas-container"),this.el.appendChild(this.canvas_container),this.el.setAttribute("tabindex","1"),this.el_mirror=document.createElement("div"),this.el.appendChild(this.el_mirror),this.el_axes=document.createElement("div"),this.el_mirror.appendChild(this.el_axes),this.renderer.domElement.addEventListener("wheel",this.mousewheel.bind(this),!1);if(this.model.get("camera"))this.camera=this.model.get("camera").obj,this.model.get("camera").on("change",()=>{if(!this.control_external){const e=new u.Vector3(0,1,0);e.applyQuaternion(this.camera.quaternion),this.camera.up=e,this.camera.lookAt(0,0,0),this.control_trackball.position0=this.camera.position.clone(),this.control_trackball.up0=this.camera.up.clone(),this.update()}});else{this.camera=new u.PerspectiveCamera(46,1,.01,1e4);const e=2*Math.tan(22.5*Math.PI/180)/Math.tan(this.model.get("camera_fov")/2*Math.PI/180);this.camera.position.z=e}this.camera_initial=this.camera.clone(),this.cube_camera=new u.CubeCamera(this.camera.near,this.camera.far,this.model.get("cube_resolution")),this.camera_stereo=new u.StereoCamera,this.renderer.setSize(e,t),this.renderer_stereo=new u.StereoEffect(this.renderer),this.renderer_selected=this.renderer_stereo;const a=(e,t,n,r,i,o,a)=>{const s=new u.Geometry;return s.vertices.push(new u.Vector3(e,t,n),new u.Vector3(r,i,o)),new u.Line(s,a)},c=(e,t,n,r)=>a(-.5,-.5,-.5,-.5+e,-.5+t,-.5+n,r);this.axes_material=new u.LineBasicMaterial({color:"cyan",linewidth:1}),this.xaxes_material=new u.LineBasicMaterial({color:"red",linewidth:1}),this.yaxes_material=new u.LineBasicMaterial({color:"green",linewidth:1}),this.zaxes_material=new u.LineBasicMaterial({color:"blue",linewidth:1}),this.x_axis=c(1,0,0,this.xaxes_material),this.y_axis=c(0,1,0,this.yaxes_material),this.z_axis=c(0,0,1,this.zaxes_material),this.axes=new u.Object3D,this.axes.add(this.x_axis),this.axes.add(this.y_axis),this.axes.add(this.z_axis),this.wire_box=new u.Object3D,this.wire_box_x_line=a(-.5,-.5,-.5,.5,-.5,-.5,this.axes_material),this.wire_box.add(this.wire_box_x_line),this.wire_box.add(a(-.5,.5,-.5,.5,.5,-.5,this.axes_material)),this.wire_box.add(a(-.5,-.5,.5,.5,-.5,.5,this.axes_material)),this.wire_box.add(a(-.5,.5,.5,.5,.5,.5,this.axes_material)),this.wire_box_y_line=a(-.5,-.5,-.5,-.5,.5,-.5,this.axes_material),this.wire_box.add(this.wire_box_y_line),this.wire_box.add(a(.5,-.5,-.5,.5,.5,-.5,this.axes_material)),this.wire_box.add(a(-.5,-.5,.5,-.5,.5,.5,this.axes_material)),this.wire_box.add(a(.5,-.5,.5,.5,.5,.5,this.axes_material)),this.wire_box_z_line=a(-.5,-.5,-.5,-.5,-.5,.5,this.axes_material),this.wire_box.add(this.wire_box_z_line),this.wire_box.add(a(.5,-.5,-.5,.5,-.5,.5,this.axes_material)),this.wire_box.add(a(-.5,.5,-.5,-.5,.5,.5,this.axes_material)),this.wire_box.add(a(.5,.5,-.5,.5,.5,.5,this.axes_material)),this.axes_data=[{name:"x",label:"x",object:null,object_label:null,translate:[0,-.5,-.5],rotate:[Math.PI/4,0,0],rotation_order:"XYZ",fillStyle:"#00FF00"},{name:"y",label:"y",object:null,object_label:null,translate:[-.5,0,-.5],rotate:[3*Math.PI/4,0,Math.PI/2],rotation_order:"ZXY",fillStyle:"#00FF00"},{name:"z",label:"z",object:null,object_label:null,translate:[-.5,-.5,0],rotate:[-Math.PI/8,-Math.PI/2,0],rotation_order:"YZX",fillStyle:"#00FF00"}],this.ticks=5,this.model.get("scene")?this.scene=this.model.get("scene").obj:this.scene=new u.Scene,this.scene.background=null,this.model.get("scene")&&this.model.get("scene").on("rerender",()=>this.update()),this.rootObject=new u.Object3D,this.rootObject.name="rootObject",this.scene.add(this.rootObject),this.scene.add(this.camera),this.scene_opaque=new u.Scene,this.scene_opaque.add(this.wire_box),this.scene_opaque.add(this.axes);const l=()=>{const e=new u.Vector3;e.fromArray(this.model.get("box_center")),e.sub(new u.Vector3(.5,.5,.5));const t=new u.Vector3;t.fromArray(this.model.get("box_size")),this.scene_opaque.scale.copy(t),this.scene_opaque.position.copy(e),this.rootObject.scale.copy(t),this.rootObject.position.copy(e),this.update()};this.model.on("change:box_center change:box_size",l),l(),this.front_box_material=new u.ShaderMaterial({uniforms:{offset:{type:"3f",value:[0,0,0]},scale:{type:"3f",value:[1,1,1]}},fragmentShader:b["box-fragment"],vertexShader:b["box-vertex"],side:u.BackSide}),this.front_box_geo=new u.BoxBufferGeometry(1,1,1),this.front_box_mesh=new u.Mesh(this.front_box_geo,this.front_box_material),this.front_box_mesh.name="Front object",this.rootObject.add(this.front_box_mesh),this.mesh_views={},this.scatter_views={},this.volume_views={};let f=e;const d=t;this.model.get("stereo")&&(f/=2),this.volume_back_target=new u.WebGLRenderTarget(f,d,{minFilter:u.LinearFilter,magFilter:u.LinearFilter,type:u.FloatType,format:u.RGBAFormat,generateMipmaps:!1}),this.volume_front_target=new u.WebGLRenderTarget(f,d,{minFilter:u.LinearFilter,magFilter:u.NearestFilter}),this.geometry_depth_target=new u.WebGLRenderTarget(f,d,{minFilter:u.LinearFilter,magFilter:u.LinearFilter,format:u.RGBAFormat,generateMipmaps:!1}),this.geometry_depth_target.depthTexture=new u.DepthTexture(1,1),this.geometry_depth_target.depthTexture.type=u.UnsignedShortType,this.id_pass_target=new u.WebGLRenderTarget(f,d,{minFilter:u.LinearFilter,magFilter:u.NearestFilter}),this.color_pass_target=new u.WebGLRenderTarget(f,d,{minFilter:u.LinearFilter,magFilter:u.LinearFilter}),this.screen_pass_target=new u.WebGLRenderTarget(f,d,{minFilter:u.LinearFilter,magFilter:u.LinearFilter}),this.coordinate_target=new u.WebGLRenderTarget(f,d,{minFilter:u.LinearFilter,magFilter:u.NearestFilter}),this.screen_texture=this.color_pass_target.texture,this.screen_scene=new u.Scene,this.screen_scene_cube=new u.Scene,this.screen_plane=new u.PlaneBufferGeometry(1,1),this.screen_material=new u.ShaderMaterial({uniforms:{tex:{type:"t",value:this.screen_pass_target.texture}},vertexShader:b["screen-vertex"],fragmentShader:b["screen-fragment"],depthWrite:!1}),this.screen_material_cube=new u.ShaderMaterial({uniforms:{tex:{type:"t",value:this.cube_camera.renderTarget.texture}},vertexShader:b["screen-vertex"],fragmentShader:b["screen-fragment"],defines:{},depthWrite:!1}),this.screen_mesh=new u.Mesh(this.screen_plane,this.screen_material),this.screen_mesh_cube=new u.Mesh(this.screen_plane,this.screen_material_cube),this.screen_scene.add(this.screen_mesh),this.screen_scene_cube.add(this.screen_mesh_cube),this.screen_camera=new u.OrthographicCamera(-.5,.5,.5,-.5,-1e4,1e4),this.screen_camera.position.z=10,this.update_panorama(),this.on("change:panorama_mode",this.update_panorama,this),this.renderer.domElement.addEventListener("touchstart",this._touch_start.bind(this),!1),this.renderer.domElement.addEventListener("touchmove",this._touch_move.bind(this),!1),this.renderer.domElement.addEventListener("touchcancel",this._touch_cancel.bind(this),!1),this.renderer.domElement.addEventListener("mousedown",this._mouse_down.bind(this),!1),this.renderer.domElement.addEventListener("mousemove",this._mouse_move.bind(this),!1),this.renderer.domElement.addEventListener("dblclick",this._mouse_dbl_click.bind(this),!1),this.renderer.domElement.addEventListener("contextmenu",e=>{e.preventDefault(),e.stopPropagation()},!1),window.addEventListener("mouseup",this._mouse_up.bind(this),!1),this.mouse_inside=!1,this.mouse_trail=[],this.select_overlay=null,this.control_trackball=new u.TrackballControls(this.camera,this.renderer.domElement),this.control_orbit=new u.OrbitControls(this.camera,this.renderer.domElement),this.control_trackball.dynamicDampingFactor=1,this.control_trackball.noPan=!0,this.control_orbit.enablePan=!1,this.control_orbit.dampingFactor=1,this.update_mouse_mode(),this.control_orbit.rotateSpeed=.5,this.control_trackball.rotateSpeed=.5,this.control_trackball.zoomSpeed=3;const _=this.update_angles.bind(this),p=this.update.bind(this);this.control_trackball.addEventListener("end",_),this.control_orbit.addEventListener("end",_),this.control_trackball.addEventListener("change",p),this.control_orbit.addEventListener("change",p);const m=()=>{const e=this.model.get("controls"),t=this.model.previousAttributes.controls;if(t){const e=t.obj;e.removeEventListener("end",_),e.removeEventListener("change",p),e.dispose()}e?(this.control_external=e.obj,this.control_external.addEventListener("end",_),this.control_external.addEventListener("change",p),this.control_external.connectEvents(this.el)):this.control_external=null,this.update_mouse_mode()};m(),this.model.on("change:controls",()=>{m()}),window.addEventListener("deviceorientation",this.on_orientationchange.bind(this),!1);const v=this.getRenderSize();this.material_multivolume=new u.ShaderMaterial({uniforms:{back_tex:{type:"t",value:this.volume_back_target.texture},geometry_depth_tex:{type:"t",value:this.geometry_depth_target.depthTexture},volumes:{type:"tv",value:[{}]},data:{type:"tv",value:[]},transfer_function:{type:"tv",value:[]},volumes_max_int:{type:"tv",value:[{}]},data_max_int:{type:"tv",value:[]},transfer_function_max_int:{type:"tv",value:[]},ambient_coefficient:{type:"f",value:this.model.get("ambient_coefficient")},diffuse_coefficient:{type:"f",value:this.model.get("diffuse_coefficient")},specular_coefficient:{type:"f",value:this.model.get("specular_coefficient")},specular_exponent:{type:"f",value:this.model.get("specular_exponent")},brightness:{type:"f",value:2},render_size:{type:"2f",value:v},steps:{type:"f",value:10}},blending:u.CustomBlending,blendSrc:u.OneFactor,blendDst:u.OneMinusSrcAlphaFactor,blendEquation:u.AddEquation,transparent:!0,defines:{},side:u.FrontSide}),this.material_multivolume.uniforms=Object.assign(Object.assign({},u.UniformsUtils.merge([u.UniformsLib.common,u.UniformsLib.specularmap,u.UniformsLib.envmap,u.UniformsLib.aomap,u.UniformsLib.lightmap,u.UniformsLib.emissivemap,u.UniformsLib.bumpmap,u.UniformsLib.normalmap,u.UniformsLib.displacementmap,u.UniformsLib.gradientmap,u.UniformsLib.fog,u.UniformsLib.lights,{emissive:{value:new u.Color(0)},specular:{value:new u.Color(1118481)},shininess:{value:30}}])),this.material_multivolume.uniforms),this.material_multivolume_depth=new u.ShaderMaterial({uniforms:this.material_multivolume.uniforms,blending:u.NoBlending,defines:{COORDINATE:!0},side:u.FrontSide}),this.model.on("change:scatters",this.update_scatters,this),this.update_scatters(),this.model.on("change:meshes",this.update_meshes,this),this.update_meshes(),this.model.on("change:volumes",this.update_volumes,this),this.update_volumes(),this.model.on("change:lights",this.update_lights,this),this.update_lights(),this.update_size();this.el.addEventListener("change",this.update.bind(this));const g=()=>{this.model.set("matrix_world",this._get_view_matrix().elements.slice()),this.touch()};if(this.model.on("change:xlim change:ylim change:zlim",()=>{g()}),this.model.get("camera")){this.model.get("camera").on("change:matrixWorld",()=>{g()}),g();const e=()=>{this.model.set("matrix_projection",this.camera.projectionMatrix.elements.slice())};e(),this.model.get("camera").on("change:projectionMatrix",()=>{e()}),e()}this.model.on("change:camera_control",this.update_mouse_mode,this),this.model.on("change:xlabel change:ylabel change:zlabel",this.update,this),this.model.on("change:render_continuous",this.update,this),this.model.on("change:style",this.update,this);const y=this.model.get("scales");for(const e of["x","y","z"])y[e].on("change",this.update,this);this.model.on("change:xlim change:ylim change:zlim ",this.update,this),this.model.on("change:stereo",this.update_size,this),this.model.on("change:eye_separation",this.update,this),this.model.on("change:camera_fov",this.update_current_control,this),this.model.on("change:width",this.update_size,this),this.model.on("change:height",this.update_size,this),this.model.on("change:displayscale",this.update_size,this),this.model.on("change:ambient_coefficient",this.update_light,this),this.model.on("change:diffuse_coefficient",this.update_light,this),this.model.on("change:specular_coefficient",this.update_light,this),this.model.on("change:specular_exponent",this.update_light,this);this.model.on("change:_shaders",()=>{this.rebuild_multivolume_rendering_material(),this.update()},this);const x=()=>{for(const e of[this.scene,this.scene_opaque]){const t=this.model.get("camera_center");e.position.set(-t[0],-t[1],-t[2])}this.update()};let A;this.model.on("change:camera_center",x),x(),this.model.on("change:tf",this.tf_set,this),this.listenTo(this.model,"msg:custom",this.custom_msg.bind(this)),this.renderer.domElement.addEventListener("resize",this.on_canvas_resize.bind(this),!1),this.update(),this.update_current_control(),this.update_light(),A=this.model.get("capture_fps")?this.renderer.domElement.captureStream(this.model.get("capture_fps")):this.renderer.domElement.captureStream(),this.model.stream=Promise.resolve(A),window.last_figure_stream=A,window.last_figure=this,this.renderer.domElement.onmouseover=()=>{this.hover=!0},this.renderer.domElement.onmouseleave=()=>{this.hover=!1}}camera_initial(e){throw new Error("Method not implemented.")}_save_matrices(e,t,n){throw new Error("Method not implemented.")}tf_set(e,t,n){throw new Error("Method not implemented.")}setStyle(){}update_icons(){const e="select"===this.model.get("mouse_mode");this.select_icon_lasso.active("lasso"===this.model.get("selector")&&e),this.select_icon_circle.active("circle"===this.model.get("selector")&&e),this.select_icon_rectangle.active("rectangle"===this.model.get("selector")&&e),this.select_icon.active(e);const t="zoom"===this.model.get("mouse_mode");this.zoom_icon.active(t);const n="slice"===this.model.get("mouse_mode");this.slice_icon.active(n)}update_mouse_mode(){const e="normal"===this.model.get("mouse_mode");this.model.get("controls")?(this.control_trackball.enabled=!1,this.control_orbit.enabled=!1):(this.control_trackball.enabled="trackball"===this.model.get("camera_control")&&e,this.control_orbit.enabled="orbit"===this.model.get("camera_control")&&e)}mousewheel(e){if("zoom"!==this.model.get("mouse_mode"))return;e.preventDefault(),e.stopPropagation();let t,n,r=25e-5*e.deltaY;2===e.deltaMode&&(r=.025*e.deltaY),1===e.deltaMode&&(r-=.01*e.deltaY),e.offsetX?(t=e.offsetX,n=e.offsetY):e.layerX&&(t=e.layerX,n=e.layerY),r*=10;const i=Math.pow(10,r);this.renderer.domElement.clientHeight;if(!this.last_zoom_coordinate){const[e,r,i,o]=this.readPixelFrom(this.coordinate_target,t,n);if(o>1){const t=new u.Vector3(e,r,i);t.multiplyScalar(1/255),this.last_zoom_coordinate=t}}if(this.last_zoom_coordinate){this.renderer.setRenderTarget(this.coordinate_target),this.renderer.clear(!0,!0,!0);const e=this.last_zoom_coordinate,t=e.clone().sub(e.clone().multiplyScalar(i)),n=e.clone().add(e.clone().negate().addScalar(1).multiplyScalar(i)),r=this.model.get("scales"),o=p.mapValues(r,y.createD3Scale);o.x.range([0,1]),o.y.range([0,1]),o.z.range([0,1]),r.x.set("min",o.x.invert(t.x)),r.x.set("max",o.x.invert(n.x)),r.y.set("min",o.y.invert(t.y)),r.y.set("max",o.y.invert(n.y)),r.z.set("min",o.z.invert(t.z)),r.z.set("max",o.z.invert(n.z)),r.x.save_changes(),r.y.save_changes(),r.z.save_changes()}return!1}_mouse_down(e){let t,n;window.last_event=e,e.offsetX?(t=e.offsetX,n=e.offsetY):e.layerX&&(t=e.layerX,n=e.layerY),this.mouseDown(t,n)}mouseDown(e,t,n){this.mouse_down_position={x:e,y:t};const r=this.model.get("scales");this.mouse_down_domain={x:r.x.domain.slice(),y:r.y.domain.slice(),z:r.z.domain.slice()};this.renderer.domElement.clientHeight;const[i,o,a,s]=this.readPixelFrom(this.coordinate_target,e,t);if(s>1){const e=new u.Vector3(i,o,a);e.multiplyScalar(1/255),this.last_pan_coordinate=e}if("select"===this.model.get("mouse_mode")){const e=m.selectors[this.model.get("selector")];this.selector=new e(this.canvas_overlay),n&&(n.preventDefault(),n.stopPropagation())}if("slice"===this.model.get("mouse_mode")){let[n,r,i,o]=this.readPixelFrom(this.volume_front_target,e,t);o>0&&(n/=255,r/=255,i/=255,this._set_slice(n,r,i))}const c=this.readId(e,t);this.on_id_click(c,e,t)}_mouse_move(e){let t,n;e||(e=event),e.offsetX?(t=e.offsetX,n=e.offsetY):e.layerX&&(t=e.layerX,n=e.layerY);const r=t,i=n,o=this.readId(t,n);if(this.on_id_hover(o,t,n),this.last_zoom_coordinate=null,this.selector&&(this.mouse_trail.push([t,n]),this.selector.mouseMove(t,n),this.selector.draw()),"zoom"===this.model.get("mouse_mode")&&this.last_pan_coordinate&&1===e.buttons){const e=r-this.mouse_down_position.x,t=-(i-this.mouse_down_position.y);this.mouseDrag(e,t)}if("slice"===this.model.get("mouse_mode")){let[e,r,i,o]=this.readPixelFrom(this.volume_front_target,t,n);o>0&&(e/=255,r/=255,i/=255,this._set_slice(e,r,i))}}_touch_start(e){}_touch_cancel(e){}_touch_move(e){const t=e.targetTouches[0].clientX,n=e.targetTouches[0].clientY;if(console.log("move",t,n),"slice"===this.model.get("mouse_mode")){let[e,r,i,o]=this.readPixelFrom(this.volume_front_target,t,n);return o>0&&(e/=255,r/=255,i/=255,this._set_slice(e,r,i)),!1}}_set_slice(e,t,n){const r=this.model.get("scales"),i=p.mapValues(r,y.createD3Scale),o=i.x.range([0,1]).invert(e),a=i.y.range([0,1]).invert(t),s=i.z.range([0,1]).invert(n),[u,c]=i.x.domain(),[l,f]=i.y.domain(),[h,d]=i.z.domain(),_=Math.abs(u-c),m=Math.abs(l-f),v=Math.abs(h-d),g=Math.abs(o-u)/_<.001||Math.abs(o-c)/_<.001,b=Math.abs(a-l)/m<.001||Math.abs(a-f)/m<.001,x=Math.abs(s-h)/v<.001||Math.abs(s-d)/v<.001;(g||b)&&this.model.set("slice_z",s),(g||x)&&this.model.set("slice_y",a),(b||x)&&this.model.set("slice_x",o),(g||b||x)&&this.model.save_changes()}on_id_click(e,t,n){Object.values(this.scatter_views).forEach(r=>{r.onClick(e),r.popup(e,t,n,this.popup_container)}),Object.values(this.mesh_views).forEach(r=>{r.onClick(e),r.popup(e,t,n,this.popup_container)})}on_id_hover(e,t,n){this._wantsPopup=!0;this.lastId=e,setTimeout(()=>{this._wantsPopup&&e==this.lastId&&(this._wantsPopup=!1,this._on_id_hover(e,t,n))},this.model.get("popup_debouce"))}_on_id_hover(e,t,n){Object.values(this.scatter_views).forEach(r=>{r.onHover(e),this.popup_container.style.left=`${t}px`;const i=this.renderer.domElement.clientHeight;this.popup_container.style.bottom=`${i-n}px`,r.popup(e,t,n,this.popup_container)}),Object.values(this.mesh_views).forEach(r=>{r.onHover(e),this.popup_container.style.left=`${t}px`;const i=this.renderer.domElement.clientHeight;this.popup_container.style.bottom=`${i-n}px`,r.popup(e,t,n,this.popup_container)})}mouseDrag(e,t){const n=this.renderer.domElement,r=e/n.clientWidth*2,i=t/n.clientHeight*2,o=this.camera.projectionMatrix,a=this.camera.matrixWorldInverse,s=o.clone().multiply(a),c=new u.Matrix4,l=this.model.get("box_size");c.makeScale(l[0],l[1],l[2]),s.multiply(c);const f=s.clone().getInverse(s),h=this.model.get("scales"),d=p.mapValues(h,y.createD3Scale);d.x.domain(this.mouse_down_domain.x).range([0,1]),d.y.domain(this.mouse_down_domain.y).range([0,1]),d.z.domain(this.mouse_down_domain.z).range([0,1]);let _=this.last_pan_coordinate.clone();const m=_.clone().applyMatrix4(s),v=m.clone();v.x+=r,v.y+=i,_=m.clone().applyMatrix4(f);const g=v.clone().applyMatrix4(f).clone().sub(_),b=new u.Vector3(0,0,0),x=new u.Vector3(1,1,1);b.sub(g),x.sub(g),h.x.set("min",d.x.invert(b.x)),h.x.set("max",d.x.invert(x.x)),h.y.set("min",d.y.invert(b.y)),h.y.set("max",d.y.invert(x.y)),h.z.set("min",d.z.invert(b.z)),h.z.set("max",d.z.invert(x.z)),h.x.save_changes(),h.y.save_changes(),h.z.save_changes()}_mouse_dbl_click(e){if("zoom"===this.model.get("mouse_mode")&&this.last_pan_coordinate){const e=this.mouse_down_domain.x,t=this.mouse_down_domain.y,n=this.mouse_down_domain.z;let r=new u.Vector3(e[0],t[0],n[0]),i=new u.Vector3(e[1],t[1],n[1]);const o=i.clone().sub(r),a=this.last_pan_coordinate.clone().multiply(o).add(r),s=o.clone().multiplyScalar(.5);r=a.clone().sub(s),i=a.clone().add(s);const c=this.model.get("scales");c.x.set("min",r.x),c.x.set("max",i.x),c.y.set("min",r.y),c.y.set("max",i.y),c.z.set("min",r.z),c.z.set("max",i.z),c.x.save_changes(),c.y.save_changes(),c.z.save_changes()}}_mouse_up(e){if(this.selector){const t=this.renderer.domElement;this.send({event:"selection",data:this.selector.getData(t.clientWidth,t.clientHeight)}),this.mouse_trail=[],this.selector.close(),this.selector=null,e.preventDefault(),e.stopPropagation()}}_special_keys_down(e){if(!this.hover)return;const t=window.event?event:e;t.altKey;let n=!1;return"="===t.key&&(this.model.set("selection_mode","replace"),n=!0),"|"===t.key&&(this.model.set("selection_mode","or"),n=!0),"&"===t.key&&(this.model.set("selection_mode","and"),n=!0),"-"===t.key&&(this.model.set("selection_mode","subtract"),n=!0),76===t.keyCode&&(this.model.set("selector","lasso"),n=!0),67===t.keyCode&&(this.model.set("selector","circle"),n=!0),82===t.keyCode&&(this.model.set("selector","rectangle"),n=!0),16===t.keyCode&&(this.quick_mouse_mode_change||(this.quick_mouse_mode_change=!0,this.quick_mouse_previous_mode=this.model.get("mouse_mode"),this.model.set("mouse_mode","slice"),n=!0)),18===t.keyCode&&(this.quick_mouse_mode_change||(this.quick_mouse_mode_change=!0,this.quick_mouse_previous_mode=this.model.get("mouse_mode"),this.model.set("mouse_mode","zoom"),n=!0)),17===t.keyCode&&(this.quick_mouse_mode_change||(this.quick_mouse_mode_change=!0,this.quick_mouse_previous_mode=this.model.get("mouse_mode"),this.model.set("mouse_mode","select"),n=!0)),n?(this.touch(),e.preventDefault(),e.stopPropagation(),!1):void 0}_special_keys_up(e){const t=window.event?event:e;t.altKey,16!==t.keyCode&&17!==t.keyCode&&18!==t.keyCode||this.quick_mouse_mode_change&&(this.quick_mouse_mode_change=!1,this.model.set("mouse_mode",this.quick_mouse_previous_mode),this.touch())}custom_msg(e){if("screenshot"===e.msg){const t=this.screenshot(void 0,e.width,e.height);this.send({event:"screenshot",data:t})}}screenshot(e="image/png",t,n){const r=t&&n;try{r&&this._update_size(!0,t,n),this._real_update();const i=this.renderer.domElement.toDataURL(e);return console.info("captured screenshot"),i}finally{r&&this._update_size(!1)}}_d3_add_axis(e,t,n){const r=new u.Object3D;r.matrixAutoUpdate=!1;const i=new u.Matrix4;i.makeTranslation(t.translate[0],t.translate[1],t.translate[2]),o.select(e).attr("translate-x",t.translate[0]),o.select(e).attr("translate-y",t.translate[1]),o.select(e).attr("translate-z",t.translate[2]);const a=new u.Matrix4;a.makeRotationFromEuler(new u.Euler(t.rotate[0],t.rotate[1],t.rotate[2],t.rotation_order));const s={x:c.textAlign.topRight,y:c.textAlign.topRight,z:c.textAlign.center},l=new c.SpriteText2D(t.label,{align:s[t.name],font:"100px Arial",fillStyle:"#00FF00",antialias:!0});l.material.transparent=!0,l.material.alphaTest=.3,r.matrix.multiply(i),r.matrix.multiply(a),this.axes.add(r),r.add(l),t.object_label=l,t.object=r;const f=this.model.get("scales")[t.name];t.scale=y.createD3Scale(f).range([-.5,.5]),t.ticks=null,this._d3_update_axis(e,t,n)}_d3_update_axis(e,t,n){t.object_label.text=t.label,t.object_label.fillStyle=t.fillStyle;const r=t.name,i=this.model.get("scales")[t.name];t.scale=y.createD3Scale(i).range([-.5,.5]),t.object_label.fillStyle=this.get_style("axes."+r+".label.color axes."+r+".color axes.label.color axes.color"),t.object_label.visible=this.get_style("axes."+r+".label.visible axes."+r+".visible axes.label.visible axes.visible");const o=new u.Matrix4;o.makeRotationFromEuler(new u.Euler(t.rotate[0],t.rotate[1],t.rotate[2],t.rotation_order));const a=new u.Matrix4;a.getInverse(o);const s=new u.Vector3;s.fromArray(this.model.get("box_size"));const c=new u.Vector3(1,1,1);c.divide(s);const l=new u.Matrix4;l.makeScale(c.x,c.y,c.z);const f=.004/3,h=new u.Matrix4;h.makeScale(f,f,f),l.multiply(h);const d=t.object_label;d.matrixAutoUpdate=!1,d.matrix.identity(),d.matrix.multiply(a),d.matrix.multiply(l),d.matrix.multiply(o)}_d3_add_axis_tick(e,t,n){const r=o.select(o.select(e).node().parentNode).datum(),i=r.scale.tickFormat(this.ticks,".1f")(t.value),a={x:c.textAlign.topRight,y:c.textAlign.topRight,z:c.textAlign.center},s=new c.SpriteText2D(i,{align:a[r.name],font:"100px Arial",fillStyle:"#00FF00",antialias:!0});s.material.transparent=!0,s.material.alphaTest=.3;const u=r.name;return s.fillStyle=this.get_style("axes."+u+".ticklabel.color axes.ticklabel.color axes."+u+".color axes.color"),i&&r.object.add(s),t.object_ticklabel=s,this._d3_update_axis_tick(e,t,n),s}_d3_update_axis_tick(e,t,n){const r=o.select(o.select(e).node().parentNode).datum(),i=r.scale,a=i.tickFormat(this.ticks,".1f")(t.value);a&&!t.object_ticklabel.text&&r.object.add(t.object_ticklabel),!a&&t.object_ticklabel.text&&r.object.remove(t.object_ticklabel),t.object_ticklabel.text=a;const s=r.name;t.object_ticklabel.fillStyle=this.get_style("axes."+s+".ticklabel.color axes.ticklabel.color axes."+s+".color axes.color"),t.object_ticklabel.visible=this.get_style("axes."+s+".ticklabel.visible axes."+s+".visible axes.visible");const c=new u.Matrix4;c.makeRotationFromEuler(new u.Euler(r.rotate[0],r.rotate[1],r.rotate[2],r.rotation_order));const l=new u.Matrix4;l.getInverse(c);const f=new u.Vector3;f.fromArray(this.model.get("box_size"));const h=new u.Vector3(1,1,1);h.divide(f);const d=new u.Matrix4;d.makeScale(h.x,h.y,h.z);const _=.001/3,p=new u.Matrix4;p.makeScale(_,_,_),d.multiply(p);const m=new u.Matrix4;m.makeTranslation(i(t.value),0,0);const v=t.object_ticklabel;v.matrixAutoUpdate=!1,v.matrix.identity(),v.matrix.multiply(m),v.matrix.multiply(l),v.matrix.multiply(d),v.matrix.multiply(c)}_d3_remove_axis_tick(e,t,n){t.object_ticklabel.text&&t.object_ticklabel.parent.remove(t.object_ticklabel)}update_scatters(){const e=this.model.get("scatters");if(0!==e.length){const t=[];e.forEach(e=>{if(t.push(e.cid),!(e.cid in this.scatter_views)){const t={parent:this},n=new f.ScatterView({options:t,model:e});n.render(),this.scatter_views[e.cid]=n}});for(const e of Object.keys(this.scatter_views)){const n=this.scatter_views[e];-1===t.indexOf(e)&&(n.remove_from_scene(),delete this.scatter_views[e])}}else this.scatter_views={};this._update_id_offsets()}update_meshes(){const e=this.model.get("meshes");if(0!==e.length){const t=[];e.forEach(e=>{if(t.push(e.cid),!(e.cid in this.mesh_views)){const t={parent:this},n=new l.MeshView({options:t,model:e});n.render(),this.mesh_views[e.cid]=n}});for(const e of Object.keys(this.mesh_views)){const n=this.mesh_views[e];-1===t.indexOf(e)&&(n.remove_from_scene(),delete this.mesh_views[e])}}else this.mesh_views={};this._update_id_offsets()}update_volumes(){const e=this.model.get("volumes"),t=this.model.previous("volumes");if(0!==e.length){const t=[];e.forEach(e=>{if(t.push(e.cid),!(e.cid in this.volume_views)){const t={parent:this},n=new _.VolumeView({options:t,model:e});e.add_to_scene(this.rootObject),this.volume_views[e.cid]=n,n.render()}});for(const e of Object.keys(this.volume_views)){this.volume_views[e];-1===t.indexOf(e)&&delete this.volume_views[e]}}else this.volume_views={};if(t)for(let n of t)e.includes(n)||n.remove_from_scene(this.rootObject);this._update_id_offsets()}_update_id_offsets(){let e=1;for(const t of Object.values(this.scatter_views))t.uniforms.id_offset.value=e,e+=t.length;for(const t of Object.values(this.mesh_views))t.uniforms.id_offset.value=e,e+=t.length}async update_lights(){this.model.previous("lights")&&this.model.previous("lights").forEach(e=>{const t=e.obj;this.scene.remove(t)}),this.model.get("lights").forEach(e=>{const t=e.obj;t.castShadow&&this.update_shadows();const n=()=>{t.castShadow&&this.update_shadows(),this.update()};t.target&&this.scene.add(t.target),e.on("change",n),e.on("childchange",n),this.scene.add(t)});const e=[...Object.values(this.mesh_views),...Object.values(this.scatter_views)];for(const t of e)t._update_materials();this.update()}update_shadows(){this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=u.PCFSoftShadowMap}transition(e,t,n){const r=this.model.get("animation_exponent");this.transitions.push(new v.Transition(e,t,this.model.get("animation"),r))}on_orientationchange(e){if(this.model.get("orientation_control")){for(const t of[this.scene,this.scene_opaque])t.rotation.reorder("XYZ"),t.rotation.x=e.gamma*Math.PI/180+2*Math.PI,t.rotation.y=-(e.beta*Math.PI/180+2*Math.PI),t.rotation.z=-e.alpha*Math.PI/180;this.update()}}on_canvas_resize(e){}keypress(e){}update_angles(){this.camera.ipymodel&&this.camera.ipymodel.syncToModel(!0),this.update()}_get_scale_matrix(){const e=new u.Matrix4;e.makeTranslation(-.5,-.5,-.5);const t=new u.Matrix4,n=this.model.get("scales"),r=n.x.domain,i=n.y.domain,o=n.z.domain,a=1/(r[1]-r[0]),s=1/(i[1]-i[0]),c=1/(o[1]-o[0]);t.makeScale(a,s,c);const l=new u.Matrix4;return l.makeTranslation(-r[0],-i[0],-o[0]),e.multiply(t),e.multiply(l),e}_get_view_matrix(){this.camera.updateMatrixWorld(),this.camera.matrixWorldInverse.getInverse(this.camera.matrixWorld);const e=this.camera.matrixWorldInverse.clone();return e.multiply(this._get_scale_matrix().clone()),e}update_current_control(){this.camera.ipymodel&&this.camera.ipymodel.syncToModel(!0),this.control_trackball.position0=this.camera.position.clone(),this.control_trackball.up0=this.camera.up.clone()}update_panorama(){const e=this.screen_material_cube;"360"===this.model.get("panorama_mode")&&(e.defines={PANORAMA_360:!0}),"180"===this.model.get("panorama_mode")&&(e.defines={PANORAMA_180:!0}),e.needsUpdate=!0,this.update()}update(){this._update_requested||(this._update_requested=!0,requestAnimationFrame(this._real_update.bind(this)))}_real_update(){this.control_trackball.handleResize(),this.control_external&&(this.control_external.update(),this.camera.ipymodel.syncToModel(!0)),this._update_requested=!1,this.control_external||this.camera.lookAt(0,0,0);for(const e of Object.values(this.scatter_views))e.uniforms.aspect.value=this.model.get("box_size");this.renderer.setClearColor(this.get_style_color("background-color")),this.x_axis.visible=this.get_style("axes.x.visible axes.visible"),this.y_axis.visible=this.get_style("axes.y.visible axes.visible"),this.z_axis.visible=this.get_style("axes.z.visible axes.visible"),this.axes_material.color=this.get_style_color("axes.color"),this.xaxes_material.color=this.get_style_color("axes.x.color axes.color"),this.yaxes_material.color=this.get_style_color("axes.y.color axes.color"),this.zaxes_material.color=this.get_style_color("axes.z.color axes.color"),this.axes_data[0].fillStyle=this.get_style("axes.x.color axes.color"),this.axes_data[1].fillStyle=this.get_style("axes.y.color axes.color"),this.axes_data[2].fillStyle=this.get_style("axes.z.color axes.color"),this.axes_data[0].label=this.model.get("xlabel"),this.axes_data[1].label=this.model.get("ylabel"),this.axes_data[2].label=this.model.get("zlabel"),this.wire_box.visible=this.get_style("box.visible"),this.wire_box_x_line.visible=!this.x_axis.visible&&this.wire_box.visible,this.wire_box_y_line.visible=!this.y_axis.visible&&this.wire_box.visible,this.wire_box_z_line.visible=!this.z_axis.visible&&this.wire_box.visible,o.select(this.el_axes).selectAll(".ipyvol-axis").data(this.axes_data).each(x(this._d3_update_axis,this)).enter().append("div").attr("class","ipyvol-axis").each(x(this._d3_add_axis,this));const e=this;this.ticks=5,this.last_tick_selection=o.select(this.el_axes).selectAll(".ipyvol-axis").data(this.axes_data).selectAll(".ipyvol-tick").data((function(t,n,r){let i=t.ticks;if(i){i=t.ticks=i.slice();const n=t.scale.ticks(e.ticks);for(;i.length<n.length;)i.push({});for(;i.length>n.length;)i.pop();for(let e=0;e<n.length;e++)i[e].value=n[e];return i}return i=t.scale.ticks(e.ticks).map(e=>({value:e})),t.ticks=i,i})),this.last_tick_selection.each(x(this._d3_update_axis_tick,this)).enter().append("div").attr("class","ipyvol-tick").each(x(this._d3_add_axis_tick,this)),this.last_tick_selection.exit().remove().each(x(this._d3_remove_axis_tick,this));const t=[];for(const e of this.transitions)e.is_done()||t.push(e),e.update();if(this.renderer.clear(),this.model.get("stereo")){const e=this.renderer.getSize();null===this.camera.parent&&this.camera.updateMatrixWorld(),this.camera_stereo.eyeSep=this.model.get("eye_separation")/100,this.camera.focus=this.camera.focus,this.camera_stereo.update(this.camera),this.camera_stereo.cameraL.position.copy(this.camera.position),this.camera_stereo.cameraR.position.copy(this.camera.position),this.camera_stereo.cameraL.quaternion.copy(this.camera.quaternion),this.camera_stereo.cameraR.quaternion.copy(this.camera.quaternion),this.camera_stereo.cameraL.up.copy(this.camera.up),this.camera_stereo.cameraR.up.copy(this.camera.up);const t="no"!==this.model.get("panorama_mode");this.renderer.setScissorTest(!0),t?(this.renderer.setScissor(0,0,e.width,e.height/2),this.renderer.setViewport(0,0,e.width,e.height/2)):(this.renderer.setScissor(0,0,e.width/2,e.height),this.renderer.setViewport(0,0,e.width/2,e.height)),this._render_eye(this.camera_stereo.cameraL),t?(this.renderer.setScissor(0,e.height/2,e.width,e.height/2),this.renderer.setViewport(0,e.height/2,e.width,e.height/2)):(this.renderer.setScissor(e.width/2,0,e.width/2,e.height),this.renderer.setViewport(e.width/2,0,e.width/2,e.height)),this._render_eye(this.camera_stereo.cameraR),this.renderer.setScissorTest(!1),this.renderer.setViewport(0,0,e.width,e.height)}else this._render_eye(this.camera);this.selector&&this.selector.draw(),this.transitions=t,this.transitions.length>0&&this.update(),this.model.get("render_continuous")&&this.update(),this.model.get("scene")&&this.model.get("scene").trigger("afterRender",this.scene,this.renderer,this.camera)}get_style_color(e){const t=this.get_style(e);if(t)return new u.Color(t);console.error("could not find color for",e)}get_style(e){const t=[null];return e.split(" ").forEach(e=>{const n=e.split(".").reduce((e,t)=>null!==e&&void 0!==e[t]?e[t]:null,this.model.get("style"));null!==n&&null===t[0]&&(t[0]=n)},this),t[0]}_render_eye(e){this.camera.updateMatrixWorld();let t=this.model.get("volumes");const n=0!==(t=t.filter(e=>e.get("visible"))).length,r="no"!==this.model.get("panorama_mode"),i=this.rootObject.children.reduce((e,t)=>(e[t.id]=t.visible,e),{}),o=({volumes:e})=>{this.rootObject.children.forEach(t=>{t.visible=e?Boolean(t.isVolume)||Boolean(t.isLight)||Boolean(t.isCamera):!Boolean(t.isVolume),t===this.front_box_mesh&&(this.front_box_mesh.visible=!1)})};for(const e of Object.values(this.scatter_views))e.set_scales(this.model.get("scales"));for(const e of Object.values(this.mesh_views))e.set_scales(this.model.get("scales"));if(r){if(this.cube_camera.clear(this.renderer,!0,!0,!0),this.renderer.autoClear=!1,this.cube_camera.position.copy(e.position),this.cube_camera.rotation.copy(e.rotation),this.cube_camera.quaternion.copy(this.camera.quaternion),this.model.get("stereo")){const t=new u.Vector3(0,0,0);e===this.camera_stereo.cameraR&&(t.x+=.032),e===this.camera_stereo.cameraL&&(t.x-=.032),t.applyQuaternion(e.quaternion),this.cube_camera.position.add(t);const n=new u.Vector3(0,0,1*this.camera.focus);n.applyQuaternion(e.quaternion),this.cube_camera.lookAt(n)}return this.cube_camera.update(this.renderer,this.scene),this.cube_camera.update(this.renderer,this.scene_opaque),this.screen_texture=this.cube_camera.renderTarget,void this.renderer.render(this.screen_scene_cube,this.screen_camera)}if(this.rootObject.children.forEach(e=>{e.visible=!1}),this.front_box_mesh.visible=!0,this.front_box_mesh.material.side=u.FrontSide,this.renderer.setRenderTarget(this.volume_front_target),this.renderer.clear(!0,!0,!0),this.renderer.render(this.scene,e,this.volume_front_target),this.front_box_mesh.visible=!1,n){this.renderer.state.buffers.depth.setClear(0);for(const e of t)e.box_material.side=u.BackSide,e.box_material.depthFunc=u.GreaterDepth,e.vol_box_mesh.material=e.box_material,e.set_scales(this.model.get("scales"));this.renderer.setRenderTarget(this.volume_back_target),this.renderer.clear(!0,!0,!0),o({volumes:!0}),this.renderer.render(this.scene,e,this.volume_back_target),this.renderer.state.buffers.depth.setClear(1),this.renderer.autoClear=!1,this.renderer.setRenderTarget(this.geometry_depth_target),this.renderer.clear(!0,!0,!0),o({volumes:!1}),this.renderer.render(this.scene,e,this.geometry_depth_target),this.renderer.render(this.scene_opaque,e,this.geometry_depth_target),this.renderer.autoClear=!0}if(this.renderer.autoClear=!1,this.renderer.setRenderTarget(this.color_pass_target),this.renderer.clear(!0,!0,!0),o({volumes:!1}),this.renderer.render(this.scene,e,this.color_pass_target),this.renderer.render(this.scene_opaque,e,this.color_pass_target),this.renderer.autoClear=!0,n){this.renderer.context.colorMask(0,0,0,0);for(const e of t)e.box_material.side=u.FrontSide,e.box_material.depthFunc=u.LessEqualDepth;this.renderer.autoClear=!1,this.renderer.setRenderTarget(this.color_pass_target),this.renderer.clear(!1,!0,!1),o({volumes:!0}),this.renderer.render(this.scene,e,this.color_pass_target),this.renderer.autoClear=!0,this.renderer.context.colorMask(!0,!0,!0,!0);for(const e of t)e.vol_box_mesh.material=this.material_multivolume;this.renderer.autoClear=!1,this.renderer.setRenderTarget(this.color_pass_target),o({volumes:!0}),this.renderer.render(this.scene,e,this.color_pass_target),this.renderer.autoClear=!0}for(const e of Object.values(this.scatter_views))e.mesh.material=e.mesh.material_rgb;for(const e of Object.values(this.mesh_views))e.meshes.forEach(e=>{e.material=e.material_rgb});this.renderer.autoClear=!1,this.renderer.setClearAlpha(0),this.renderer.setRenderTarget(this.coordinate_target),this.renderer.clear(!0,!0,!0),o({volumes:!1}),this.renderer.render(this.scene,e,this.coordinate_target),this.renderer.autoClear=!0;for(const e of Object.values(this.scatter_views))e.mesh.material=e.mesh.material_id;for(const e of Object.values(this.mesh_views))e.meshes.forEach(e=>{e.material=e.material_id});if(this.renderer.autoClear=!1,this.renderer.setClearAlpha(0),this.renderer.setRenderTarget(this.id_pass_target),this.renderer.clear(!0,!0,!0),o({volumes:!1}),this.renderer.render(this.scene,e,this.id_pass_target),this.renderer.autoClear=!0,n){this.renderer.context.colorMask(0,0,0,0);for(const e of t)e.box_material.side=u.FrontSide,e.box_material.depthFunc=u.LessEqualDepth;this.renderer.autoClear=!1,this.renderer.setRenderTarget(this.color_pass_target),this.renderer.clear(!1,!0,!1),o({volumes:!0}),this.renderer.render(this.scene,e,this.color_pass_target),this.renderer.autoClear=!0,this.renderer.context.colorMask(!0,!0,!0,!0);for(const e of t)e.vol_box_mesh.material=this.material_multivolume_depth;this.renderer.autoClear=!1,this.renderer.setRenderTarget(this.color_pass_target),o({volumes:!0}),this.renderer.render(this.scene,e,this.coordinate_target),this.renderer.autoClear=!0}for(const e of Object.values(this.scatter_views))e.mesh.material=e.mesh.material_normal;for(const e of Object.values(this.mesh_views))e.meshes.forEach(e=>{e.material=e.material_normal});"Shadow"==this.model.get("show")?this._render_shadow():(this.screen_texture={render:this.color_pass_target,front:this.volume_front_target,back:this.volume_back_target,coordinate:this.coordinate_target,id:this.id_pass_target}[this.model.get("show")],this.screen_material.uniforms.tex.value=this.screen_texture.texture,this.renderer.setRenderTarget(null),this.renderer.clear(!0,!0,!0),this.renderer.render(this.screen_scene,this.screen_camera)),(()=>{this.rootObject.children.forEach(e=>{e.visible=i[e.id]})})()}_render_shadow(){const e=this.model.get("lights").map(e=>e.obj).filter(e=>Boolean(e.shadow)&&Boolean(e.shadow.map));if(0==e.length)throw"No light with a shadow map found.";const t=e[0].shadow.map.texture,n=t.width,r=t.height,i=new u.OrthographicCamera(n/-2,r/2,n/2,r/-2,-1e3,1e3);i.position.z=100;var o=new u.Scene;const a=this.model.get("_shaders"),s=a["shadow-fragment"]||b["shadow-fragment"],c=a["shadow-vertex"]||b["shadow-vertex"],l=new u.ShaderMaterial({uniforms:{map:{type:"t",value:null}},vertexShader:c,fragmentShader:s,depthTest:!1,depthWrite:!1});o.add(new u.Mesh(new u.PlaneGeometry(n,r),l)),l.uniforms.map.value=t,this.renderer.render(o,i)}rebuild_multivolume_rendering_material(){let e=this.model.get("volumes");e=e.filter(e=>e.get("visible"));const t=this.material_multivolume,n=this.material_multivolume_depth;let r=0,i=0;if(t.uniforms.volumes.value=[],t.uniforms.volumes_max_int.value=[],t.uniforms.data.value=[],t.uniforms.data_max_int.value=[],t.uniforms.transfer_function.value=[],t.uniforms.transfer_function_max_int.value=[],t.uniforms.steps.value=e.map(e=>{const t=this.volume_views[e.cid];return t?t.get_ray_steps():0}),0===e.length)return;for(const n of e)n.is_normal()?(r++,t.uniforms.volumes.value.push(n.uniform_volumes_values),t.uniforms.data.value.push(n.uniform_data.value[0]),t.uniforms.transfer_function.value.push(n.uniform_transfer_function.value[0])):(i++,t.uniforms.volumes_max_int.value.push(n.uniform_volumes_values),t.uniforms.data_max_int.value.push(n.uniform_data.value[0]),t.uniforms.transfer_function_max_int.value.push(n.uniform_transfer_function.value[0]));t.defines.VOLUME_COUNT=r,t.defines.VOLUME_COUNT_MAX_INT=i,t.lights=!0,n.defines.VOLUME_COUNT=r,n.defines.VOLUME_COUNT_MAX_INT=i;const o=this.model.get("_shaders");n.fragmentShader=t.fragmentShader=y.patchShader((e=>{const t={volumes:p.range(r),volumes_max_int:p.range(i)};return a.render(e,t)})(o["volr-fragment"]||b["volr-fragment"])),n.vertexShader=t.vertexShader=y.patchShader(o["volr-vertex"]||b["volr-vertex"]),n.needsUpdate=t.needsUpdate=!0}update_light(){this.material_multivolume.uniforms.ambient_coefficient.value=this.model.get("ambient_coefficient"),this.material_multivolume.uniforms.diffuse_coefficient.value=this.model.get("diffuse_coefficient"),this.material_multivolume.uniforms.specular_coefficient.value=this.model.get("specular_coefficient"),this.material_multivolume.uniforms.specular_exponent.value=this.model.get("specular_exponent"),this.update()}update_size(){this._update_size()}_update_size(e,t,n){let r,i;const o=this.renderer.domElement;this.is_fullscreen()?(r=t||o.clientWidth,i=n||o.clientHeight):(r=t||this.model.get("width"),i=n||this.model.get("height"));let a=r*this.renderer.getPixelRatio(),s=i*this.renderer.getPixelRatio();const u=r*this.model.get("displayscale"),c=i*this.model.get("displayscale");this.is_fullscreen()&&0!==this.model.get("volumes")&&(a=t||this.model.get("width"),s=n||this.model.get("height")),this.renderer.setSize(r,i,!1);const l=this.renderer.context.drawingBufferWidth,f=this.renderer.context.drawingBufferHeight;(l<r||f<i)&&console.info("could not set resolution to",r,i,", resolution is",l,f),this.renderer.domElement.style.width=u+"px",this.renderer.domElement.style.height=c+"px",this.canvas_container.style.width=u+"px",this.canvas_container.style.height=c+"px",this.canvas_overlay.style.width=u+"px",this.canvas_overlay.style.height=c+"px",this.canvas_overlay.width=r,this.canvas_overlay.height=i,this.model.get("stereo")&&(a/=2);const h=a/s;this.camera.aspect=h,this.camera.updateProjectionMatrix(),this.material_multivolume.uniforms.render_size.value=[a,s],this.volume_back_target.setSize(a,s),this.volume_front_target.setSize(a,s),this.geometry_depth_target.setSize(a,s),this.color_pass_target.setSize(a,s),this.screen_pass_target.setSize(a,s),this.coordinate_target.setSize(a,s),this.id_pass_target.setSize(a,s),this.screen_texture=this.color_pass_target.texture,e||this.update()}getRenderSize(){const e=this.renderer.getSize();return[e.width,e.width]}fullscreen(){s.request(this.el)}is_fullscreen(){return s.element===this.renderer.domElement}}t.FigureView=M;class S extends i.WidgetModel{defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:"WidgetManagerHackModel",_model_module:"ipyvolume",_model_module_version:d.semver_range})}initialize(e,t){console.log(this),super.initialize(e,t),console.info("get reference to widget manager"),window.jupyter_widget_manager=this.widget_manager,window.jupyter_widgets=i}}t.WidgetManagerHackModel=S},function(e,t,n){var r,i,o,a;
/*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 */a=function(e){var t=Object.prototype.toString,n=Array.isArray||function(e){return"[object Array]"===t.call(e)};function r(e){return"function"==typeof e}function i(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function o(e,t){return null!=e&&"object"==typeof e&&t in e}var a=RegExp.prototype.test,s=/\S/;function u(e){return!function(e,t){return a.call(e,t)}(s,e)}var c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},l=/\s*/,f=/\s+/,h=/\s*=/,d=/\s*\}/,_=/#|\^|\/|>|\{|&|=|!/;function p(e){this.string=e,this.tail=e,this.pos=0}function m(e,t){this.view=e,this.cache={".":this.view},this.parent=t}function v(){this.cache={}}p.prototype.eos=function(){return""===this.tail},p.prototype.scan=function(e){var t=this.tail.match(e);if(!t||0!==t.index)return"";var n=t[0];return this.tail=this.tail.substring(n.length),this.pos+=n.length,n},p.prototype.scanUntil=function(e){var t,n=this.tail.search(e);switch(n){case-1:t=this.tail,this.tail="";break;case 0:t="";break;default:t=this.tail.substring(0,n),this.tail=this.tail.substring(n)}return this.pos+=t.length,t},m.prototype.push=function(e){return new m(e,this)},m.prototype.lookup=function(e){var t,n=this.cache;if(n.hasOwnProperty(e))t=n[e];else{for(var i,a,s=this,u=!1;s;){if(e.indexOf(".")>0)for(t=s.view,i=e.split("."),a=0;null!=t&&a<i.length;)a===i.length-1&&(u=o(t,i[a])),t=t[i[a++]];else t=s.view[e],u=o(s.view,e);if(u)break;s=s.parent}n[e]=t}return r(t)&&(t=t.call(this.view)),t},v.prototype.clearCache=function(){this.cache={}},v.prototype.parse=function(t,r){var o=this.cache,a=o[t];return null==a&&(a=o[t]=function(t,r){if(!t)return[];var o,a,s,c=[],m=[],v=[],g=!1,y=!1;function b(){if(g&&!y)for(;v.length;)delete m[v.pop()];else v=[];g=!1,y=!1}function x(e){if("string"==typeof e&&(e=e.split(f,2)),!n(e)||2!==e.length)throw new Error("Invalid tags: "+e);o=new RegExp(i(e[0])+"\\s*"),a=new RegExp("\\s*"+i(e[1])),s=new RegExp("\\s*"+i("}"+e[1]))}x(r||e.tags);for(var w,E,A,M,S,T,C=new p(t);!C.eos();){if(w=C.pos,A=C.scanUntil(o))for(var k=0,O=A.length;k<O;++k)u(M=A.charAt(k))?v.push(m.length):y=!0,m.push(["text",M,w,w+1]),w+=1,"\n"===M&&b();if(!C.scan(o))break;if(g=!0,E=C.scan(_)||"name",C.scan(l),"="===E?(A=C.scanUntil(h),C.scan(h),C.scanUntil(a)):"{"===E?(A=C.scanUntil(s),C.scan(d),C.scanUntil(a),E="&"):A=C.scanUntil(a),!C.scan(a))throw new Error("Unclosed tag at "+C.pos);if(S=[E,A,w,C.pos],m.push(S),"#"===E||"^"===E)c.push(S);else if("/"===E){if(!(T=c.pop()))throw new Error('Unopened section "'+A+'" at '+w);if(T[1]!==A)throw new Error('Unclosed section "'+T[1]+'" at '+w)}else"name"===E||"{"===E||"&"===E?y=!0:"="===E&&x(A)}if(T=c.pop())throw new Error('Unclosed section "'+T[1]+'" at '+C.pos);return function(e){for(var t,n=[],r=n,i=[],o=0,a=e.length;o<a;++o)switch((t=e[o])[0]){case"#":case"^":r.push(t),i.push(t),r=t[4]=[];break;case"/":i.pop()[5]=t[2],r=i.length>0?i[i.length-1][4]:n;break;default:r.push(t)}return n}(function(e){for(var t,n,r=[],i=0,o=e.length;i<o;++i)(t=e[i])&&("text"===t[0]&&n&&"text"===n[0]?(n[1]+=t[1],n[3]=t[3]):(r.push(t),n=t));return r}(m))}(t,r)),a},v.prototype.render=function(e,t,n){var r=this.parse(e),i=t instanceof m?t:new m(t);return this.renderTokens(r,i,n,e)},v.prototype.renderTokens=function(e,t,n,r){for(var i,o,a,s="",u=0,c=e.length;u<c;++u)a=void 0,"#"===(o=(i=e[u])[0])?a=this.renderSection(i,t,n,r):"^"===o?a=this.renderInverted(i,t,n,r):">"===o?a=this.renderPartial(i,t,n,r):"&"===o?a=this.unescapedValue(i,t):"name"===o?a=this.escapedValue(i,t):"text"===o&&(a=this.rawValue(i)),void 0!==a&&(s+=a);return s},v.prototype.renderSection=function(e,t,i,o){var a=this,s="",u=t.lookup(e[1]);if(u){if(n(u))for(var c=0,l=u.length;c<l;++c)s+=this.renderTokens(e[4],t.push(u[c]),i,o);else if("object"==typeof u||"string"==typeof u||"number"==typeof u)s+=this.renderTokens(e[4],t.push(u),i,o);else if(r(u)){if("string"!=typeof o)throw new Error("Cannot use higher-order sections without the original template");null!=(u=u.call(t.view,o.slice(e[3],e[5]),(function(e){return a.render(e,t,i)})))&&(s+=u)}else s+=this.renderTokens(e[4],t,i,o);return s}},v.prototype.renderInverted=function(e,t,r,i){var o=t.lookup(e[1]);if(!o||n(o)&&0===o.length)return this.renderTokens(e[4],t,r,i)},v.prototype.renderPartial=function(e,t,n){if(n){var i=r(n)?n(e[1]):n[e[1]];return null!=i?this.renderTokens(this.parse(i),t,n,i):void 0}},v.prototype.unescapedValue=function(e,t){var n=t.lookup(e[1]);if(null!=n)return n},v.prototype.escapedValue=function(t,n){var r=n.lookup(t[1]);if(null!=r)return e.escape(r)},v.prototype.rawValue=function(e){return e[1]},e.name="mustache.js",e.version="2.3.2",e.tags=["{{","}}"];var g=new v;return e.clearCache=function(){return g.clearCache()},e.parse=function(e,t){return g.parse(e,t)},e.render=function(e,t,r){if("string"!=typeof e)throw new TypeError('Invalid template! Template should be a "string" but "'+(n(i=e)?"array":typeof i)+'" was given as the first argument for mustache#render(template, view, partials)');var i;return g.render(e,t,r)},e.to_html=function(t,n,i,o){var a=e.render(t,n,i);if(!r(o))return a;o(a)},e.escape=function(e){return String(e).replace(/[&<>"'`=\/]/g,(function(e){return c[e]}))},e.Scanner=p,e.Context=m,e.Writer=v,e},t&&"string"!=typeof t.nodeName?a(t):(i=[t],void 0===(o="function"==typeof(r=a)?r.apply(t,i):r)||(e.exports=o))},function(e,t,n){
/*!
* screenfull
* v3.3.3 - 2018-09-04
* (c) Sindre Sorhus; MIT License
*/
!function(){"use strict";var t="undefined"!=typeof window&&void 0!==window.document?window.document:{},n=e.exports,r="undefined"!=typeof Element&&"ALLOW_KEYBOARD_INPUT"in Element,i=function(){for(var e,n=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],r=0,i=n.length,o={};r<i;r++)if((e=n[r])&&e[1]in t){for(r=0;r<e.length;r++)o[n[0][r]]=e[r];return o}return!1}(),o={change:i.fullscreenchange,error:i.fullscreenerror},a={request:function(e){var n=i.requestFullscreen;e=e||t.documentElement,/ Version\/5\.1(?:\.\d+)? Safari\//.test(navigator.userAgent)?e[n]():e[n](r?Element.ALLOW_KEYBOARD_INPUT:{})},exit:function(){t[i.exitFullscreen]()},toggle:function(e){this.isFullscreen?this.exit():this.request(e)},onchange:function(e){this.on("change",e)},onerror:function(e){this.on("error",e)},on:function(e,n){var r=o[e];r&&t.addEventListener(r,n,!1)},off:function(e,n){var r=o[e];r&&t.removeEventListener(r,n,!1)},raw:i};i?(Object.defineProperties(a,{isFullscreen:{get:function(){return Boolean(t[i.fullscreenElement])}},element:{enumerable:!0,get:function(){return t[i.fullscreenElement]}},enabled:{enumerable:!0,get:function(){return Boolean(t[i.fullscreenEnabled])}}}),n?e.exports=a:window.screenfull=a):n?e.exports=!1:window.screenfull=!1}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(25);t.SpriteText2D=r.SpriteText2D;var i=n(27);t.MeshText2D=i.MeshText2D;var o=n(5);t.textAlign=o.textAlign},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.raycast=function(){return this.sprite.raycast.apply(this.sprite,arguments)},t.prototype.updateText=function(){this.canvas.drawText(this._text,{font:this._font,fillStyle:this._fillStyle}),this.cleanUp(),this.texture=new o.Texture(this.canvas.canvas),this.texture.needsUpdate=!0,this.applyAntiAlias(),this.material?this.material.map=this.texture:this.material=new o.SpriteMaterial({map:this.texture}),this.sprite||(this.sprite=new o.Sprite(this.material),this.geometry=this.sprite.geometry,this.add(this.sprite)),this.sprite.scale.set(this.canvas.width,this.canvas.height,1),this.sprite.position.x=this.canvas.width/2-this.canvas.textWidth/2+this.canvas.textWidth/2*this.align.x,this.sprite.position.y=-this.canvas.height/2+this.canvas.textHeight/2*this.align.y},t}(n(7).Text2D);t.SpriteText2D=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(5),o=function(){function e(){this.textWidth=null,this.textHeight=null,this.canvas=document.createElement("canvas"),this.ctx=this.canvas.getContext("2d")}return Object.defineProperty(e.prototype,"width",{get:function(){return this.canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.canvas.height},enumerable:!0,configurable:!0}),e.prototype.drawText=function(e,t){return this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.font=t.font,this.textWidth=Math.ceil(this.ctx.measureText(e).width),this.textHeight=i.getFontHeight(this.ctx.font),this.canvas.width=r.Math.ceilPowerOfTwo(this.textWidth),this.canvas.height=r.Math.ceilPowerOfTwo(this.textHeight),this.ctx.font=t.font,this.ctx.fillStyle=t.fillStyle,this.ctx.textAlign="left",this.ctx.textBaseline="top",this.ctx.shadowColor=t.shadowColor,this.ctx.shadowBlur=t.shadowBlur,this.ctx.shadowOffsetX=t.shadowOffsetX,this.ctx.shadowOffsetY=t.shadowOffsetY,this.ctx.fillText(e,0,0),this.canvas},e}();t.CanvasText=o},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=function(e){function t(t,n){return void 0===t&&(t=""),void 0===n&&(n={}),e.call(this,t,n)||this}return i(t,e),t.prototype.raycast=function(){this.mesh.raycast.apply(this.mesh,arguments)},t.prototype.updateText=function(){this.cleanUp(),this.canvas.drawText(this._text,{font:this._font,fillStyle:this._fillStyle,shadowBlur:this._shadowBlur,shadowColor:this._shadowColor,shadowOffsetX:this._shadowOffsetX,shadowOffsetY:this._shadowOffsetY}),this.texture=new o.Texture(this.canvas.canvas),this.texture.needsUpdate=!0,this.applyAntiAlias(),this.material?this.material.map=this.texture:(this.material=new o.MeshBasicMaterial({map:this.texture,side:this.side}),this.material.transparent=!0),this.mesh||(this.geometry=new o.PlaneGeometry(this.canvas.width,this.canvas.height),this.mesh=new o.Mesh(this.geometry,this.material),this.add(this.mesh)),this.mesh.position.x=this.canvas.width/2-this.canvas.textWidth/2+this.canvas.textWidth/2*this.align.x,this.mesh.position.y=-this.canvas.height/2+this.canvas.textHeight/2*this.align.y,this.geometry.vertices[0].x=this.geometry.vertices[2].x=-this.canvas.width/2,this.geometry.vertices[1].x=this.geometry.vertices[3].x=this.canvas.width/2,this.geometry.vertices[0].y=this.geometry.vertices[1].y=this.canvas.height/2,this.geometry.vertices[2].y=this.geometry.vertices[3].y=-this.canvas.height/2,this.geometry.verticesNeedUpdate=!0},t}(n(7).Text2D);t.MeshText2D=a},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";n.r(t),t.default="struct Volume\n{\n    float opacity_scale;\n    float brightness;\n    vec2 data_range;\n    vec2 show_range;\n    float rows;\n    float columns;\n    float slices;\n    vec2 size;\n    vec2 slice_size;\n    bool clamp_min;\n    bool clamp_max;\n    vec3 scale;\n    vec3 offset;\n    bool lighting;\n\n    // phong lighting models parameters\n    vec3 diffuseColor;\n    vec3 specular;\n    vec3 emissive;\n    float shininess;\n};\n\nvec2 compute_slice_offset(float slice, float columns, vec2 uv_slice_spacing) {\n    float column = floor((slice+0.5) / (columns));\n    float row = slice - column * columns;\n    return uv_slice_spacing * vec2(row, column);\n}\n\nvec4 sample_as_3d_texture(sampler2D tex, vec2 tex_size, vec3 texCoord, vec2 slice_size, float slices, float rows, float columns) {\n  float slice   = texCoord.z*slices*(slices-1.)/slices ;\n  float slice_z  = floor(slice);\n  float slice_z_offset = fract(slice);\n\n  vec2 pixel = 1./tex_size;\n  vec2 uv_slice_spacing = slice_size/tex_size;\n\n  vec2 coord = vec2(texCoord.x, texCoord.y);\n  vec2 uv = pixel * 0.5 + coord * (uv_slice_spacing - pixel);\n\n  vec2 slice0_offset = compute_slice_offset(slice_z, columns, uv_slice_spacing);\n  vec2 slice1_offset = compute_slice_offset(slice_z + 1.0, columns, uv_slice_spacing);\n\n  vec4 slice0_color = texture2D(tex, slice0_offset + uv);\n  vec4 slice1_color = texture2D(tex, slice1_offset + uv);\n  return mix(slice0_color, slice1_color, slice_z_offset);\n}"},function(e,t,n){"use strict";e.exports=function(e){for(var t=new Array(e),n=0;n<e;++n)t[n]=n;return t}},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t){e.exports=i,i.strict=o,i.loose=a;var n=Object.prototype.toString,r={"[object Int8Array]":!0,"[object Int16Array]":!0,"[object Int32Array]":!0,"[object Uint8Array]":!0,"[object Uint8ClampedArray]":!0,"[object Uint16Array]":!0,"[object Uint32Array]":!0,"[object Float32Array]":!0,"[object Float64Array]":!0};function i(e){return o(e)||a(e)}function o(e){return e instanceof Int8Array||e instanceof Int16Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Uint16Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array}function a(e){return r[n.call(e)]}},function(e){e.exports=JSON.parse('{"name":"ipyvolume","version":"0.6.3","description":"IPython widget for rendering 3d volumes","author":"Maarten A. Breddels","main":"lib/index.js","repository":{"type":"git","url":"https://github.com/maartenbreddels/ipyvolume.git"},"keywords":["jupyter","widgets","ipython","ipywidgets"],"license":"MIT","scripts":{"install-test":"npm install && karma start --single-run","test":"karma start --single-run","build":"npm run build:lib && npm run build:labextension && webpack --mode=production","build:lib":"tsc --project .","build:labextension":"jupyter labextension build .","prepare":"npm run build","watch":"npm-run-all -p watch:*","watch:lib":"tsc -w --project .","watch:nbextension":"webpack --watch --mode=development","watch:labextension":"jupyter labextension watch .","watch:dev":"npm-run-all -p watch:lib watch:nbextension"},"jupyterlab":{"extension":"lib/labplugin","outputDir":"../share/jupyter/labextensions/ipyvolume","sharedPackages":{"@jupyter-widgets/base":{"bundled":false,"singleton":true}}},"devDependencies":{"@jupyterlab/builder":"^3.0.0","@types/chai":"^4.1.4","@types/d3":"^5.7.2","@types/expect.js":"^0.3.29","@types/mocha":"^2.2.48","@types/node":"^12.0.2","@types/requirejs":"^2.1.31","@types/three":"^0.93.4","bqplot":"^0.5.0","chai":"^4.1.2","eslint":"^5.13.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^8.0.1","eslint-plugin-promise":"^4.0.1","eslint-plugin-standard":"^4.0.0","json-loader":"^0.5.4","jupyter-threejs":"^2.3.0","karma":"^4.0.0","karma-chai":"^0.1.0","karma-chrome-launcher":"^2.0.0","karma-mocha":"^1.3.0","karma-mocha-reporter":"^2.2.5","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.7","karma-webpack":"^3.0.5","mocha":"^3.5.3","npm-run-all":"^4.1.3","raw-loader":"~3.0.0","sinon":"^2.4.1","sinon-chai":"^2.11.0","source-map-loader":"^0.2.4","typescript":"^3.5.2","url-loader":"^0.5.7","webpack":"^4.29.1","webpack-cli":"^3.2.3"},"dependencies":{"@jupyter-widgets/base":"^1 || ^2.0.2 || ^3 || ^4 || ^5 || ^6","@jupyter-widgets/controls":"^1 || ^2","css-loader":"^0.28.4","d3":"^5.7.0","gl-matrix":"^2.0.0","is-typedarray":"~1.0.0","jquery":"^3.1.1","jslink":"^1.1.3","lodash":"^4.17.15","mustache":"^2.3.1","ndarray":"~1.0.18","ndarray-pack":"^1.2.1","screenfull":"^3.3.1","style-loader":"^0.18.2","three":"^0.97.0","three-text2d":"~0.4.1","tslint":"^5.20.0","underscore":"^1.8.3","webrtc-adapter":"^4.2.2"},"files":["dist/","css/","src/","lib/*.js","lib/three/*.js","data/","glsl/"]}')},function(e,t,n){e.exports=n(36)({args:["array","scalar","index"],pre:{body:"{}",args:[],thisVars:[],localVars:[]},body:{body:"{\nvar _inline_1_v=_inline_1_arg1_,_inline_1_i\nfor(_inline_1_i=0;_inline_1_i<_inline_1_arg2_.length-1;++_inline_1_i) {\n_inline_1_v=_inline_1_v[_inline_1_arg2_[_inline_1_i]]\n}\n_inline_1_arg0_=_inline_1_v[_inline_1_arg2_[_inline_1_arg2_.length-1]]\n}",args:[{name:"_inline_1_arg0_",lvalue:!0,rvalue:!1,count:1},{name:"_inline_1_arg1_",lvalue:!1,rvalue:!0,count:1},{name:"_inline_1_arg2_",lvalue:!1,rvalue:!0,count:4}],thisVars:[],localVars:["_inline_1_i","_inline_1_v"]},post:{body:"{}",args:[],thisVars:[],localVars:[]},funcName:"convert",blockSize:64})},function(e,t,n){"use strict";var r=n(37);function i(){this.argTypes=[],this.shimArgs=[],this.arrayArgs=[],this.arrayBlockIndices=[],this.scalarArgs=[],this.offsetArgs=[],this.offsetArgIndex=[],this.indexArgs=[],this.shapeArgs=[],this.funcName="",this.pre=null,this.body=null,this.post=null,this.debug=!1}e.exports=function(e){var t=new i;t.pre=e.pre,t.body=e.body,t.post=e.post;var n=e.args.slice(0);t.argTypes=n;for(var o=0;o<n.length;++o){var a=n[o];if("array"===a||"object"==typeof a&&a.blockIndices){if(t.argTypes[o]="array",t.arrayArgs.push(o),t.arrayBlockIndices.push(a.blockIndices?a.blockIndices:0),t.shimArgs.push("array"+o),o<t.pre.args.length&&t.pre.args[o].count>0)throw new Error("cwise: pre() block may not reference array args");if(o<t.post.args.length&&t.post.args[o].count>0)throw new Error("cwise: post() block may not reference array args")}else if("scalar"===a)t.scalarArgs.push(o),t.shimArgs.push("scalar"+o);else if("index"===a){if(t.indexArgs.push(o),o<t.pre.args.length&&t.pre.args[o].count>0)throw new Error("cwise: pre() block may not reference array index");if(o<t.body.args.length&&t.body.args[o].lvalue)throw new Error("cwise: body() block may not write to array index");if(o<t.post.args.length&&t.post.args[o].count>0)throw new Error("cwise: post() block may not reference array index")}else if("shape"===a){if(t.shapeArgs.push(o),o<t.pre.args.length&&t.pre.args[o].lvalue)throw new Error("cwise: pre() block may not write to array shape");if(o<t.body.args.length&&t.body.args[o].lvalue)throw new Error("cwise: body() block may not write to array shape");if(o<t.post.args.length&&t.post.args[o].lvalue)throw new Error("cwise: post() block may not write to array shape")}else{if("object"!=typeof a||!a.offset)throw new Error("cwise: Unknown argument type "+n[o]);t.argTypes[o]="offset",t.offsetArgs.push({array:a.array,offset:a.offset}),t.offsetArgIndex.push(o)}}if(t.arrayArgs.length<=0)throw new Error("cwise: No array arguments specified");if(t.pre.args.length>n.length)throw new Error("cwise: Too many arguments in pre() block");if(t.body.args.length>n.length)throw new Error("cwise: Too many arguments in body() block");if(t.post.args.length>n.length)throw new Error("cwise: Too many arguments in post() block");return t.debug=!!e.printCode||!!e.debug,t.funcName=e.funcName||"cwise",t.blockSize=e.blockSize||64,r(t)}},function(e,t,n){"use strict";var r=n(38);e.exports=function(e){var t=["'use strict'","var CACHED={}"],n=[],i=e.funcName+"_cwise_thunk";t.push(["return function ",i,"(",e.shimArgs.join(","),"){"].join(""));for(var o=[],a=[],s=[["array",e.arrayArgs[0],".shape.slice(",Math.max(0,e.arrayBlockIndices[0]),e.arrayBlockIndices[0]<0?","+e.arrayBlockIndices[0]+")":")"].join("")],u=[],c=[],l=0;l<e.arrayArgs.length;++l){var f=e.arrayArgs[l];n.push(["t",f,"=array",f,".dtype,","r",f,"=array",f,".order"].join("")),o.push("t"+f),o.push("r"+f),a.push("t"+f),a.push("r"+f+".join()"),s.push("array"+f+".data"),s.push("array"+f+".stride"),s.push("array"+f+".offset|0"),l>0&&(u.push("array"+e.arrayArgs[0]+".shape.length===array"+f+".shape.length+"+(Math.abs(e.arrayBlockIndices[0])-Math.abs(e.arrayBlockIndices[l]))),c.push("array"+e.arrayArgs[0]+".shape[shapeIndex+"+Math.max(0,e.arrayBlockIndices[0])+"]===array"+f+".shape[shapeIndex+"+Math.max(0,e.arrayBlockIndices[l])+"]"))}for(e.arrayArgs.length>1&&(t.push("if (!("+u.join(" && ")+")) throw new Error('cwise: Arrays do not all have the same dimensionality!')"),t.push("for(var shapeIndex=array"+e.arrayArgs[0]+".shape.length-"+Math.abs(e.arrayBlockIndices[0])+"; shapeIndex--\x3e0;) {"),t.push("if (!("+c.join(" && ")+")) throw new Error('cwise: Arrays do not all have the same shape!')"),t.push("}")),l=0;l<e.scalarArgs.length;++l)s.push("scalar"+e.scalarArgs[l]);return n.push(["type=[",a.join(","),"].join()"].join("")),n.push("proc=CACHED[type]"),t.push("var "+n.join(",")),t.push(["if(!proc){","CACHED[type]=proc=compile([",o.join(","),"])}","return proc(",s.join(","),")}"].join("")),e.debug&&console.log("-----Generated thunk:\n"+t.join("\n")+"\n----------"),new Function("compile",t.join("\n"))(r.bind(void 0,e))}},function(e,t,n){"use strict";var r=n(39);function i(e,t,n){var r,i,o=e.length,a=t.arrayArgs.length,s=t.indexArgs.length>0,u=[],c=[],l=0,f=0;for(r=0;r<o;++r)c.push(["i",r,"=0"].join(""));for(i=0;i<a;++i)for(r=0;r<o;++r)f=l,l=e[r],0===r?c.push(["d",i,"s",r,"=t",i,"p",l].join("")):c.push(["d",i,"s",r,"=(t",i,"p",l,"-s",f,"*t",i,"p",f,")"].join(""));for(c.length>0&&u.push("var "+c.join(",")),r=o-1;r>=0;--r)l=e[r],u.push(["for(i",r,"=0;i",r,"<s",l,";++i",r,"){"].join(""));for(u.push(n),r=0;r<o;++r){for(f=l,l=e[r],i=0;i<a;++i)u.push(["p",i,"+=d",i,"s",r].join(""));s&&(r>0&&u.push(["index[",f,"]-=s",f].join("")),u.push(["++index[",l,"]"].join(""))),u.push("}")}return u.join("\n")}function o(e,t,n){for(var r=e.body,i=[],o=[],a=0;a<e.args.length;++a){var s=e.args[a];if(!(s.count<=0)){var u=new RegExp(s.name,"g"),c="",l=t.arrayArgs.indexOf(a);switch(t.argTypes[a]){case"offset":var f=t.offsetArgIndex.indexOf(a);l=t.offsetArgs[f].array,c="+q"+f;case"array":c="p"+l+c;var h="l"+a,d="a"+l;if(0===t.arrayBlockIndices[l])1===s.count?"generic"===n[l]?s.lvalue?(i.push(["var ",h,"=",d,".get(",c,")"].join("")),r=r.replace(u,h),o.push([d,".set(",c,",",h,")"].join(""))):r=r.replace(u,[d,".get(",c,")"].join("")):r=r.replace(u,[d,"[",c,"]"].join("")):"generic"===n[l]?(i.push(["var ",h,"=",d,".get(",c,")"].join("")),r=r.replace(u,h),s.lvalue&&o.push([d,".set(",c,",",h,")"].join(""))):(i.push(["var ",h,"=",d,"[",c,"]"].join("")),r=r.replace(u,h),s.lvalue&&o.push([d,"[",c,"]=",h].join("")));else{for(var _=[s.name],p=[c],m=0;m<Math.abs(t.arrayBlockIndices[l]);m++)_.push("\\s*\\[([^\\]]+)\\]"),p.push("$"+(m+1)+"*t"+l+"b"+m);if(u=new RegExp(_.join(""),"g"),c=p.join("+"),"generic"===n[l])throw new Error("cwise: Generic arrays not supported in combination with blocks!");r=r.replace(u,[d,"[",c,"]"].join(""))}break;case"scalar":r=r.replace(u,"Y"+t.scalarArgs.indexOf(a));break;case"index":r=r.replace(u,"index");break;case"shape":r=r.replace(u,"shape")}}}return[i.join("\n"),r,o.join("\n")].join("\n").trim()}function a(e){for(var t=new Array(e.length),n=!0,r=0;r<e.length;++r){var i=e[r],o=i.match(/\d+/);o=o?o[0]:"",0===i.charAt(0)?t[r]="u"+i.charAt(1)+o:t[r]=i.charAt(0)+o,r>0&&(n=n&&t[r]===t[r-1])}return n?t[0]:t.join("")}e.exports=function(e,t){for(var n=t[1].length-Math.abs(e.arrayBlockIndices[0])|0,s=new Array(e.arrayArgs.length),u=new Array(e.arrayArgs.length),c=0;c<e.arrayArgs.length;++c)u[c]=t[2*c],s[c]=t[2*c+1];var l=[],f=[],h=[],d=[],_=[];for(c=0;c<e.arrayArgs.length;++c){e.arrayBlockIndices[c]<0?(h.push(0),d.push(n),l.push(n),f.push(n+e.arrayBlockIndices[c])):(h.push(e.arrayBlockIndices[c]),d.push(e.arrayBlockIndices[c]+n),l.push(0),f.push(e.arrayBlockIndices[c]));for(var p=[],m=0;m<s[c].length;m++)h[c]<=s[c][m]&&s[c][m]<d[c]&&p.push(s[c][m]-h[c]);_.push(p)}var v=["SS"],g=["'use strict'"],y=[];for(m=0;m<n;++m)y.push(["s",m,"=SS[",m,"]"].join(""));for(c=0;c<e.arrayArgs.length;++c){v.push("a"+c),v.push("t"+c),v.push("p"+c);for(m=0;m<n;++m)y.push(["t",c,"p",m,"=t",c,"[",h[c]+m,"]"].join(""));for(m=0;m<Math.abs(e.arrayBlockIndices[c]);++m)y.push(["t",c,"b",m,"=t",c,"[",l[c]+m,"]"].join(""))}for(c=0;c<e.scalarArgs.length;++c)v.push("Y"+c);if(e.shapeArgs.length>0&&y.push("shape=SS.slice(0)"),e.indexArgs.length>0){var b=new Array(n);for(c=0;c<n;++c)b[c]="0";y.push(["index=[",b.join(","),"]"].join(""))}for(c=0;c<e.offsetArgs.length;++c){var x=e.offsetArgs[c],w=[];for(m=0;m<x.offset.length;++m)0!==x.offset[m]&&(1===x.offset[m]?w.push(["t",x.array,"p",m].join("")):w.push([x.offset[m],"*t",x.array,"p",m].join("")));0===w.length?y.push("q"+c+"=0"):y.push(["q",c,"=",w.join("+")].join(""))}var E=r([].concat(e.pre.thisVars).concat(e.body.thisVars).concat(e.post.thisVars));for((y=y.concat(E)).length>0&&g.push("var "+y.join(",")),c=0;c<e.arrayArgs.length;++c)g.push("p"+c+"|=0");e.pre.body.length>3&&g.push(o(e.pre,e,u));var A=o(e.body,e,u),M=function(e){for(var t=0,n=e[0].length;t<n;){for(var r=1;r<e.length;++r)if(e[r][t]!==e[0][t])return t;++t}return t}(_);M<n?g.push(function(e,t,n,r){for(var o=t.length,a=n.arrayArgs.length,s=n.blockSize,u=n.indexArgs.length>0,c=[],l=0;l<a;++l)c.push(["var offset",l,"=p",l].join(""));for(l=e;l<o;++l)c.push(["for(var j"+l+"=SS[",t[l],"]|0;j",l,">0;){"].join("")),c.push(["if(j",l,"<",s,"){"].join("")),c.push(["s",t[l],"=j",l].join("")),c.push(["j",l,"=0"].join("")),c.push(["}else{s",t[l],"=",s].join("")),c.push(["j",l,"-=",s,"}"].join("")),u&&c.push(["index[",t[l],"]=j",l].join(""));for(l=0;l<a;++l){for(var f=["offset"+l],h=e;h<o;++h)f.push(["j",h,"*t",l,"p",t[h]].join(""));c.push(["p",l,"=(",f.join("+"),")"].join(""))}for(c.push(i(t,n,r)),l=e;l<o;++l)c.push("}");return c.join("\n")}(M,_[0],e,A)):g.push(i(_[0],e,A)),e.post.body.length>3&&g.push(o(e.post,e,u)),e.debug&&console.log("-----Generated cwise routine for ",t,":\n"+g.join("\n")+"\n----------");var S=[e.funcName||"unnamed","_cwise_loop_",s[0].join("s"),"m",M,a(u)].join("");return new Function(["function ",S,"(",v.join(","),"){",g.join("\n"),"} return ",S].join(""))()}},function(e,t,n){"use strict";e.exports=function(e,t,n){return 0===e.length?e:t?(n||e.sort(t),function(e,t){for(var n=1,r=e.length,i=e[0],o=e[0],a=1;a<r;++a)if(o=i,t(i=e[a],o)){if(a===n){n++;continue}e[n++]=i}return e.length=n,e}(e,t)):(n||e.sort(),function(e){for(var t=1,n=e.length,r=e[0],i=e[0],o=1;o<n;++o,i=r)if(i=r,(r=e[o])!==i){if(o===t){t++;continue}e[t++]=r}return e.length=t,e}(e))}},function(e,t,n){"use strict";n.r(t),t.default="// mesh-vertex shader\n#define USE_SCALE_X\n#define USE_SCALE_Y\n#define USE_SCALE_Z\n#include <scales>\n#include <ipyvolume>\n\n\n // for animation, all between 0 and 1\nuniform float animation_time_x;\nuniform float animation_time_y;\nuniform float animation_time_z;\nuniform float animation_time_u;\nuniform float animation_time_v;\nuniform float animation_time_color;\n\nuniform vec2 domain_x;\nuniform vec2 domain_y;\nuniform vec2 domain_z;\n\nvarying vec4 vertex_color;\nvarying vec3 vertex_position;\nvarying vec3 vPositionEye;\n\nattribute vec3 position_previous;\nuniform vec3 position_offset;\n\n#ifdef USE_TEXTURE\n    attribute float u;\n    attribute float v;\n    attribute float u_previous;\n    attribute float v_previous;\n    varying vec2 vertex_uv;\n#endif\n\n#ifdef USE_COLORMAP\n    attribute float color_current;\n    attribute float color_previous;\n    uniform vec2 domain_color;\n#else\n    attribute vec4 color_current;\n    attribute vec4 color_previous;\n#endif\nuniform sampler2D colormap;\n\nuniform float id_offset;\n\nvec4 encodeId(float v) {\n    vec4 color;\n    // matches Figure.readId\n    color.b = floor(v / 256.0 / 256.0);\n    color.g = floor((v - color.b * 256.0 * 256.0) / 256.0);\n    color.r = floor(v - color.b * 256.0 * 256.0 - color.g * 256.0);\n    color.a = 255.0;\n    // normalize\n    return color / 255.0;\n}\n\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n    // similar to phong\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <uv2_pars_vertex>\n    #include <envmap_pars_vertex>\n    #include <bsdfs>\n    #include <lights_pars_begin>\n    #include <color_pars_vertex>\n    #include <fog_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <shadowmap_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n\n#ifdef AS_LAMBERT\n    #define LAMBERT\n    varying vec3 vLightFront;\n\n    #ifdef DOUBLE_SIDED\n        varying vec3 vLightBack;\n    #endif\n\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <uv2_pars_vertex>\n    #include <envmap_pars_vertex>\n    #include <bsdfs>\n    #include <lights_pars_begin>\n    #include <color_pars_vertex>\n    #include <fog_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <shadowmap_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_LAMBERT\n\n#ifdef AS_PHONG\n    #define PHONG\n    varying vec3 vViewPosition;\n\n    #ifndef FLAT_SHADED\n        varying vec3 vNormal;\n    #endif\n\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <uv2_pars_vertex>\n    #include <displacementmap_pars_vertex>\n    #include <envmap_pars_vertex>\n    #include <color_pars_vertex>\n    #include <fog_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <shadowmap_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_PHONG\n\n#ifdef AS_PHYSICAL\n    #define PHYSICAL\n    varying vec3 vViewPosition;\n\n    #ifndef FLAT_SHADED\n        varying vec3 vNormal;\n    #endif\n\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <uv2_pars_vertex>\n    #include <displacementmap_pars_vertex>\n    #include <color_pars_vertex>\n    #include <fog_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <shadowmap_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_PHYSICAL\n#ifdef AS_DEPTH\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <displacementmap_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_DEPTH\n#ifdef AS_DISTANCE\n    #define DISTANCE\n\n    varying vec3 vWorldPosition;\n\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <displacementmap_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_DISTANCE\n\nvoid main(void) {\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n    #include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#include <begin_vertex>\n#endif //defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n#ifdef AS_LAMBERT\n    #include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#include <begin_vertex>\n#endif //AS_LAMBERT\n#ifdef AS_PHONG\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n    #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\t    vNormal = normalize( transformedNormal );\n    #endif\n\n\t#include <begin_vertex>\n#endif //AS_PHONG\n#ifdef AS_PHYSICAL\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n    #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\t    vNormal = normalize( transformedNormal );\n    #endif\n\n\t#include <begin_vertex>\n#endif //AS_PHYSICAL\n#ifdef AS_DEPTH\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n#endif //AS_DEPTH\n#ifdef AS_DISTANCE\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n#endif //AS_DISTANCE\n\n    vec3 animation_time = vec3(animation_time_x, animation_time_y, animation_time_z);\n    vec3 animated_position = mix(position_previous, position, animation_time) + position_offset;\n\n    transformed = vec3(SCALE_X(animated_position.x), SCALE_Y(animated_position.y), SCALE_Z(animated_position.z));\n    vertex_position = transformed;\n    // gl_Position = projectionMatrix *\n    //             modelViewMatrix *\n    //             vec4(model_pos, 1.0);\n    // vec3 positionEye = ( modelViewMatrix * vec4(model_pos, 1.0 ) ).xyz;\n    // vertex_position = positionEye;\n\n    #if defined( AS_COORDINATE )\n        // vertex_color = vec4(model_pos + vec3(0.5, 0.5, 0.5), 1.0);\n        vertex_color = vec4(transformed + vec3(0.5, 0.5, 0.5), 1.0);\n    #elif defined( AS_ID )\n        vertex_color = encodeId(id_offset);\n    #else\n        #ifdef USE_COLORMAP\n            float color_animated = mix(color_previous, color_current, animation_time_color);\n            float color_index = scale_transform_linear(color_animated, vec2(0.0, 1.0), domain_color);\n            vertex_color = texture2D(colormap, vec2(color_index, 0));\n        #else\n            vertex_color = mix(color_previous, color_current, animation_time_color);\n        #endif\n    #endif\n\n\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( transformed, 1.0 );;\n    // vec3 model_pos = vec3(SCALE_X(animated_position.x), SCALE_Y(animated_position.y), SCALE_Z(animated_position.z));\n    // gl_Position = projectionMatrix *\n    //             modelViewMatrix *\n    //             vec4(model_pos, 1.0);\n    // vec3 positionEye = ( modelViewMatrix * vec4(model_pos, 1.0 ) ).xyz;\n    // vertex_position = positionEye;\n#endif //defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n\n#ifdef USE_TEXTURE\n    vertex_uv = vec2(mix(u_previous, u, animation_time_u), mix(v_previous, v, animation_time_v));\n#endif\n\n    #if defined(USE_COLOR) && !(defined(AS_DEPTH) || defined(AS_DISTANCE))\n        vColor = vertex_color.rgb;\n    #endif\n\n\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n    vec3 positionEye = ( modelViewMatrix * vec4(transformed, 1.0 ) ).xyz;\n    vPositionEye = positionEye;\n\t// #include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#endif //defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n#ifdef AS_LAMBERT\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#endif //AS_LAMBERT\n#ifdef AS_PHONG\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#endif //AS_PHONG\n#ifdef AS_PHYSICAL\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#endif //AS_PHYSICAL\n#ifdef AS_DISTANCE\n    #include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvWorldPosition = worldPosition.xyz;\n#endif //AS_DISTANCE\n#ifdef AS_DEPTH\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#endif //AS_DEPTH\n}\n"},function(e,t,n){"use strict";n.r(t),t.default="#include <ipyvolume>\n\n#ifdef USE_VOLUME\nuniform sampler2D volume_texture;\nuniform sampler2D transfer_function;\nuniform Volume volume;\n#endif //USE_VOLUME\n\n\n// mesh-fragment shader\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\nvarying vec4 vertex_color;\nvarying vec3 vertex_position;\nvarying vec2 vertex_uv;\nvarying vec3 vPositionEye;\n\n#ifdef USE_TEXTURE\n    uniform sampler2D texture;\n    uniform sampler2D texture_previous;\n    uniform float animation_time_texture;\n#endif\n\n    // taken similar to phong shading\n    #include <common>\n    #include <packing>\n    #include <dithering_pars_fragment>\n    #include <color_pars_fragment>\n    #include <uv_pars_fragment>\n    #include <uv2_pars_fragment>\n    #include <map_pars_fragment>\n    #include <alphamap_pars_fragment>\n    #include <aomap_pars_fragment>\n    #include <lightmap_pars_fragment>\n    #include <emissivemap_pars_fragment>\n    #include <envmap_pars_fragment>\n    #include <gradientmap_pars_fragment>\n    #include <fog_pars_fragment>\n    #include <bsdfs>\n    #include <lights_pars_begin>\n    // #include <lights_phong_pars_fragment>\n    #include <shadowmap_pars_fragment>\n    #include <shadowmask_pars_fragment> // extra compared to phong\n\n    #include <bumpmap_pars_fragment>\n    #include <normalmap_pars_fragment>\n    #include <specularmap_pars_fragment>\n    #include <logdepthbuf_pars_fragment>\n    #include <clipping_planes_pars_fragment>\n    void main(void)\n    {\n        #if defined( AS_COORDINATE ) || defined( AS_ID )\n            // should we ignore shading for RGB pass?\n            gl_FragColor = vec4(vertex_color.rgb, 1.0);\n        #else\n            // 0 when in shadow, 1 if visible\n            float shadow_visibility = getShadowMask();\n            #ifdef IS_LINE\n                gl_FragColor = vec4(vertex_color.rgb * shadow_visibility, vertex_color.a);\n            #else\n                vec3 fdx = dFdx( vPositionEye );\n                vec3 fdy = dFdy( vPositionEye );\n                vec3 normal = normalize( cross( fdx, fdy ) );\n                float diffuse = dot( normal, vec3( 0.0, 0.0, 1.0 ) );\n\n                #if defined(USE_TEXTURE)\n                    vec4 sample = mix(texture2D(texture_previous, vertex_uv), texture2D(texture, vertex_uv), animation_time_texture);\n                    gl_FragColor = vec4(clamp(diffuse, 0.2, 1.) * sample.rgb * shadow_visibility, 1.0);\n                #elif defined(USE_VOLUME)\n\t\t\t\t\tvec3 sample_position = vertex_position*volume.scale + vec3(0.5, 0.5, 0.5);\n\t\t\t\t\tvec4 sample = sample_as_3d_texture(volume_texture, volume.size, sample_position, volume.slice_size, volume.slices, volume.rows, volume.columns);\n\n\t\t\t\t\t// quite similar to volr-fragment.glsl\n\t\t\t\t\tfloat raw_data_value = sample.a;\n\t\t\t\t\tfloat scaled_data_value = (raw_data_value*(volume.data_range[1] - volume.data_range[0])) + volume.data_range[0];\n\t\t\t\t\tfloat data_value = (scaled_data_value - volume.show_range[0])/(volume.show_range[1] - volume.show_range[0]);\n\t\t\t\t\tvec4 color_sample = texture2D(transfer_function, vec2(data_value, 0.5));\n\n\t\t\t\t\t// TODO: 30 should be configurable\n\t\t\t\t\tgl_FragColor.rgb = color_sample.rgb * volume.brightness * color_sample.a * 30.;\n\t\t\t\t\tgl_FragColor.a = 1.;\n                #else\n                    gl_FragColor = vec4(clamp(diffuse, 0.2, 1.) * vertex_color.rgb * shadow_visibility, vertex_color.a);\n                #endif // USE_TEXTURE / USE_VOLUME\n            #endif // IS_LINE\n        #endif // defined( AS_COORDINATE ) || defined( AS_ID )\n    }\n#endif //defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n\n\n\n#ifdef AS_LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\nvarying vec3 vLightFront;\n\n#ifdef DOUBLE_SIDED\n\n\tvarying vec3 vLightBack;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\n\t#include <lightmap_fragment>\n\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\n\t#else\n\n\t\treflectedLight.directDiffuse = vLightFront;\n\n\t#endif\n\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n#endif //AS_LAMBERT\n#ifdef AS_PHONG\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n#endif //AS_PHONG\n#ifdef AS_PHYSICAL\n    #define PHYSICAL\n    uniform vec3 diffuse;\n    uniform vec3 emissive;\n    uniform float roughness;\n    uniform float metalness;\n    uniform float opacity;\n    uniform float emissiveIntensity;\n\n    #ifndef STANDARD\n        uniform float clearCoat;\n        uniform float clearCoatRoughness;\n    #endif\n\n    varying vec3 vViewPosition;\n\n    #ifndef FLAT_SHADED\n        varying vec3 vNormal;\n    #endif\n\n    #include <common>\n    #include <packing>\n    #include <dithering_pars_fragment>\n    #include <color_pars_fragment>\n    #include <uv_pars_fragment>\n    #include <uv2_pars_fragment>\n    #include <map_pars_fragment>\n    #include <alphamap_pars_fragment>\n    #include <aomap_pars_fragment>\n    #include <lightmap_pars_fragment>\n    #include <emissivemap_pars_fragment>\n    #include <bsdfs>\n    #include <cube_uv_reflection_fragment>\n    #include <envmap_pars_fragment>\n    #include <envmap_physical_pars_fragment>\n    #include <fog_pars_fragment>\n    #include <lights_pars_begin>\n    #include <lights_physical_pars_fragment>\n    #include <shadowmap_pars_fragment>\n    #include <bumpmap_pars_fragment>\n    #include <normalmap_pars_fragment>\n    #include <roughnessmap_pars_fragment>\n    #include <metalnessmap_pars_fragment>\n    #include <logdepthbuf_pars_fragment>\n    #include <clipping_planes_pars_fragment>\n\nvoid main(void)\n{\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0, 1.0, 1.0, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive * emissiveIntensity;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n#endif //AS_PHYSICAL\n#ifdef AS_DISTANCE\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main () {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist );\n\n}\n#endif//AS_DISTANCE\n\n#ifdef AS_DEPTH\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\n\t#endif\n\n}\n#endif //AS_DEPTH\n"},function(e){e.exports=JSON.parse('{"normals":[[0.6722792983055115,0.7387584447860718,0.04771288111805916],[0.7488530874252319,0.6626735329627991,0.009104926139116287],[0.992845356464386,0.1163879781961441,-0.026680562645196915],[0.988349199295044,0.1501944661140442,-0.0246476661413908],[0.9485647082328796,-0.2816155254840851,-0.14462943375110626],[0.925125002861023,-0.375169962644577,-0.058234188705682755],[0.988349199295044,0.1501944661140442,-0.0246476661413908],[0.992845356464386,0.1163879781961441,-0.026680562645196915],[0.9870246648788452,-0.13484345376491547,0.08717460930347443],[0.9485647082328796,-0.2816155254840851,-0.14462943375110626],[0.992845356464386,0.1163879781961441,-0.026680562645196915],[0.9768072366714478,0.1450829803943634,0.1574755609035492],[0.9768072366714478,0.1450829803943634,0.1574755609035492],[0.992845356464386,0.1163879781961441,-0.026680562645196915],[0.7488530874252319,0.6626735329627991,0.009104926139116287],[0.7618468403816223,0.646384596824646,0.04214463010430336],[0.4218263030052185,0.893310010433197,-0.15511257946491241],[0.35690364241600037,0.9336850047111511,-0.029189903289079666],[0.2723502814769745,0.9614163041114807,-0.03878369182348251],[0.2525371015071869,0.9163177609443665,-0.3107839524745941],[0.9953411221504211,0.09576618671417236,0.011168275028467178],[0.6457383632659912,0.7610315084457397,0.06207112967967987],[0.6722792983055115,0.7387584447860718,0.04771288111805916],[0.988349199295044,0.1501944661140442,-0.0246476661413908],[0.9291253089904785,-0.3697633743286133,-0.0010595708154141903],[0.9953411221504211,0.09576618671417236,0.011168275028467178],[0.988349199295044,0.1501944661140442,-0.0246476661413908],[0.925125002861023,-0.375169962644577,-0.058234188705682755],[-0.007396361790597439,-0.9999653697013855,0.003803872736170888],[-0.009718821384012699,-0.9997833967208862,-0.018406139686703682],[-0.007655521389096975,-0.9999698996543884,0.001327343052253127],[0.5234197378158569,0.8474974632263184,-0.08820322155952454],[0.8727967739105225,0.48596683144569397,-0.04540829733014107],[0.6919021606445312,0.6509979963302612,-0.3122063875198364],[0.5376883745193481,0.8232352137565613,-0.18213941156864166],[0.6919021606445312,0.6509979963302612,-0.3122063875198364],[0.8727967739105225,0.48596683144569397,-0.04540829733014107],[0.9940851926803589,0.10859742015600204,0.0011142655275762081],[0.8643118143081665,0.35945847630500793,-0.35178789496421814],[-0.003276081522926688,-0.9999516010284424,0.00927703082561493],[-0.0032760819885879755,-0.9999516606330872,0.00927703082561493],[-0.003276081522926688,-0.9999516010284424,0.009277029894292355],[-0.003276081755757332,-0.9999516606330872,0.009277029894292355],[0.5376883745193481,0.8232352137565613,-0.18213941156864166],[0.6919021606445312,0.6509979963302612,-0.3122063875198364],[0.37462636828422546,0.6200053691864014,-0.6893826723098755],[0.41769927740097046,0.4760781228542328,-0.7738713026046753],[0.6919021606445312,0.6509979963302612,-0.3122063875198364],[0.8643118143081665,0.35945847630500793,-0.35178789496421814],[0.34577468037605286,0.5889291763305664,-0.7304808497428894],[0.37462636828422546,0.6200053691864014,-0.6893826723098755],[0.9940851926803589,0.10859742015600204,0.0011142655275762081],[0.994776725769043,-0.10139967501163483,0.011717659421265125],[0.9535025358200073,0.03478159382939339,-0.29937097430229187],[0.8643118143081665,0.35945847630500793,-0.35178789496421814],[0.5455085635185242,-0.8378602266311646,0.020260393619537354],[0.9291253089904785,-0.3697633743286133,-0.0010595708154141903],[0.925125002861023,-0.375169962644577,-0.058234188705682755],[0.5313248038291931,-0.8438926935195923,-0.07442483305931091],[0.9477870464324951,-0.3114435374736786,0.06857644021511078],[0.7406501770019531,-0.43752405047416687,-0.5099119544029236],[0.9485647082328796,-0.2816155254840851,-0.14462943375110626],[0.9870246648788452,-0.13484345376491547,0.08717460930347443],[0.7618468403816223,0.646384596824646,0.04214463010430336],[0.8426366448402405,0.4910145699977875,0.22106125950813293],[0.9381476044654846,0.19051600992679596,0.28910666704177856],[0.9768072366714478,0.1450829803943634,0.1574755609035492],[0.7488530874252319,0.6626735329627991,0.009104926139116287],[0.35690364241600037,0.9336850047111511,-0.029189903289079666],[0.4218263030052185,0.893310010433197,-0.15511257946491241],[0.7618468403816223,0.646384596824646,0.04214463010430336],[0.3756128251552582,0.9234598278999329,0.0783376395702362],[0.35690364241600037,0.9336850047111511,-0.029189903289079666],[0.7488530874252319,0.6626735329627991,0.009104926139116287],[0.6722792983055115,0.7387584447860718,0.04771288111805916],[0.6457383632659912,0.7610315084457397,0.06207112967967987],[0.38265588879585266,0.9199751615524292,0.08497147262096405],[0.3756128251552582,0.9234598278999329,0.0783376395702362],[0.6722792983055115,0.7387584447860718,0.04771288111805916],[0.5150745511054993,0.8528239727020264,-0.08596205711364746],[0.426266610622406,0.8994579315185547,-0.09629113972187042],[0.5234197378158569,0.8474974632263184,-0.08820322155952454],[0.5376883745193481,0.8232352137565613,-0.18213941156864166],[0.7433125972747803,-0.6685736179351807,0.02226567082107067],[0.7520958781242371,-0.6584120392799377,0.02907477132976055],[0.28822171688079834,-0.9561523795127869,0.05196940153837204],[0.29988452792167664,-0.9533481597900391,0.034590303897857666],[0.8036648631095886,0.5537902116775513,-0.217805415391922],[0.6157482266426086,0.7863949537277222,-0.049367424100637436],[0.5150745511054993,0.8528239727020264,-0.08596205711364746],[0.5376883745193481,0.8232352137565613,-0.18213941156864166],[0.7460655570030212,-0.6658671498298645,0.0026501123793423176],[0.7433125972747803,-0.6685736179351807,0.02226567082107067],[0.29988452792167664,-0.9533481597900391,0.034590303897857666],[0.31369441747665405,-0.9492788314819336,0.02157321386039257],[0.9991246461868286,-0.034952837973833084,-0.022984294220805168],[0.812343418598175,0.5824594497680664,-0.0289674773812294],[0.7433125972747803,-0.6685736179351807,0.02226567082107067],[0.7460655570030212,-0.6658671498298645,0.0026501123793423176],[0.9962080717086792,-0.0641126036643982,-0.05881289765238762],[0.9991246461868286,-0.034952837973833084,-0.022984294220805168],[0.7460655570030212,-0.6658671498298645,0.0026501123793423176],[0.7457423210144043,-0.6656472086906433,-0.027963895350694656],[0.7457423210144043,-0.6656472086906433,-0.027963895350694656],[0.7460655570030212,-0.6658671498298645,0.0026501123793423176],[0.31369441747665405,-0.9492788314819336,0.02157321386039257],[0.34119275212287903,-0.9399923086166382,0.0014598877169191837],[0.996460497379303,-0.06455107778310776,-0.053849659860134125],[0.9962080717086792,-0.0641126036643982,-0.05881289765238762],[0.7457423210144043,-0.6656472086906433,-0.027963895350694656],[0.7923128604888916,-0.6072733998298645,-0.05881620571017265],[0.7923128604888916,-0.6072733998298645,-0.05881620571017265],[0.7457423210144043,-0.6656472086906433,-0.027963895350694656],[0.34119275212287903,-0.9399923086166382,0.0014598877169191837],[0.3986782729625702,-0.9157551527023315,-0.04947711527347565],[0.9978228807449341,-0.05201764032244682,-0.040543824434280396],[0.996460497379303,-0.06455107778310776,-0.053849659860134125],[0.7923128604888916,-0.6072733998298645,-0.05881620571017265],[0.8045254349708557,-0.5899364948272705,-0.06865765154361725],[0.8045254349708557,-0.5899364948272705,-0.06865765154361725],[0.7923128604888916,-0.6072733998298645,-0.05881620571017265],[0.3986782729625702,-0.9157551527023315,-0.04947711527347565],[0.42811119556427,-0.9006050229072571,-0.07504191249608994],[0.9999374747276306,-0.010656150989234447,-0.0033726822584867477],[0.9999375343322754,-0.010656150989234447,-0.003372682724148035],[0.9999374747276306,-0.010656150057911873,-0.0033726817928254604],[0.9999375343322754,-0.010656151920557022,-0.0033726824913173914],[0.4665221869945526,-0.8773672580718994,-0.1121765673160553],[0.4665221571922302,-0.8773673176765442,-0.1121765673160553],[0.4665221869945526,-0.877367377281189,-0.1121765673160553],[0.4665221869945526,-0.877367377281189,-0.1121765673160553],[0.998106837272644,0.010563117451965809,-0.060587748885154724],[0.9981068968772888,0.010563117451965809,-0.060587748885154724],[0.9981070160865784,0.010563119314610958,-0.06058775633573532],[0.9981069564819336,0.010563118383288383,-0.06058775261044502],[0.511317789554596,-0.8463999629020691,-0.14886613190174103],[0.511317789554596,-0.8464000821113586,-0.14886613190174103],[0.5113177299499512,-0.8463999629020691,-0.14886613190174103],[0.511317789554596,-0.8463999629020691,-0.14886611700057983],[0.7703723907470703,0.364370197057724,-0.5232215523719788],[0.7184544801712036,0.4904933571815491,-0.4931929409503937],[0.7226928472518921,-0.0716477632522583,-0.6874456405639648],[0.7748353481292725,0.075252965092659,-0.6276678442955017],[0.7748353481292725,0.075252965092659,-0.6276678442955017],[0.7226928472518921,-0.0716477632522583,-0.6874456405639648],[0.3967260420322418,-0.543319821357727,-0.739872932434082],[0.36102649569511414,0.7485342025756836,0.5561981797218323],[0.36102646589279175,0.7485341429710388,0.5561981201171875],[0.43389180302619934,0.48191967606544495,0.7612432837486267],[0.4282975196838379,0.5146201848983765,0.7427835464477539],[0.3756128251552582,0.9234598278999329,0.0783376395702362],[0.30924931168556213,0.946604311466217,0.09113304316997528],[0.2723502814769745,0.9614163041114807,-0.03878369182348251],[0.35690364241600037,0.9336850047111511,-0.029189903289079666],[0.38265588879585266,0.9199751615524292,0.08497147262096405],[0.32308486104011536,0.9413825273513794,0.09703188389539719],[0.30924931168556213,0.946604311466217,0.09113304316997528],[0.3756128251552582,0.9234598278999329,0.0783376395702362],[0.5150745511054993,0.8528239727020264,-0.08596205711364746],[0.4702720046043396,0.8819447159767151,-0.031901802867650986],[0.4184861183166504,0.9036914706230164,-0.09061478823423386],[0.426266610622406,0.8994579315185547,-0.09629113972187042],[0.6157482266426086,0.7863949537277222,-0.049367424100637436],[0.49254393577575684,0.8694345355033875,0.03852318972349167],[0.4702720046043396,0.8819447159767151,-0.031901802867650986],[0.5150745511054993,0.8528239727020264,-0.08596205711364746],[0.4887421131134033,0.8688849806785583,-0.07854924350976944],[0.4874696135520935,0.8697015643119812,-0.0774112120270729],[0.5186543464660645,0.8537455201148987,-0.04600219428539276],[0.812343418598175,0.5824594497680664,-0.0289674773812294],[0.4989731013774872,0.8658507466316223,-0.03644828870892525],[0.4985501170158386,0.8660682439804077,-0.0370621494948864],[0.4874696135520935,0.8697015643119812,-0.0774112120270729],[0.4887421131134033,0.8688849806785583,-0.07854924350976944],[0.5233396887779236,0.852124035358429,-0.0002806649135891348],[0.5233396887779236,0.8521241545677185,-0.00028066494269296527],[0.4985501170158386,0.8660682439804077,-0.0370621494948864],[0.4989731013774872,0.8658507466316223,-0.03644828870892525],[0.5939923524856567,0.8027538657188416,0.05252972990274429],[0.5939922332763672,0.8027538061141968,0.05252972990274429],[0.593992292881012,0.8027538061141968,0.05252972990274429],[0.593992292881012,0.802753746509552,0.05252972990274429],[0.6263990998268127,0.7756832242012024,0.0770687535405159],[0.6263991594314575,0.7756832838058472,0.0770687684416771],[0.6263991594314575,0.7756832242012024,0.0770687684416771],[0.6263991594314575,0.7756832838058472,0.0770687609910965],[0.6624122858047485,0.7462863922119141,0.06531935185194016],[0.6624122858047485,0.7462863922119141,0.06531934440135956],[0.6624122858047485,0.7462863922119141,0.06531935185194016],[0.6624122262001038,0.7462863326072693,0.06531935185194016],[0.7703723907470703,0.364370197057724,-0.5232215523719788],[0.5710009336471558,0.715075671672821,-0.40326735377311707],[0.7184544801712036,0.4904933571815491,-0.4931929409503937],[0.37462636828422546,0.6200053691864014,-0.6893826723098755],[0.016368180513381958,0.41040074825286865,-0.911758303642273],[0.07877559959888458,-0.25413259863853455,-0.9639558792114258],[0.41769927740097046,0.4760781228542328,-0.7738713026046753],[0.37462636828422546,0.6200053691864014,-0.6893826723098755],[0.34577468037605286,0.5889291763305664,-0.7304808497428894],[0.0019773005042225122,0.5299733281135559,-0.8480120301246643],[0.016368180513381958,0.41040074825286865,-0.911758303642273],[0.9417835474014282,-0.049175508320331573,0.3326040506362915],[0.9091628789901733,-0.16485607624053955,0.38242053985595703],[0.9477870464324951,-0.3114435374736786,0.06857644021511078],[0.9870246648788452,-0.13484345376491547,0.08717460930347443],[0.14885027706623077,-0.9885218143463135,0.0258492399007082],[0.5455085635185242,-0.8378602266311646,0.020260393619537354],[0.5313248038291931,-0.8438926935195923,-0.07442483305931091],[0.1343700885772705,-0.9893593192100525,-0.05579141527414322],[0.994776725769043,-0.10139967501163483,0.011717659421265125],[0.9454845190048218,-0.18804335594177246,0.26589235663414],[0.9277397990226746,-0.26224467158317566,0.2655685245990753],[0.9816802144050598,-0.18131236732006073,0.05856389179825783],[0.07883576303720474,-0.9942485690116882,-0.07248955965042114],[0.07883576303720474,-0.9942484498023987,-0.07248955219984055],[0.07883577048778534,-0.9942485690116882,-0.07248955965042114],[0.9535025358200073,0.03478159382939339,-0.29937097430229187],[0.994776725769043,-0.10139967501163483,0.011717659421265125],[0.9816802144050598,-0.18131236732006073,0.05856389179825783],[0.9511677026748657,-0.04723962023854256,-0.3050382733345032],[-0.19625768065452576,-0.11801380664110184,-0.9734246730804443],[-0.2926790714263916,-0.3033236265182495,-0.9068261384963989],[-0.32536008954048157,-0.23565585911273956,-0.9157549738883972],[-0.3316536545753479,-0.3071261942386627,-0.8920086622238159],[-0.05927730351686478,0.1270371675491333,-0.9901250600814819],[-0.05927730351686478,0.1270371526479721,-0.9901250600814819],[-0.2926790714263916,-0.3033236265182495,-0.9068261384963989],[-0.19625768065452576,-0.11801380664110184,-0.9734246730804443],[0.5783531069755554,0.037188682705163956,-0.8149384260177612],[0.5758730173110962,0.09083724021911621,-0.8124769330024719],[0.5564614534378052,0.26213952898979187,-0.7884374260902405],[0.5564614534378052,0.26213952898979187,-0.7884373664855957],[0.6000460982322693,-0.09697715193033218,-0.794065535068512],[0.5758730173110962,0.09083724021911621,-0.8124769330024719],[0.5783531069755554,0.037188682705163956,-0.8149384260177612],[0.6286618709564209,-0.02641300857067108,-0.7772300839424133],[0.9816802144050598,-0.18131236732006073,0.05856389179825783],[0.9277397990226746,-0.26224467158317566,0.2655685245990753],[0.880256712436676,-0.2203819453716278,0.42021414637565613],[0.9598467946052551,-0.14224128425121307,0.24178816378116608],[-0.4995267689228058,-0.6674507260322571,0.5522522330284119],[-0.4995267689228058,-0.6674506664276123,0.5522521734237671],[-0.7392453551292419,-0.5592052340507507,0.37524107098579407],[-0.8281887769699097,-0.48730725049972534,0.2768303155899048],[0.9511677026748657,-0.04723962023854256,-0.3050382733345032],[0.9816802144050598,-0.18131236732006073,0.05856389179825783],[0.9598467946052551,-0.14224128425121307,0.24178816378116608],[0.9868009686470032,0.016181373968720436,-0.16112716495990753],[-0.3316536545753479,-0.3071261942386627,-0.8920086622238159],[-0.32536008954048157,-0.23565585911273956,-0.9157549738883972],[-0.21552973985671997,0.056692883372306824,-0.9748501777648926],[-0.21570317447185516,0.05686187371611595,-0.9748018980026245],[0.6000460982322693,-0.09697715193033218,-0.794065535068512],[0.6286618709564209,-0.02641300857067108,-0.7772300839424133],[0.7030335664749146,0.08082249015569687,-0.7065488696098328],[0.6975869536399841,0.09133404493331909,-0.7106549739837646],[0.9598467946052551,-0.14224128425121307,0.24178816378116608],[0.880256712436676,-0.2203819453716278,0.42021414637565613],[0.5838391780853271,0.21363331377506256,0.7832577228546143],[0.9488987326622009,0.10196034610271454,0.29865553975105286],[-0.46847423911094666,-0.1571734994649887,0.8693839311599731],[-0.4684741497039795,-0.15717348456382751,0.8693838119506836],[-0.8334598541259766,-0.12069139629602432,0.539238452911377],[-0.8397976756095886,-0.11944134533405304,0.5295974612236023],[0.9868009686470032,0.016181373968720436,-0.16112716495990753],[0.9598467946052551,-0.14224128425121307,0.24178816378116608],[0.9488987326622009,0.10196034610271454,0.29865553975105286],[0.994851291179657,0.025057118386030197,-0.09819892793893814],[-0.21570317447185516,0.05686187371611595,-0.9748018980026245],[-0.21552973985671997,0.056692883372306824,-0.9748501777648926],[-0.14557555317878723,-0.182363361120224,-0.9723946452140808],[-0.1493588238954544,-0.2086780071258545,-0.9665119051933289],[0.6975869536399841,0.09133404493331909,-0.7106549739837646],[0.7030335664749146,0.08082249015569687,-0.7065488696098328],[0.7033784985542297,-0.1011778935790062,-0.7035778760910034],[0.7059258818626404,-0.09110114723443985,-0.7024023532867432],[0.9488987326622009,0.10196034610271454,0.29865553975105286],[0.5838391780853271,0.21363331377506256,0.7832577228546143],[0.5448250770568848,0.30212247371673584,0.7822324633598328],[0.8804023265838623,0.20492564141750336,0.4276648163795471],[-0.47070038318634033,0.29190725088119507,0.8326050043106079],[-0.4707004427909851,0.29190728068351746,0.8326051235198975],[-0.8098574280738831,0.1927443891763687,0.5540580153465271],[-0.7826141715049744,0.20474077761173248,0.5878743529319763],[0.994851291179657,0.025057118386030197,-0.09819892793893814],[0.9488987326622009,0.10196034610271454,0.29865553975105286],[0.8804023265838623,0.20492564141750336,0.4276648163795471],[0.991542637348175,0.02448795922100544,-0.12745055556297302],[-0.9741464257240295,-0.09507003426551819,-0.20493975281715393],[-0.9741464853286743,-0.09507003426551819,-0.20493975281715393],[-0.9741464257240295,-0.09507003426551819,-0.20493975281715393],[-0.9741464853286743,-0.09507004171609879,-0.20493976771831512],[-0.1493588238954544,-0.2086780071258545,-0.9665119051933289],[-0.14557555317878723,-0.182363361120224,-0.9723946452140808],[-0.15870679914951324,-0.27659744024276733,-0.9477900862693787],[-0.15870678424835205,-0.27659744024276733,-0.9477900266647339],[0.7059258818626404,-0.09110114723443985,-0.7024023532867432],[0.7033784985542297,-0.1011778935790062,-0.7035778760910034],[0.6870550513267517,-0.1595001220703125,-0.7088828682899475],[0.6870550513267517,-0.1595001220703125,-0.7088829874992371],[-0.7594459652900696,-0.5591992139816284,-0.3324725925922394],[-0.7612725496292114,-0.5448256731033325,-0.35160934925079346],[-0.7639512419700623,-0.4725126326084137,-0.4394431710243225],[-0.7639512419700623,-0.4725125730037689,-0.4394431710243225],[-0.6542017459869385,-0.7388257384300232,0.1617303341627121],[-0.7013145685195923,-0.7126237154006958,0.01804005168378353],[-0.7612725496292114,-0.5448256731033325,-0.35160934925079346],[-0.7594459652900696,-0.5591992139816284,-0.3324725925922394],[-0.9570808410644531,-0.2858492136001587,-0.047818198800086975],[-0.9580674171447754,-0.2737380564212799,-0.08470072597265244],[-0.907597541809082,-0.15491488575935364,-0.3902152180671692],[-0.9075976014137268,-0.15491488575935364,-0.3902152478694916],[-0.8281887769699097,-0.48730725049972534,0.2768303155899048],[-0.7392453551292419,-0.5592052340507507,0.37524107098579407],[-0.9580674171447754,-0.2737380564212799,-0.08470072597265244],[-0.9570808410644531,-0.2858492136001587,-0.047818198800086975],[-0.8397976756095886,-0.11944134533405304,0.5295974612236023],[-0.8334598541259766,-0.12069139629602432,0.539238452911377],[-0.9977579712867737,-0.06672408431768417,-0.005191626958549023],[-0.9967944622039795,-0.06933978199958801,0.03990751504898071],[-0.9967944622039795,-0.06933978199958801,0.03990751504898071],[-0.9977579712867737,-0.06672408431768417,-0.005191626958549023],[-0.968826413154602,-0.05067602917551994,-0.2425018846988678],[-0.968826413154602,-0.05067602917551994,-0.2425018846988678],[-0.007080026902258396,-0.9999517202377319,0.0068261693231761456],[-0.0070800259709358215,-0.9999516606330872,0.006826168857514858],[-0.007396361790597439,-0.9999653697013855,0.003803872736170888],[-0.007655521389096975,-0.9999698996543884,0.001327343052253127],[-0.8098574280738831,0.1927443891763687,0.5540580153465271],[-0.9692126512527466,0.07919885963201523,0.23313987255096436],[-0.9692126512527466,0.07919885963201523,0.23313987255096436],[-0.7826141715049744,0.20474077761173248,0.5878743529319763],[0.9766407608985901,-0.049606338143348694,0.20907409489154816],[0.9454845190048218,-0.18804335594177246,0.26589235663414],[0.994776725769043,-0.10139967501163483,0.011717659421265125],[0.9940851926803589,0.10859742015600204,0.0011142655275762081],[0.8727967739105225,0.48596683144569397,-0.04540829733014107],[0.8970381617546082,0.4411088824272156,0.027302822098135948],[0.9766407608985901,-0.049606338143348694,0.20907409489154816],[0.9940851926803589,0.10859742015600204,0.0011142655275762081],[0.5234197378158569,0.8474974632263184,-0.08820322155952454],[0.5382925271987915,0.8391603231430054,-0.07778876274824142],[0.8970381617546082,0.4411088824272156,0.027302822098135948],[0.8727967739105225,0.48596683144569397,-0.04540829733014107],[0.426266610622406,0.8994579315185547,-0.09629113972187042],[0.4193996787071228,0.9029867649078369,-0.09337382763624191],[0.5382925271987915,0.8391603231430054,-0.07778876274824142],[0.5234197378158569,0.8474974632263184,-0.08820322155952454],[0.426266610622406,0.8994579315185547,-0.09629113972187042],[0.4184861183166504,0.9036914706230164,-0.09061478823423386],[0.397386759519577,0.9139290452003479,-0.08256830275058746],[0.4193996787071228,0.9029867649078369,-0.09337382763624191],[-0.4563031494617462,-0.7228989601135254,0.5188493132591248],[-0.45630308985710144,-0.7228989005088806,0.51884925365448],[-0.7013145685195923,-0.7126237154006958,0.01804005168378353],[-0.6542017459869385,-0.7388257384300232,0.1617303341627121],[0.812343418598175,0.5824594497680664,-0.0289674773812294],[0.8409687876701355,0.5410745739936829,-0.003117515239864588],[0.7520958781242371,-0.6584120392799377,0.02907477132976055],[0.7433125972747803,-0.6685736179351807,0.02226567082107067],[0.812343418598175,0.5824594497680664,-0.0289674773812294],[0.5186543464660645,0.8537455201148987,-0.04600219428539276],[0.5403411984443665,0.8414300680160522,0.005176173057407141],[0.8409687876701355,0.5410745739936829,-0.003117515239864588],[0.9381476044654846,0.19051600992679596,0.28910666704177856],[0.9417835474014282,-0.049175508320331573,0.3326040506362915],[0.9870246648788452,-0.13484345376491547,0.08717460930347443],[0.9768072366714478,0.1450829803943634,0.1574755609035492],[0.3048708438873291,-0.3601263463497162,0.8816817402839661],[0.3048708438873291,-0.3601263463497162,0.8816817998886108],[0.3048708736896515,-0.3601263761520386,0.8816817998886108],[0.009669899009168148,-0.9999527335166931,-0.0009911151137202978],[0.01335916668176651,-0.9997296333312988,-0.019029799848794937],[0.008899079635739326,-0.9999565482139587,0.002775831613689661],[0.008292901329696178,-0.9999492168426514,0.005737709812819958],[0.009669899009168148,-0.9999527335166931,-0.0009911151137202978],[0.008899079635739326,-0.9999565482139587,0.002775831613689661],[0.008292900398373604,-0.9999490976333618,0.00573770934715867],[-0.000327377172652632,-0.9999869465827942,0.005087403580546379],[-0.0003273772308602929,-0.9999870657920837,0.005087404511868954],[-0.00032737720175646245,-0.999987006187439,0.005087404046207666],[-0.000327377172652632,-0.9999869465827942,0.005087404046207666],[0.1814485490322113,0.09529119729995728,-0.9787726402282715],[0.7972792387008667,0.2637723684310913,-0.5429269671440125],[0.6811290383338928,0.1718948930501938,-0.7116989493370056],[0.08690784126520157,0.012723428197205067,-0.9961351156234741],[0.6811290383338928,0.1718948930501938,-0.7116989493370056],[0.7972792387008667,0.2637723684310913,-0.5429269671440125],[0.8920365571975708,0.3482467830181122,-0.2880887985229492],[0.892036497592926,0.3482467532157898,-0.2880887985229492],[0.05003644526004791,0.7857836484909058,0.6164740920066833],[-0.5313484072685242,0.7057963013648987,0.4685301184654236],[-0.5509044528007507,0.7043324112892151,0.447683185338974],[0.2159183919429779,0.5571125745773315,0.8018757700920105],[-0.5313484072685242,0.7057963013648987,0.4685301184654236],[-0.8174833655357361,0.5758097767829895,0.012800747528672218],[-0.5509044528007507,0.7043324112892151,0.447683185338974],[-0.8916581869125366,0.42880943417549133,-0.145148366689682],[-0.6992805600166321,0.27376049757003784,-0.6603497862815857],[-0.5561168193817139,0.14663560688495636,-0.8180659413337708],[-0.8941298723220825,0.40962284803390503,-0.18094424903392792],[-0.6992805600166321,0.27376049757003784,-0.6603497862815857],[0.1814485490322113,0.09529119729995728,-0.9787726402282715],[0.08690784126520157,0.012723428197205067,-0.9961351156234741],[-0.5561168193817139,0.14663560688495636,-0.8180659413337708],[0.6097199320793152,0.38178151845932007,0.6946110129356384],[0.2159183919429779,0.5571125745773315,0.8018757700920105],[0.5276976823806763,-0.13558554649353027,0.8385413885116577],[0.5276976823806763,-0.13558554649353027,0.8385413885116577],[0.08690784126520157,0.012723428197205067,-0.9961351156234741],[0.6811290383338928,0.1718948930501938,-0.7116989493370056],[0.35492509603500366,-0.03222038596868515,-0.9343393445014954],[0.06122444570064545,-0.05399129539728165,-0.9966627359390259],[0.9835129380226135,-0.17904329299926758,0.025407595559954643],[0.9835130572319031,-0.17904330790042877,0.025407597422599792],[0.9835129976272583,-0.17904330790042877,0.025407597422599792],[0.9835131168365479,-0.17904330790042877,0.02540759928524494],[-0.5027428865432739,-0.15944384038448334,0.8496041893959045],[-0.5027428269386292,-0.15944382548332214,0.8496041297912598],[-0.5027428269386292,-0.15944382548332214,0.8496041893959045],[-0.5027428865432739,-0.15944384038448334,0.8496041297912598],[-0.9903079867362976,-0.13654690980911255,-0.02539708837866783],[-0.9903079867362976,-0.13654690980911255,-0.02539708837866783],[-0.9903078675270081,-0.13654689490795135,-0.025397086516022682],[-0.9903079867362976,-0.13654692471027374,-0.02539709024131298],[-0.9545094966888428,-0.051332514733076096,-0.293728768825531],[-0.9545094966888428,-0.051332518458366394,-0.293728768825531],[-0.9545095562934875,-0.05133252218365669,-0.293728768825531],[-0.9545095562934875,-0.05133252218365669,-0.2937287986278534],[-0.5561168193817139,0.14663560688495636,-0.8180659413337708],[0.08690784126520157,0.012723428197205067,-0.9961351156234741],[0.06122444570064545,-0.05399129539728165,-0.9966627359390259],[-0.21681351959705353,-0.06985045969486237,-0.9737108945846558],[0.5794637203216553,0.6613138914108276,0.47632521390914917],[0.05003644526004791,0.7857836484909058,0.6164740920066833],[0.2159183919429779,0.5571125745773315,0.8018757700920105],[0.6097199320793152,0.38178151845932007,0.6946110129356384],[-0.8372636437416077,0.5378450155258179,0.09855113178491592],[-0.8916581869125366,0.42880943417549133,-0.145148366689682],[-0.8941298723220825,0.40962284803390503,-0.18094424903392792],[0.8823044300079346,-0.05031672492623329,-0.4679820239543915],[0.8823044300079346,-0.05031672865152359,-0.4679820239543915],[0.8823044300079346,-0.05031673237681389,-0.4679820239543915],[0.8823044300079346,-0.05031672120094299,-0.4679819941520691],[0.9080635905265808,0.41698211431503296,0.03932438790798187],[0.5794637203216553,0.6613138914108276,0.47632521390914917],[0.6097199320793152,0.38178151845932007,0.6946110129356384],[0.4252643287181854,-0.326079785823822,-0.8442878723144531],[0.41716256737709045,-0.5338594913482666,-0.7355061769485474],[0.4247870147228241,-0.3042740523815155,-0.8526272177696228],[0.7406501770019531,-0.43752405047416687,-0.5099119544029236],[0.9477870464324951,-0.3114435374736786,0.06857644021511078],[0.9551147222518921,-0.2813762128353119,0.09264519810676575],[0.9193760752677917,-0.18071384727954865,-0.34941378235816956],[0.17346534132957458,-0.4330552816390991,0.8845183849334717],[0.09481082111597061,-0.5233485102653503,0.8468276262283325],[0.27656683325767517,-0.2505062520503998,0.9277701377868652],[0.26483190059661865,-0.24258455634117126,0.9332828521728516],[-0.8077946901321411,-0.550134539604187,0.21170684695243835],[-0.8316102027893066,-0.4946551024913788,-0.25246918201446533],[-0.8786116242408752,-0.32081088423728943,-0.3537260591983795],[-0.9311760663986206,-0.36401504278182983,-0.020105909556150436],[0.4247870147228241,-0.3042740523815155,-0.8526272177696228],[0.37875980138778687,-0.09532086551189423,-0.9205731153488159],[0.38566529750823975,-0.1070541962981224,-0.9164069294929504],[0.4252643287181854,-0.326079785823822,-0.8442878723144531],[0.9551147222518921,-0.2813762128353119,0.09264519810676575],[0.9803988933563232,-0.06604071706533432,0.18562422692775726],[0.9505224823951721,-0.025599543005228043,-0.309599369764328],[0.9193760752677917,-0.18071384727954865,-0.34941378235816956],[-0.012466281652450562,-0.10213904082775116,0.9946919083595276],[0.01848628744482994,-0.11704268306493759,0.9929547905921936],[-0.191960871219635,-0.013161209411919117,0.9813143610954285],[-0.19196085631847382,-0.013161208480596542,0.9813142418861389],[-0.9780387878417969,-0.11297819763422012,-0.17514568567276],[-0.8510448932647705,-0.09574438631534576,-0.5162901282310486],[-0.8051036596298218,-0.04565700888633728,-0.5913742184638977],[-0.9590003490447998,-0.05345573276281357,-0.2783178687095642],[0.36195024847984314,-0.00780502799898386,-0.9321647882461548],[0.37022340297698975,-0.006347283720970154,-0.9289209842681885],[0.39872634410858154,-0.001279944204725325,-0.9170689582824707],[0.39872637391090393,-0.001279944321140647,-0.9170690774917603],[0.9600644707679749,0.017666827887296677,-0.2792203724384308],[0.9999285340309143,-0.008907451294362545,0.007981736212968826],[0.9705500602722168,0.041453126817941666,-0.2373063713312149],[0.970550000667572,0.04145312309265137,-0.23730634152889252],[0.3728489577770233,-0.427837997674942,0.8233699798583984],[0.3866685628890991,-0.2683693468570709,0.8823068141937256],[0.3863925039768219,-0.27374768257141113,0.8807740807533264],[0.3896631896495819,-0.14819471538066864,0.9089559316635132],[0.3863925039768219,-0.27374768257141113,0.8807740807533264],[0.3866685628890991,-0.2683693468570709,0.8823068141937256],[0.4050523042678833,0.8312997221946716,-0.3806225061416626],[0.4218263030052185,0.893310010433197,-0.15511257946491241],[0.2525371015071869,0.9163177609443665,-0.3107839524745941],[0.2435235232114792,0.8133171796798706,-0.5284045338630676],[0.766213059425354,-0.4164203405380249,0.48939943313598633],[0.9551147222518921,-0.2813762128353119,0.09264519810676575],[0.9477870464324951,-0.3114435374736786,0.06857644021511078],[0.9091628789901733,-0.16485607624053955,0.38242053985595703],[0.766213059425354,-0.4164203405380249,0.48939943313598633],[0.8380744457244873,-0.08995909243822098,0.5380879640579224],[0.9803988933563232,-0.06604071706533432,0.18562422692775726],[0.9551147222518921,-0.2813762128353119,0.09264519810676575],[-0.9798529148101807,-0.11036249250173569,0.16645821928977966],[-0.9780387878417969,-0.11297819763422012,-0.17514568567276],[-0.9590003490447998,-0.05345573276281357,-0.2783178687095642],[-0.9920427203178406,-0.05442262068390846,0.11353173851966858],[-0.6722142696380615,-0.5465120673179626,0.49945202469825745],[-0.8077946901321411,-0.550134539604187,0.21170684695243835],[-0.9311760663986206,-0.36401504278182983,-0.020105909556150436],[-0.8176161050796509,-0.39186012744903564,0.4218408763408661],[-0.5182480812072754,-0.6767961978912354,0.5228439569473267],[-0.8077946901321411,-0.550134539604187,0.21170684695243835],[-0.6722142696380615,-0.5465120673179626,0.49945202469825745],[-0.002707137493416667,-0.9999943375587463,-0.0020069817546755075],[-0.00009738043445395306,-1,-0.00008159968274412677],[-0.0024870464112609625,-0.9999951720237732,-0.0018446068279445171],[-0.0030398331582546234,-0.999992847442627,-0.002252432284876704],[-0.002707137493416667,-0.9999943375587463,-0.0020069817546755075],[-0.0024870464112609625,-0.9999951720237732,-0.0018446068279445171],[-0.0030398338567465544,-0.9999929666519165,-0.0022524327505379915],[0.002526939148083329,-0.999995231628418,-0.001767946989275515],[0.000009873355338640977,-0.9999999403953552,-0.00008601942681707442],[0.002916933037340641,-0.9999936819076538,-0.0020285448990762234],[0.002916933037340641,-0.9999936819076538,-0.0020285448990762234],[0.003246558364480734,-0.9999921917915344,-0.002248803386464715],[0.0032465581316500902,-0.9999921917915344,-0.0022488031536340714],[0.002526939148083329,-0.999995231628418,-0.001767946989275515],[-0.13146741688251495,0.2366977334022522,-0.9626476764678955],[0.697407603263855,0.42583221197128296,-0.5764456391334534],[0.7435843348503113,0.27636152505874634,-0.608856737613678],[-0.005266580265015364,0.020573601126670837,-0.9997743964195251],[0.7435843348503113,0.27636152505874634,-0.608856737613678],[0.697407603263855,0.42583221197128296,-0.5764456391334534],[0.8141242861747742,0.5578469038009644,-0.16127179563045502],[0.8141242265701294,0.5578469038009644,-0.16127179563045502],[-0.3610418736934662,0.7736912369728088,0.5206252932548523],[-0.6349890232086182,0.7232478260993958,0.2714802026748657],[-0.5544269680976868,0.7512640357017517,0.35806867480278015],[-0.3610419034957886,0.7736911177635193,0.5206252336502075],[-0.5544269680976868,0.7512640357017517,0.35806867480278015],[-0.6349890232086182,0.7232478260993958,0.2714802026748657],[-0.8289161920547485,0.35599374771118164,-0.4314700663089752],[-0.7784214615821838,0.2177102118730545,-0.5887802839279175],[-0.8289161920547485,0.35599374771118164,-0.4314700663089752],[-0.13146741688251495,0.2366977334022522,-0.9626476764678955],[-0.005266580265015364,0.020573601126670837,-0.9997743964195251],[-0.7784214615821838,0.2177102118730545,-0.5887802839279175],[0.5507657527923584,-0.1490505039691925,0.8212436437606812],[0.5507657527923584,-0.1490505188703537,0.8212436437606812],[0.5507656931877136,-0.1490504890680313,0.8212435245513916],[0.5507657527923584,-0.1490504890680313,0.8212435841560364],[-0.005266580265015364,0.020573601126670837,-0.9997743964195251],[0.7435843348503113,0.27636152505874634,-0.608856737613678],[0.5358596444129944,-0.11738801002502441,-0.8361066579818726],[-0.02385599911212921,-0.09995710104703903,-0.9947056770324707],[0.9810167551040649,-0.06483679264783859,-0.18276314437389374],[0.9810166358947754,-0.06483679264783859,-0.18276314437389374],[0.9810167551040649,-0.06483680009841919,-0.18276314437389374],[0.9810166954994202,-0.064836785197258,-0.18276312947273254],[-0.5430971384048462,-0.20497308671474457,0.8142674565315247],[-0.543097198009491,-0.20497307181358337,0.8142675161361694],[-0.5430971384048462,-0.20497310161590576,0.8142674565315247],[-0.5430971384048462,-0.20497310161590576,0.8142675757408142],[-0.976665198802948,0.012919560074806213,-0.2143784761428833],[-0.976665198802948,0.012919561006128788,-0.21437852084636688],[-0.976665198802948,0.012919559143483639,-0.2143784761428833],[-0.9766652584075928,0.012919561006128788,-0.2143784910440445],[-0.7784214615821838,0.2177102118730545,-0.5887802839279175],[-0.005266580265015364,0.020573601126670837,-0.9997743964195251],[-0.02385599911212921,-0.09995710104703903,-0.9947056770324707],[-0.5808340907096863,-0.0479637086391449,-0.8126077055931091],[0.9485647082328796,-0.2816155254840851,-0.14462943375110626],[0.7406501770019531,-0.43752405047416687,-0.5099119544029236],[0.2705770432949066,-0.6124230623245239,-0.7427825927734375],[0.9803988933563232,-0.06604071706533432,0.18562422692775726],[0.9999285340309143,-0.008907451294362545,0.007981736212968826],[0.9600644707679749,0.017666827887296677,-0.2792203724384308],[0.9505224823951721,-0.025599543005228043,-0.309599369764328],[0.38566529750823975,-0.1070541962981224,-0.9164069294929504],[0.37875980138778687,-0.09532086551189423,-0.9205731153488159],[0.37022340297698975,-0.006347283720970154,-0.9289209842681885],[0.36195024847984314,-0.00780502799898386,-0.9321647882461548],[-0.9311760663986206,-0.36401504278182983,-0.020105909556150436],[-0.8786116242408752,-0.32081088423728943,-0.3537260591983795],[-0.8510448932647705,-0.09574438631534576,-0.5162901282310486],[-0.9780387878417969,-0.11297819763422012,-0.17514568567276],[-0.8176161050796509,-0.39186012744903564,0.4218408763408661],[-0.9311760663986206,-0.36401504278182983,-0.020105909556150436],[-0.9780387878417969,-0.11297819763422012,-0.17514568567276],[-0.9798529148101807,-0.11036249250173569,0.16645821928977966],[0.26483190059661865,-0.24258455634117126,0.9332828521728516],[0.27656683325767517,-0.2505062520503998,0.9277701377868652],[0.01848628744482994,-0.11704268306493759,0.9929547905921936],[-0.012466281652450562,-0.10213904082775116,0.9946919083595276],[0.9803988933563232,-0.06604071706533432,0.18562422692775726],[0.8380744457244873,-0.08995909243822098,0.5380879640579224],[0.7823804020881653,-0.0719861164689064,0.6186265349388123],[0.9999285340309143,-0.008907451294362545,0.007981736212968826],[0.06757760047912598,-0.5010526180267334,0.8627743124961853],[0.07932622730731964,-0.4095267057418823,0.9088428020477295],[0.07932621240615845,-0.40952667593955994,0.9088428020477295],[0.07088138908147812,-0.4764057397842407,0.8763636946678162],[0.17346534132957458,-0.4330552816390991,0.8845183849334717],[0.06757760047912598,-0.5010526180267334,0.8627743124961853],[0.07088138908147812,-0.4764057397842407,0.8763636946678162],[0.09481082111597061,-0.5233485102653503,0.8468276262283325],[0.3956208825111389,0.7391512393951416,-0.5451050400733948],[0.3956208825111389,0.7391512393951416,-0.54510498046875],[0.38196152448654175,0.7307950258255005,-0.56572425365448],[0.388986736536026,0.7351351380348206,-0.5552167296409607],[0.8651763796806335,0.20427031815052032,0.4579775333404541],[0.9119406938552856,0.39943942427635193,0.09387387335300446],[0.9397345781326294,0.2088989019393921,-0.2706661522388458],[0.9552299380302429,0.09224513918161392,0.2811165153980255],[0.13695234060287476,-0.32076290249824524,0.9372060298919678],[0.13695234060287476,-0.3207629323005676,0.9372060894966125],[0.13695234060287476,-0.32076290249824524,0.9372060894966125],[0.13695229589939117,-0.32076284289360046,0.9372059106826782],[0.7926474213600159,0.10113353282213211,0.6012336015701294],[0.8651763796806335,0.20427031815052032,0.4579775333404541],[0.9552299380302429,0.09224513918161392,0.2811165153980255],[0.8267838954925537,0.01610807329416275,0.5622889995574951],[0.388986736536026,0.7351351380348206,-0.5552167296409607],[0.38196152448654175,0.7307950258255005,-0.56572425365448],[0.3725777566432953,0.7248623967170715,-0.5794482827186584],[0.3725777566432953,0.7248624563217163,-0.5794482827186584],[0.9552299380302429,0.09224513918161392,0.2811165153980255],[0.9397345781326294,0.2088989019393921,-0.2706661522388458],[0.9984315037727356,0.05574440956115723,-0.005208582151681185],[0.9962441325187683,-0.08337707817554474,-0.023362543433904648],[0.2921980917453766,-0.5222808122634888,0.8011509776115417],[0.292198121547699,-0.5222808122634888,0.8011510372161865],[0.3535509705543518,-0.748909592628479,0.5604783296585083],[0.3495377004146576,-0.7314228415489197,0.5855288505554199],[0.8267838954925537,0.01610807329416275,0.5622889995574951],[0.9552299380302429,0.09224513918161392,0.2811165153980255],[0.9962441325187683,-0.08337707817554474,-0.023362543433904648],[0.9066129922866821,-0.3023506999015808,0.2943413257598877],[0.9962441325187683,-0.08337707817554474,-0.023362543433904648],[0.9984315037727356,0.05574440956115723,-0.005208582151681185],[0.9873501062393188,0.009570947848260403,0.15826503932476044],[0.9682334661483765,-0.19593490660190582,0.15534937381744385],[0.3495377004146576,-0.7314228415489197,0.5855288505554199],[0.3535509705543518,-0.748909592628479,0.5604783296585083],[0.3966310918331146,-0.874226450920105,0.28002092242240906],[0.3966022729873657,-0.8742861151695251,0.2798754870891571],[0.9066129922866821,-0.3023506999015808,0.2943413257598877],[0.9962441325187683,-0.08337707817554474,-0.023362543433904648],[0.9682334661483765,-0.19593490660190582,0.15534937381744385],[0.923740804195404,-0.35312986373901367,0.14833100140094757],[0.34378063678741455,0.7168905138969421,0.606533408164978],[0.34378060698509216,0.7168905138969421,0.6065334677696228],[0.3437805771827698,0.7168905138969421,0.606533408164978],[0.34378066658973694,0.7168905735015869,0.6065335273742676],[0.7423210144042969,0.22705449163913727,0.6304013133049011],[0.6109460592269897,0.4342992603778839,0.6619130969047546],[0.6109461188316345,0.4342992901802063,0.6619130969047546],[0.770629346370697,0.16736017167568207,0.6149153709411621],[0.3966022729873657,-0.8742861151695251,0.2798754870891571],[0.3966310918331146,-0.874226450920105,0.28002092242240906],[0.4231787323951721,-0.7899394631385803,0.4437515139579773],[0.4231787621974945,-0.7899393439292908,0.4437515437602997],[0.8336090445518494,-0.014377200976014137,0.5521677136421204],[0.7423210144042969,0.22705449163913727,0.6304013133049011],[0.770629346370697,0.16736017167568207,0.6149153709411621],[0.8336091041564941,-0.014377201907336712,0.5521677732467651],[0.45546984672546387,0.1650240272283554,0.8748223781585693],[0.45546987652778625,0.1650240421295166,0.8748224377632141],[0.4282975196838379,0.5146201848983765,0.7427835464477539],[0.43389180302619934,0.48191967606544495,0.7612432837486267],[0.10482406616210938,0.9720267653465271,0.21018041670322418],[0.10482407361268997,0.9720268249511719,0.21018043160438538],[0.10482407361268997,0.9720267653465271,0.21018043160438538],[0.10482405126094818,0.9720266461372375,0.210180401802063],[0.4050523042678833,0.8312997221946716,-0.3806225061416626],[0.7011295557022095,0.7121444940567017,0.035601671785116196],[0.7618468403816223,0.646384596824646,0.04214463010430336],[0.4218263030052185,0.893310010433197,-0.15511257946491241],[0.7128168344497681,0.5547977089881897,-0.42905882000923157],[0.8051605820655823,0.5251745581626892,-0.2755143642425537],[0.8051605224609375,0.5251745581626892,-0.2755143642425537],[0.6335839629173279,0.5647056102752686,-0.5288468599319458],[0.552563488483429,0.5657110810279846,-0.6120822429656982],[0.7128168344497681,0.5547977089881897,-0.42905882000923157],[0.6335839629173279,0.5647056102752686,-0.5288468599319458],[0.5525634288787842,0.5657110214233398,-0.6120821833610535],[0.48474282026290894,0.756238579750061,0.43946269154548645],[0.4847428798675537,0.7562386393547058,0.4394627809524536],[0.4847429096698761,0.7562386989593506,0.4394627511501312],[0.48474279046058655,0.756238579750061,0.43946269154548645],[0.27773410081863403,0.743943989276886,0.6077921390533447],[0.27773404121398926,0.7439438700675964,0.6077920198440552],[0.27773404121398926,0.743943989276886,0.6077920794487],[0.968436062335968,-0.17695017158985138,0.17555688321590424],[0.968436062335968,-0.17695018649101257,0.17555688321590424],[0.9684360027313232,-0.17695015668869019,0.17555686831474304],[0.9684361219406128,-0.17695017158985138,0.17555689811706543],[0.10337559878826141,0.23609063029289246,-0.9662166833877563],[0.10337559878826141,0.23609063029289246,-0.9662166833877563],[0.1213289424777031,0.28933531045913696,-0.9495073556900024],[0.12569350004196167,0.3023165762424469,-0.9448839426040649],[-0.5987306237220764,0.7815070748329163,0.1754090040922165],[-0.5987306237220764,0.7815070152282715,0.17540901899337769],[-0.5916424989700317,0.79185950756073,0.1513853222131729],[-0.5941922068595886,0.7882744669914246,0.15987159311771393],[-0.03073604218661785,0.06645089387893677,0.9973161220550537],[-0.030736036598682404,0.06645088642835617,0.9973161220550537],[-0.0025426747743040323,0.05963180214166641,0.9982172250747681],[-0.010676821693778038,0.06160430610179901,0.9980434775352478],[0.9105457663536072,-0.3529585599899292,0.215236097574234],[0.9105458855628967,-0.3529585897922516,0.2152361124753952],[0.9105457663536072,-0.3529585599899292,0.2152361124753952],[0.910545825958252,-0.3529585897922516,0.2152361422777176],[0.12569350004196167,0.3023165762424469,-0.9448839426040649],[0.1213289424777031,0.28933531045913696,-0.9495073556900024],[0.21081222593784332,0.5589836835861206,-0.8019322752952576],[0.21081221103668213,0.5589836239814758,-0.8019322156906128],[-0.5941922068595886,0.7882744669914246,0.15987159311771393],[-0.5916424989700317,0.79185950756073,0.1513853222131729],[-0.5729642510414124,0.8142195343971252,0.0935879647731781],[-0.5729641914367676,0.8142194747924805,0.0935879647731781],[-0.010676821693778038,0.06160430610179901,0.9980434775352478],[-0.0025426747743040323,0.05963180214166641,0.9982172250747681],[0.12312792986631393,0.028629768639802933,0.9919777512550354],[0.12312791496515274,0.028629764914512634,0.9919776320457458],[-0.6724090576171875,0.7385257482528687,0.04945340007543564],[-0.9888207912445068,0.14657975733280182,-0.027346821501851082],[-0.9914775490760803,0.12642793357372284,-0.03143296018242836],[-0.7527928948402405,0.6582412719726562,0.004626768175512552],[-0.9602015614509583,-0.24244357645511627,-0.13868680596351624],[-0.9914775490760803,0.12642793357372284,-0.03143296018242836],[-0.9888207912445068,0.14657975733280182,-0.027346821501851082],[-0.927798330783844,-0.3665548264980316,-0.06948138028383255],[-0.9889450073242188,-0.10021429508924484,0.10929232835769653],[-0.9776735305786133,0.1435503214597702,0.15345264971256256],[-0.9914775490760803,0.12642793357372284,-0.03143296018242836],[-0.9602015614509583,-0.24244357645511627,-0.13868680596351624],[-0.9776735305786133,0.1435503214597702,0.15345264971256256],[-0.7619723081588745,0.6466788649559021,0.03470776230096817],[-0.7527928948402405,0.6582412719726562,0.004626768175512552],[-0.9914775490760803,0.12642793357372284,-0.03143296018242836],[-0.42595726251602173,0.8905650973320007,-0.15954336524009705],[-0.2557784914970398,0.9142258763313293,-0.3142741918563843],[-0.27628374099731445,0.9602630138397217,-0.039524421095848083],[-0.3624524176120758,0.931523859500885,-0.029859352856874466],[-0.9968475699424744,0.07736142724752426,0.017608797177672386],[-0.9888207912445068,0.14657975733280182,-0.027346821501851082],[-0.6724090576171875,0.7385257482528687,0.04945340007543564],[-0.6531815528869629,0.7541465759277344,0.06794661283493042],[-0.9304522275924683,-0.3664124310016632,0.0007129135774448514],[-0.927798330783844,-0.3665548264980316,-0.06948138028383255],[-0.9888207912445068,0.14657975733280182,-0.027346821501851082],[-0.9968475699424744,0.07736142724752426,0.017608797177672386],[0.005796223413199186,-0.9999817609786987,0.0016803601756691933],[0.005813247058540583,-0.9999827742576599,0.0006093024858273566],[0.005953340791165829,-0.9999483823776245,-0.008220691233873367],[-0.522422730922699,0.8478277921676636,-0.09089833498001099],[-0.5374892950057983,0.8233551383018494,-0.18218517303466797],[-0.6925307512283325,0.65254807472229,-0.3075423836708069],[-0.8752921223640442,0.48130813241004944,-0.04696930944919586],[-0.6925307512283325,0.65254807472229,-0.3075423836708069],[-0.8652673363685608,0.35965806245803833,-0.34922564029693604],[-0.9942461252212524,0.10711942613124847,-0.0001879819465102628],[-0.8752921223640442,0.48130813241004944,-0.04696930944919586],[0.005804457701742649,-0.9999387860298157,0.009420884773135185],[0.0058044558390975,-0.9999386668205261,0.009420882910490036],[0.0058044567704200745,-0.9999387264251709,0.00942088384181261],[0.0058044558390975,-0.9999386668205261,0.00942088384181261],[-0.5374892950057983,0.8233551383018494,-0.18218517303466797],[-0.42644965648651123,0.44377845525741577,-0.7881631851196289],[-0.3751875162124634,0.6258243918418884,-0.6837967038154602],[-0.6925307512283325,0.65254807472229,-0.3075423836708069],[-0.6925307512283325,0.65254807472229,-0.3075423836708069],[-0.3751875162124634,0.6258243918418884,-0.6837967038154602],[-0.34529393911361694,0.6041271686553955,-0.718193769454956],[-0.8652673363685608,0.35965806245803833,-0.34922564029693604],[-0.9942461252212524,0.10711942613124847,-0.0001879819465102628],[-0.8652673363685608,0.35965806245803833,-0.34922564029693604],[-0.9524434804916382,0.03328288346529007,-0.30289217829704285],[-0.9950538277626038,-0.0990152582526207,0.007980860769748688],[-0.5452626347541809,-0.8380714058876038,0.01802668161690235],[-0.5241155624389648,-0.8468071222305298,-0.09066712856292725],[-0.927798330783844,-0.3665548264980316,-0.06948138028383255],[-0.9304522275924683,-0.3664124310016632,0.0007129135774448514],[-0.9473277926445007,-0.29350194334983826,0.12816645205020905],[-0.9889450073242188,-0.10021429508924484,0.10929232835769653],[-0.9602015614509583,-0.24244357645511627,-0.13868680596351624],[-0.8023288249969482,-0.39257118105888367,-0.4496179223060608],[-0.7619723081588745,0.6466788649559021,0.03470776230096817],[-0.9776735305786133,0.1435503214597702,0.15345264971256256],[-0.9415944814682007,0.18800051510334015,0.2793843746185303],[-0.8426296710968018,0.49594929814338684,0.20978452265262604],[-0.7527928948402405,0.6582412719726562,0.004626768175512552],[-0.7619723081588745,0.6466788649559021,0.03470776230096817],[-0.42595726251602173,0.8905650973320007,-0.15954336524009705],[-0.3624524176120758,0.931523859500885,-0.029859352856874466],[-0.37878361344337463,0.9222328662872314,0.077520452439785],[-0.6724090576171875,0.7385257482528687,0.04945340007543564],[-0.7527928948402405,0.6582412719726562,0.004626768175512552],[-0.3624524176120758,0.931523859500885,-0.029859352856874466],[-0.6531815528869629,0.7541465759277344,0.06794661283493042],[-0.6724090576171875,0.7385257482528687,0.04945340007543564],[-0.37878361344337463,0.9222328662872314,0.077520452439785],[-0.38555166125297546,0.9189807176589966,0.08260949701070786],[-0.5132337212562561,0.853890597820282,-0.08638280630111694],[-0.5374892950057983,0.8233551383018494,-0.18218517303466797],[-0.522422730922699,0.8478277921676636,-0.09089833498001099],[-0.42569205164909363,0.8998918533325195,-0.09476727247238159],[-0.7427892088890076,-0.6691581606864929,0.02216845005750656],[-0.3007699251174927,-0.9530642628669739,0.03472787141799927],[-0.28909388184547424,-0.9559243321418762,0.051316678524017334],[-0.7525398135185242,-0.6579435467720032,0.028177954256534576],[-0.7857488393783569,0.5784883499145508,-0.21897518634796143],[-0.5374892950057983,0.8233551383018494,-0.18218517303466797],[-0.5132337212562561,0.853890597820282,-0.08638280630111694],[-0.613581657409668,0.7878734469413757,-0.052658841013908386],[-0.7459130883216858,-0.6660369038581848,0.002902149921283126],[-0.3141822814941406,-0.9491105079650879,0.02188180387020111],[-0.3007699251174927,-0.9530642628669739,0.03472787141799927],[-0.7427892088890076,-0.6691581606864929,0.02216845005750656],[-0.9991235136985779,-0.03501037135720253,-0.022945178672671318],[-0.7459130883216858,-0.6660369038581848,0.002902149921283126],[-0.7427892088890076,-0.6691581606864929,0.02216845005750656],[-0.8112958073616028,0.5839515328407288,-0.02827322669327259],[-0.996208131313324,-0.0641126036643982,-0.058812860399484634],[-0.7457423210144043,-0.6656471490859985,-0.02796381339430809],[-0.7459130883216858,-0.6660369038581848,0.002902149921283126],[-0.9991235136985779,-0.03501037135720253,-0.022945178672671318],[-0.7457423210144043,-0.6656471490859985,-0.02796381339430809],[-0.34119269251823425,-0.9399923086166382,0.00145998306106776],[-0.3141822814941406,-0.9491105079650879,0.02188180387020111],[-0.7459130883216858,-0.6660369038581848,0.002902149921283126],[-0.9964603781700134,-0.06455106288194656,-0.05384964123368263],[-0.7923129200935364,-0.6072733402252197,-0.05881613865494728],[-0.7457423210144043,-0.6656471490859985,-0.02796381339430809],[-0.996208131313324,-0.0641126036643982,-0.058812860399484634],[-0.7923129200935364,-0.6072733402252197,-0.05881613865494728],[-0.39867833256721497,-0.9157551527023315,-0.04947701096534729],[-0.34119269251823425,-0.9399923086166382,0.00145998306106776],[-0.7457423210144043,-0.6656471490859985,-0.02796381339430809],[-0.9978228807449341,-0.052017636597156525,-0.04054385796189308],[-0.8045254349708557,-0.5899363160133362,-0.06865759193897247],[-0.7923129200935364,-0.6072733402252197,-0.05881613865494728],[-0.9964603781700134,-0.06455106288194656,-0.05384964123368263],[-0.8045254349708557,-0.5899363160133362,-0.06865759193897247],[-0.4281114637851715,-0.9006050229072571,-0.07504181563854218],[-0.39867833256721497,-0.9157551527023315,-0.04947701096534729],[-0.7923129200935364,-0.6072733402252197,-0.05881613865494728],[-0.9999374747276306,-0.010656140744686127,-0.0033726776018738747],[-0.9999374747276306,-0.010656139813363552,-0.0033726776018738747],[-0.9999374747276306,-0.010656139813363552,-0.0033726771362125874],[-0.9999374747276306,-0.010656141676008701,-0.003372677369043231],[-0.46652281284332275,-0.8773670196533203,-0.11217646300792694],[-0.46652284264564514,-0.8773669600486755,-0.11217647045850754],[-0.46652284264564514,-0.8773670196533203,-0.11217647045850754],[-0.46652284264564514,-0.8773670196533203,-0.11217647790908813],[-0.998106837272644,0.010563105344772339,-0.060587745159864426],[-0.9981069564819336,0.010563106276094913,-0.06058775261044502],[-0.9981070160865784,0.010563107207417488,-0.06058775261044502],[-0.9981068968772888,0.010563105344772339,-0.060587745159864426],[-0.511318027973175,-0.8463997840881348,-0.14886631071567535],[-0.511318027973175,-0.8463997840881348,-0.14886629581451416],[-0.5113179683685303,-0.8463996648788452,-0.14886628091335297],[-0.5113181471824646,-0.8463999032974243,-0.14886634051799774],[-0.7703719735145569,0.36437028646469116,-0.5232220888137817],[-0.7748350501060486,0.07525312900543213,-0.6276682615280151],[-0.7226925492286682,-0.07164765894412994,-0.6874459385871887],[-0.7184540033340454,0.49049338698387146,-0.4931935667991638],[-0.7748350501060486,0.07525312900543213,-0.6276682615280151],[-0.3967260420322418,-0.543319821357727,-0.739872932434082],[-0.7226925492286682,-0.07164765894412994,-0.6874459385871887],[-0.3866487145423889,0.7524677515029907,0.5331932306289673],[-0.4746325612068176,0.5189173817634583,0.7109490036964417],[-0.4824405908584595,0.4865904748439789,0.7283408641815186],[-0.3866487443447113,0.7524677515029907,0.5331932306289673],[-0.37878361344337463,0.9222328662872314,0.077520452439785],[-0.3624524176120758,0.931523859500885,-0.029859352856874466],[-0.27628374099731445,0.9602630138397217,-0.039524421095848083],[-0.3125985860824585,0.9456348419189453,0.08975975215435028],[-0.38555166125297546,0.9189807176589966,0.08260949701070786],[-0.37878361344337463,0.9222328662872314,0.077520452439785],[-0.3125985860824585,0.9456348419189453,0.08975975215435028],[-0.32564088702201843,0.9408991932868958,0.09309463202953339],[-0.5132337212562561,0.853890597820282,-0.08638280630111694],[-0.42569205164909363,0.8998918533325195,-0.09476727247238159],[-0.4223349988460541,0.9020577669143677,-0.08902166038751602],[-0.47521063685417175,0.8792427778244019,-0.03327258676290512],[-0.613581657409668,0.7878734469413757,-0.052658841013908386],[-0.5132337212562561,0.853890597820282,-0.08638280630111694],[-0.47521063685417175,0.8792427778244019,-0.03327258676290512],[-0.49966830015182495,0.8654713034629822,0.03592948615550995],[-0.48874396085739136,0.8688843250274658,-0.07854470610618591],[-0.8112958073616028,0.5839515328407288,-0.02827322669327259],[-0.5200663208961487,0.8529512286186218,-0.044778332114219666],[-0.48747149109840393,0.8697009682655334,-0.07740731537342072],[-0.4989730417728424,0.8658506870269775,-0.0364481545984745],[-0.48874396085739136,0.8688843250274658,-0.07854470610618591],[-0.48747149109840393,0.8697009682655334,-0.07740731537342072],[-0.4985499382019043,0.8660683035850525,-0.037062011659145355],[-0.5233396291732788,0.8521240949630737,-0.0002806649135891348],[-0.4989730417728424,0.8658506870269775,-0.0364481545984745],[-0.4985499382019043,0.8660683035850525,-0.037062011659145355],[-0.5233396887779236,0.8521241545677185,-0.00028066494269296527],[-0.593992292881012,0.8027538061141968,0.052529819309711456],[-0.5939923524856567,0.8027538061141968,0.052529823035001755],[-0.5939923524856567,0.8027538657188416,0.052529823035001755],[-0.5939922332763672,0.8027538061141968,0.052529819309711456],[-0.6263992786407471,0.7756830453872681,0.07706866413354874],[-0.6263992786407471,0.7756831049919128,0.07706867158412933],[-0.6263992786407471,0.7756831645965576,0.07706866413354874],[-0.6263993382453918,0.7756831049919128,0.07706866413354874],[-0.6624122858047485,0.7462863922119141,0.06531944870948792],[-0.6624122262001038,0.7462863326072693,0.06531944870948792],[-0.6624122262001038,0.7462863326072693,0.06531943380832672],[-0.6624122858047485,0.7462863922119141,0.06531944870948792],[-0.7703719735145569,0.36437028646469116,-0.5232220888137817],[-0.7184540033340454,0.49049338698387146,-0.4931935667991638],[-0.5710006952285767,0.7150753736495972,-0.40326809883117676],[-0.3751875162124634,0.6258243918418884,-0.6837967038154602],[-0.42644965648651123,0.44377845525741577,-0.7881631851196289],[-0.08843350410461426,-0.2680386006832123,-0.9593408107757568],[-0.01909593679010868,0.41793292760849,-0.908277153968811],[-0.3751875162124634,0.6258243918418884,-0.6837967038154602],[-0.01909593679010868,0.41793292760849,-0.908277153968811],[-0.0025348279159516096,0.5433701276779175,-0.8394894003868103],[-0.34529393911361694,0.6041271686553955,-0.718193769454956],[-0.9440922141075134,-0.05124950408935547,0.3256736099720001],[-0.9889450073242188,-0.10021429508924484,0.10929232835769653],[-0.9473277926445007,-0.29350194334983826,0.12816645205020905],[-0.9089924097061157,-0.16209730505943298,0.3840016722679138],[-0.14601776003837585,-0.9890109300613403,0.023154597729444504],[-0.1164323017001152,-0.9908350110054016,-0.06847979128360748],[-0.5241155624389648,-0.8468071222305298,-0.09066712856292725],[-0.5452626347541809,-0.8380714058876038,0.01802668161690235],[-0.9950538277626038,-0.0990152582526207,0.007980860769748688],[-0.9836636781692505,-0.17351125180721283,0.04795341566205025],[-0.9323112368583679,-0.2517188787460327,0.25967937707901],[-0.9480769634246826,-0.18246516585350037,0.2604924142360687],[-0.07733840495347977,-0.994351327419281,-0.07269264757633209],[-0.07733839005231857,-0.9943512678146362,-0.0726926326751709],[-0.07733841240406036,-0.994351327419281,-0.07269264757633209],[-0.9524434804916382,0.03328288346529007,-0.30289217829704285],[-0.9473239183425903,-0.03956227004528046,-0.3178243041038513],[-0.9836636781692505,-0.17351125180721283,0.04795341566205025],[-0.9950538277626038,-0.0990152582526207,0.007980860769748688],[0.19794845581054688,-0.10567755252122879,-0.9744991660118103],[0.36142194271087646,-0.31621846556663513,-0.8771430850028992],[0.3618732988834381,-0.24133867025375366,-0.9004461169242859],[0.3067537546157837,-0.2993679940700531,-0.9034827351570129],[0.05825778469443321,0.1261458396911621,-0.9902995228767395],[0.19794845581054688,-0.10567755252122879,-0.9744991660118103],[0.3067537546157837,-0.2993679940700531,-0.9034827351570129],[0.05825778841972351,0.1261458396911621,-0.9902995228767395],[-0.573340117931366,0.03138911724090576,-0.8187159895896912],[-0.5588298439979553,0.24200040102005005,-0.7931865453720093],[-0.5588299036026001,0.24200041592121124,-0.793186604976654],[-0.5725812315940857,0.07158352434635162,-0.8167169094085693],[-0.5824649333953857,-0.08963058143854141,-0.8078991174697876],[-0.5974618196487427,-0.026273036375641823,-0.801466703414917],[-0.573340117931366,0.03138911724090576,-0.8187159895896912],[-0.5725812315940857,0.07158352434635162,-0.8167169094085693],[-0.9836636781692505,-0.17351125180721283,0.04795341566205025],[-0.9701706767082214,-0.13367219269275665,0.20223893225193024],[-0.8858831524848938,-0.2169192135334015,0.4100697338581085],[-0.9323112368583679,-0.2517188787460327,0.25967937707901],[0.4892696440219879,-0.6696873307228088,0.5586896538734436],[0.8253296613693237,-0.4897189140319824,0.2810806930065155],[0.7361050248146057,-0.5608598589897156,0.37892648577690125],[0.48926958441734314,-0.6696872711181641,0.5586895942687988],[-0.9473239183425903,-0.03956227004528046,-0.3178243041038513],[-0.9773173332214355,0.023850541561841965,-0.21043281257152557],[-0.9701706767082214,-0.13367219269275665,0.20223893225193024],[-0.9836636781692505,-0.17351125180721283,0.04795341566205025],[0.36142194271087646,-0.31621846556663513,-0.8771430850028992],[0.30721333622932434,0.06397239118814468,-0.9494879841804504],[0.3064556419849396,0.06269384920597076,-0.9498180150985718],[0.3618732988834381,-0.24133867025375366,-0.9004461169242859],[-0.5824649333953857,-0.08963058143854141,-0.8078991174697876],[-0.6289485692977905,0.09341081976890564,-0.7718148827552795],[-0.6298378705978394,0.08495340496301651,-0.7720667123794556],[-0.5974618196487427,-0.026273036375641823,-0.801466703414917],[-0.9701706767082214,-0.13367219269275665,0.20223893225193024],[-0.9699404239654541,0.08530983328819275,0.22789880633354187],[-0.6252967715263367,0.2084946185350418,0.7520199418067932],[-0.8858831524848938,-0.2169192135334015,0.4100697338581085],[0.44077548384666443,-0.15774056315422058,0.8836487531661987],[0.8349682092666626,-0.11871185153722763,0.5373412370681763],[0.8264356851577759,-0.12037667632102966,0.5500122308731079],[0.44077542424201965,-0.1577405482530594,0.8836486339569092],[-0.9773173332214355,0.023850541561841965,-0.21043281257152557],[-0.9860050678253174,0.010643646121025085,-0.1663745939731598],[-0.9699404239654541,0.08530983328819275,0.22789880633354187],[-0.9701706767082214,-0.13367219269275665,0.20223893225193024],[0.30721333622932434,0.06397239118814468,-0.9494879841804504],[0.27058839797973633,-0.22081521153450012,-0.9370286464691162],[0.26844555139541626,-0.19278335571289062,-0.9438068270683289],[0.3064556419849396,0.06269384920597076,-0.9498180150985718],[-0.6289485692977905,0.09341081976890564,-0.7718148827552795],[-0.6188177466392517,-0.11514642834663391,-0.7770494222640991],[-0.6176766753196716,-0.12217335402965546,-0.7768841981887817],[-0.6298378705978394,0.08495340496301651,-0.7720667123794556],[-0.9699404239654541,0.08530983328819275,0.22789880633354187],[-0.9185221791267395,0.179682195186615,0.3521808981895447],[-0.5893592238426208,0.2972886562347412,0.751182496547699],[-0.6252967715263367,0.2084946185350418,0.7520199418067932],[0.45717763900756836,0.2989414632320404,0.8376291394233704],[0.7812478542327881,0.20770178735256195,0.5886525511741638],[0.8054727911949158,0.19689813256263733,0.5589675903320312],[0.45717766880989075,0.298941433429718,0.8376291990280151],[-0.9860050678253174,0.010643646121025085,-0.1663745939731598],[-0.9825411438941956,-0.002801100490614772,-0.18602432310581207],[-0.9185221791267395,0.179682195186615,0.3521808981895447],[-0.9699404239654541,0.08530983328819275,0.22789880633354187],[0.9796860218048096,-0.0870121568441391,-0.18067669868469238],[0.9796860814094543,-0.0870121568441391,-0.18067671358585358],[0.9796860218048096,-0.0870121568441391,-0.18067669868469238],[0.9796860218048096,-0.0870121568441391,-0.18067669868469238],[0.27058839797973633,-0.22081521153450012,-0.9370286464691162],[0.2750524580478668,-0.29193371534347534,-0.9160352945327759],[0.2750525176525116,-0.2919337749481201,-0.9160354137420654],[0.26844555139541626,-0.19278335571289062,-0.9438068270683289],[-0.6188177466392517,-0.11514642834663391,-0.7770494222640991],[-0.6042844653129578,-0.19331619143486023,-0.7729612588882446],[-0.604284405708313,-0.19331616163253784,-0.7729611992835999],[-0.6176766753196716,-0.12217335402965546,-0.7768841981887817],[0.7592925429344177,-0.5591611266136169,-0.3328869938850403],[0.7637971043586731,-0.47234907746315,-0.43988677859306335],[0.7637970447540283,-0.47234907746315,-0.43988680839538574],[0.7611100077629089,-0.5448593497276306,-0.351908802986145],[0.653254508972168,-0.738763153553009,0.16579394042491913],[0.7592925429344177,-0.5591611266136169,-0.3328869938850403],[0.7611100077629089,-0.5448593497276306,-0.351908802986145],[0.7014369964599609,-0.7124874591827393,0.018645010888576508],[0.957516610622406,-0.28402209281921387,-0.04993342235684395],[0.9081516265869141,-0.15485897660255432,-0.38894644379615784],[0.9081515669822693,-0.15485896170139313,-0.38894644379615784],[0.958380937576294,-0.272652268409729,-0.08465664088726044],[0.8253296613693237,-0.4897189140319824,0.2810806930065155],[0.957516610622406,-0.28402209281921387,-0.04993342235684395],[0.958380937576294,-0.272652268409729,-0.08465664088726044],[0.7361050248146057,-0.5608598589897156,0.37892648577690125],[0.8349682092666626,-0.11871185153722763,0.5373412370681763],[0.9973436594009399,-0.06475552171468735,0.033351972699165344],[0.9980437755584717,-0.06244455277919769,-0.0030331613961607218],[0.8264356851577759,-0.12037667632102966,0.5500122308731079],[0.9973436594009399,-0.06475552171468735,0.033351972699165344],[0.9729381203651428,-0.04641494154930115,-0.22635598480701447],[0.972938060760498,-0.04641493782401085,-0.22635596990585327],[0.9980437755584717,-0.06244455277919769,-0.0030331613961607218],[0.005773970857262611,-0.9999786019325256,0.0030797752551734447],[0.005813247058540583,-0.9999827742576599,0.0006093024858273566],[0.005796223413199186,-0.9999817609786987,0.0016803601756691933],[0.005773970391601324,-0.9999785423278809,0.0030797747895121574],[0.8054727911949158,0.19689813256263733,0.5589675903320312],[0.7812478542327881,0.20770178735256195,0.5886525511741638],[0.9732228517532349,0.07332519441843033,0.21785473823547363],[0.9732228517532349,0.07332518696784973,0.21785475313663483],[-0.976742684841156,-0.052896250039339066,0.20778752863407135],[-0.9942461252212524,0.10711942613124847,-0.0001879819465102628],[-0.9950538277626038,-0.0990152582526207,0.007980860769748688],[-0.9480769634246826,-0.18246516585350037,0.2604924142360687],[-0.8752921223640442,0.48130813241004944,-0.04696930944919586],[-0.9942461252212524,0.10711942613124847,-0.0001879819465102628],[-0.976742684841156,-0.052896250039339066,0.20778752863407135],[-0.9018002152442932,0.43143555521965027,0.024890722706913948],[-0.522422730922699,0.8478277921676636,-0.09089833498001099],[-0.8752921223640442,0.48130813241004944,-0.04696930944919586],[-0.9018002152442932,0.43143555521965027,0.024890722706913948],[-0.5388258695602417,0.838491678237915,-0.08123032748699188],[-0.42569205164909363,0.8998918533325195,-0.09476727247238159],[-0.522422730922699,0.8478277921676636,-0.09089833498001099],[-0.5388258695602417,0.838491678237915,-0.08123032748699188],[-0.4188113212585449,0.9034200310707092,-0.09181131422519684],[-0.42569205164909363,0.8998918533325195,-0.09476727247238159],[-0.4188113212585449,0.9034200310707092,-0.09181131422519684],[-0.4022566080093384,0.9120044112205505,-0.08023528009653091],[-0.4223349988460541,0.9020577669143677,-0.08902166038751602],[0.453835129737854,-0.7205432653427124,0.5242624878883362],[0.653254508972168,-0.738763153553009,0.16579394042491913],[0.7014369964599609,-0.7124874591827393,0.018645010888576508],[0.45383507013320923,-0.7205432653427124,0.5242624282836914],[-0.8112958073616028,0.5839515328407288,-0.02827322669327259],[-0.7427892088890076,-0.6691581606864929,0.02216845005750656],[-0.7525398135185242,-0.6579435467720032,0.028177954256534576],[-0.8390973806381226,0.5439773201942444,-0.002080581383779645],[-0.8112958073616028,0.5839515328407288,-0.02827322669327259],[-0.8390973806381226,0.5439773201942444,-0.002080581383779645],[-0.5433249473571777,0.8394855856895447,0.007872949354350567],[-0.5200663208961487,0.8529512286186218,-0.044778332114219666],[-0.9415944814682007,0.18800051510334015,0.2793843746185303],[-0.9776735305786133,0.1435503214597702,0.15345264971256256],[-0.9889450073242188,-0.10021429508924484,0.10929232835769653],[-0.9440922141075134,-0.05124950408935547,0.3256736099720001],[-0.3431074023246765,-0.3458298444747925,0.8733149170875549],[-0.3431074023246765,-0.3458298146724701,0.8733147978782654],[-0.3431074023246765,-0.3458298444747925,0.8733148574829102],[-0.00481108482927084,-0.9999883770942688,-0.00021707858832087368],[-0.004620146472007036,-0.9999879598617554,0.001657801796682179],[-0.005666486918926239,-0.9999467730522156,-0.008618608117103577],[-0.004471795167773962,-0.9999850988388062,0.0031143990345299244],[-0.004471795167773962,-0.9999850392341614,0.0031143990345299244],[-0.004620146472007036,-0.9999879598617554,0.001657801796682179],[-0.00481108482927084,-0.9999883770942688,-0.00021707858832087368],[-0.0010187785374000669,-0.9999849796295166,0.005365046672523022],[-0.0010187787702307105,-0.9999850988388062,0.005365047138184309],[-0.0010187787702307105,-0.9999851584434509,0.005365047603845596],[-0.0010187785374000669,-0.9999849796295166,0.005365046672523022],[-0.1169370636343956,0.10038254410028458,-0.9880532622337341],[-0.062225598841905594,0.01109904982149601,-0.9980003833770752],[-0.6522122621536255,0.1848730444908142,-0.7351468801498413],[-0.7579457759857178,0.27697327733039856,-0.5905961990356445],[-0.6522122621536255,0.1848730444908142,-0.7351468801498413],[-0.8674748539924622,0.37473905086517334,-0.32719752192497253],[-0.8674747943878174,0.37473902106285095,-0.32719749212265015],[-0.7579457759857178,0.27697327733039856,-0.5905961990356445],[-0.05369451642036438,0.7826659679412842,0.6201216578483582],[-0.2027406543493271,0.552531898021698,0.8084582090377808],[0.5579318404197693,0.6933944225311279,0.45597830414772034],[0.5375236868858337,0.6949065327644348,0.4776747524738312],[0.5375236868858337,0.6949065327644348,0.4776747524738312],[0.5579318404197693,0.6933944225311279,0.45597830414772034],[0.8256932497024536,0.5639258027076721,0.014774173498153687],[0.8919774293899536,0.4263274669647217,-0.1504036784172058],[0.8951589465141296,0.40545105934143066,-0.18520253896713257],[0.577497124671936,0.14261436462402344,-0.8038396239280701],[0.7394495010375977,0.2839336097240448,-0.6104065179824829],[0.7394495010375977,0.2839336097240448,-0.6104065179824829],[0.577497124671936,0.14261436462402344,-0.8038396239280701],[-0.062225598841905594,0.01109904982149601,-0.9980003833770752],[-0.1169370636343956,0.10038254410028458,-0.9880532622337341],[-0.600369393825531,0.3730711340904236,0.7073715329170227],[-0.5113011002540588,-0.13511663675308228,0.8487134575843811],[-0.5113010406494141,-0.13511662185192108,0.8487133979797363],[-0.2027406543493271,0.552531898021698,0.8084582090377808],[-0.062225598841905594,0.01109904982149601,-0.9980003833770752],[-0.07047327607870102,-0.056778404861688614,-0.9958964586257935],[-0.34511494636535645,-0.029002906754612923,-0.9381122589111328],[-0.6522122621536255,0.1848730444908142,-0.7351468801498413],[-0.9913008809089661,-0.13160249590873718,0.0017998266266658902],[-0.9913009405136108,-0.13160249590873718,0.001799826743081212],[-0.9913008809089661,-0.13160249590873718,0.0017998265102505684],[-0.9913009405136108,-0.13160249590873718,0.001799826743081212],[0.4942286014556885,-0.19463640451431274,0.8472630977630615],[0.4942286014556885,-0.19463637471199036,0.8472630977630615],[0.4942285716533661,-0.19463635981082916,0.8472630381584167],[0.4942286014556885,-0.19463637471199036,0.8472630977630615],[0.9881885051727295,-0.1460365206003189,-0.04644080996513367],[0.988188624382019,-0.1460365206003189,-0.046440813690423965],[0.9881885051727295,-0.14603650569915771,-0.04644080623984337],[0.9881885051727295,-0.1460365206003189,-0.04644080996513367],[0.9552457928657532,-0.07108645141124725,-0.2871449589729309],[0.9552457928657532,-0.07108644396066666,-0.2871449291706085],[0.9552457332611084,-0.07108644396066666,-0.2871449291706085],[0.9552457928657532,-0.07108644396066666,-0.2871449589729309],[0.577497124671936,0.14261436462402344,-0.8038396239280701],[0.23435240983963013,-0.08183195441961288,-0.9687013626098633],[-0.07047327607870102,-0.056778404861688614,-0.9958964586257935],[-0.062225598841905594,0.01109904982149601,-0.9980003833770752],[-0.5763696432113647,0.6622241139411926,0.4788082242012024],[-0.600369393825531,0.3730711340904236,0.7073715329170227],[-0.2027406543493271,0.552531898021698,0.8084582090377808],[-0.05369451642036438,0.7826659679412842,0.6201216578483582],[0.8391563296318054,0.5393615961074829,0.07004023343324661],[0.8951589465141296,0.40545105934143066,-0.18520253896713257],[0.8919774293899536,0.4263274669647217,-0.1504036784172058],[-0.882590115070343,-0.03650842234492302,-0.46872344613075256],[-0.882590115070343,-0.036508429795503616,-0.4687235355377197],[-0.882590115070343,-0.03650842607021332,-0.46872347593307495],[-0.882590115070343,-0.03650842607021332,-0.4687235355377197],[-0.889030396938324,0.451751708984375,0.07446818053722382],[-0.600369393825531,0.3730711340904236,0.7073715329170227],[-0.5763696432113647,0.6622241139411926,0.4788082242012024],[0.7184011936187744,-0.6829391717910767,-0.13226424157619476],[0.7996262311935425,-0.5610377788543701,0.21408973634243011],[0.8230825662612915,-0.48958125710487366,-0.28782880306243896],[-0.8023288249969482,-0.39257118105888367,-0.4496179223060608],[-0.9208201766014099,-0.29577285051345825,-0.2541823387145996],[-0.9269654154777527,-0.3435562551021576,0.15067937970161438],[-0.9473277926445007,-0.29350194334983826,0.12816645205020905],[-0.15191736817359924,-0.44608259201049805,0.8820042610168457],[-0.25170090794563293,-0.22472083568572998,0.9413539171218872],[-0.26237815618515015,-0.23019830882549286,0.9371053576469421],[-0.06973143666982651,-0.5524761080741882,0.8306068181991577],[0.7996262311935425,-0.5610377788543701,0.21408973634243011],[0.9406462907791138,-0.33650943636894226,-0.04411286488175392],[0.8721233010292053,-0.2860887944698334,-0.396930992603302],[0.8230825662612915,-0.48958125710487366,-0.28782880306243896],[-0.42734047770500183,-0.3831574618816376,-0.8188837766647339],[-0.42732101678848267,-0.3530570864677429,-0.8323144912719727],[-0.4079180657863617,-0.11905945837497711,-0.905222475528717],[-0.4048710763454437,-0.10387067496776581,-0.9084548354148865],[-0.9269654154777527,-0.3435562551021576,0.15067937970161438],[-0.9208201766014099,-0.29577285051345825,-0.2541823387145996],[-0.9601566791534424,-0.03858241066336632,-0.2767859101295471],[-0.975777804851532,-0.06980238854885101,0.2073289453983307],[0.017434529960155487,-0.09912088513374329,0.9949226379394531],[0.192292720079422,-0.014951392076909542,0.9812236428260803],[0.1922927349805832,-0.014951393008232117,0.9812237024307251],[-0.01032331120222807,-0.11210950464010239,0.993642270565033],[0.9751980304718018,-0.11135800182819366,-0.19128048419952393],[0.9552814364433289,-0.05336516350507736,-0.29084277153015137],[0.7979761958122253,-0.04630596935749054,-0.6009073853492737],[0.8455327749252319,-0.09537559002637863,-0.5253358483314514],[-0.41832828521728516,-0.009852799586951733,-0.908242404460907],[-0.45054566860198975,0.015090747736394405,-0.8926258683204651],[-0.4505457282066345,0.01509074866771698,-0.8926258683204651],[-0.4249478876590729,-0.004779197741299868,-0.9052051901817322],[-0.9693365097045898,0.016211897134780884,-0.24520176649093628],[-0.9765109419822693,0.04683363065123558,-0.21031633019447327],[-0.9765108227729797,0.046833623200654984,-0.21031630039215088],[-0.9990457892417908,-0.007293658331036568,0.043061260133981705],[-0.3569827079772949,-0.42108333110809326,0.8338177800178528],[-0.3664427697658539,-0.2725484073162079,0.8896274566650391],[-0.36669278144836426,-0.26424306631088257,0.892026960849762],[-0.3673076629638672,-0.1461908519268036,0.9185385704040527],[-0.36669278144836426,-0.26424306631088257,0.892026960849762],[-0.3664427697658539,-0.2725484073162079,0.8896274566650391],[-0.4056936502456665,0.8296096324920654,-0.3836149275302887],[-0.24315686523914337,0.8125669956207275,-0.5297257900238037],[-0.2557784914970398,0.9142258763313293,-0.3142741918563843],[-0.42595726251602173,0.8905650973320007,-0.15954336524009705],[-0.7374564409255981,-0.445467084646225,0.5076581835746765],[-0.9089924097061157,-0.16209730505943298,0.3840016722679138],[-0.9473277926445007,-0.29350194334983826,0.12816645205020905],[-0.9269654154777527,-0.3435562551021576,0.15067937970161438],[-0.7374564409255981,-0.445467084646225,0.5076581835746765],[-0.9269654154777527,-0.3435562551021576,0.15067937970161438],[-0.975777804851532,-0.06980238854885101,0.2073289453983307],[-0.8294135928153992,-0.08758260309696198,0.5517268180847168],[0.981040894985199,-0.1073567122220993,0.16134801506996155],[0.9929326176643372,-0.05349728837609291,0.1059369444847107],[0.9552814364433289,-0.05336516350507736,-0.29084277153015137],[0.9751980304718018,-0.11135800182819366,-0.19128048419952393],[0.6430631875991821,-0.5529570579528809,0.5298190712928772],[0.8140770792961121,-0.37448689341545105,0.44388967752456665],[0.9406462907791138,-0.33650943636894226,-0.04411286488175392],[0.7996262311935425,-0.5610377788543701,0.21408973634243011],[0.45072656869888306,-0.7097382545471191,0.5414029955863953],[0.6430631875991821,-0.5529570579528809,0.5298190712928772],[0.7996262311935425,-0.5610377788543701,0.21408973634243011],[0.002940503880381584,-0.9999933838844299,-0.0021192675922065973],[0.0027015653904527426,-0.9999943971633911,-0.00194975221529603],[0.00006992677663220093,-1,-0.0000827307885629125],[0.0033051983918994665,-0.999991774559021,-0.0023780008777976036],[0.003305198159068823,-0.9999916553497314,-0.0023780004121363163],[0.0027015653904527426,-0.9999943971633911,-0.00194975221529603],[0.002940503880381584,-0.9999933838844299,-0.0021192675922065973],[-0.0027710082940757275,-0.9999944567680359,-0.0018955926643684506],[-0.003205943154171109,-0.9999924898147583,-0.002180637326091528],[-0.00000987338262348203,-0.9999999403953552,-0.00008601825538789853],[-0.003205943154171109,-0.9999924898147583,-0.002180637326091528],[-0.0027710082940757275,-0.9999944567680359,-0.0018955926643684506],[-0.003571542212739587,-0.999990701675415,-0.0024202410131692886],[-0.003571541979908943,-0.9999906420707703,-0.0024202410131692886],[0.10659994184970856,0.22384177148342133,-0.9687782526016235],[0.024921411648392677,0.016289647668600082,-0.9995567202568054],[-0.7404559850692749,0.273591011762619,-0.6138997673988342],[-0.702672004699707,0.40140748023986816,-0.5874725580215454],[0.35547885298728943,0.776340663433075,0.5205093026161194],[0.35547885298728943,0.7763406038284302,0.5205092430114746],[0.5515531897544861,0.7534278631210327,0.3579602837562561],[0.6331616640090942,0.7248905301094055,0.27136680483818054],[0.5515531897544861,0.7534278631210327,0.3579602837562561],[0.7814196944236755,0.2204984575510025,-0.583749532699585],[0.8275907635688782,0.36162346601486206,-0.42932745814323425],[0.6331616640090942,0.7248905301094055,0.27136680483818054],[0.8275907635688782,0.36162346601486206,-0.42932745814323425],[0.7814196944236755,0.2204984575510025,-0.583749532699585],[0.024921411648392677,0.016289647668600082,-0.9995567202568054],[0.10659994184970856,0.22384177148342133,-0.9687782526016235],[-0.5469435453414917,-0.15651975572109222,0.8224075436592102],[-0.5469436049461365,-0.15651977062225342,0.822407603263855],[-0.5469436049461365,-0.15651977062225342,0.822407603263855],[-0.5469436049461365,-0.15651975572109222,0.822407603263855],[0.024921411648392677,0.016289647668600082,-0.9995567202568054],[0.014822925440967083,-0.09616053104400635,-0.9952554702758789],[-0.5146061778068542,-0.10557375848293304,-0.8509023189544678],[-0.7404559850692749,0.273591011762619,-0.6138997673988342],[0.5432253479957581,-0.2052222639322281,0.8141191601753235],[0.5432253479957581,-0.2052222341299057,0.8141191005706787],[0.5432254076004028,-0.2052222490310669,0.8141191601753235],[0.5432254076004028,-0.2052222341299057,0.8141191005706787],[0.9766983985900879,0.013071822933852673,-0.21421776711940765],[0.9766983985900879,0.013071823865175247,-0.21421778202056885],[0.9766984581947327,0.013071823865175247,-0.21421779692173004],[0.9766984581947327,0.013071822933852673,-0.21421779692173004],[0.7814196944236755,0.2204984575510025,-0.583749532699585],[0.584661066532135,-0.05284975841641426,-0.8095544576644897],[0.014822925440967083,-0.09616053104400635,-0.9952554702758789],[0.024921411648392677,0.016289647668600082,-0.9995567202568054],[-0.9812504649162292,-0.06350800395011902,-0.1819731593132019],[-0.9812504649162292,-0.06350800395011902,-0.1819731742143631],[-0.9812504649162292,-0.06350800395011902,-0.1819731444120407],[-0.981250524520874,-0.06350801140069962,-0.1819731742143631],[-0.7404559850692749,0.273591011762619,-0.6138997673988342],[-0.8199886679649353,0.5490710735321045,-0.1616777777671814],[-0.8199886083602905,0.5490710139274597,-0.1616777628660202],[-0.702672004699707,0.40140748023986816,-0.5874725580215454],[-0.08212380856275558,-0.9820094108581543,-0.17003856599330902],[-0.4672388732433319,-0.8609240055084229,-0.20123977959156036],[-0.5241155624389648,-0.8468071222305298,-0.09066712856292725],[-0.1164323017001152,-0.9908350110054016,-0.06847979128360748],[-0.9602015614509583,-0.24244357645511627,-0.13868680596351624],[-0.927798330783844,-0.3665548264980316,-0.06948138028383255],[-0.5241155624389648,-0.8468071222305298,-0.09066712856292725],[-0.4672388732433319,-0.8609240055084229,-0.20123977959156036],[-0.975777804851532,-0.06980238854885101,0.2073289453983307],[-0.9601566791534424,-0.03858241066336632,-0.2767859101295471],[-0.9693365097045898,0.016211897134780884,-0.24520176649093628],[-0.9990457892417908,-0.007293658331036568,0.043061260133981705],[-0.4079180657863617,-0.11905945837497711,-0.905222475528717],[-0.41832828521728516,-0.009852799586951733,-0.908242404460907],[-0.4249478876590729,-0.004779197741299868,-0.9052051901817322],[-0.4048710763454437,-0.10387067496776581,-0.9084548354148865],[0.9406462907791138,-0.33650943636894226,-0.04411286488175392],[0.9751980304718018,-0.11135800182819366,-0.19128048419952393],[0.8455327749252319,-0.09537559002637863,-0.5253358483314514],[0.8721233010292053,-0.2860887944698334,-0.396930992603302],[0.8140770792961121,-0.37448689341545105,0.44388967752456665],[0.981040894985199,-0.1073567122220993,0.16134801506996155],[0.9751980304718018,-0.11135800182819366,-0.19128048419952393],[0.9406462907791138,-0.33650943636894226,-0.04411286488175392],[-0.25170090794563293,-0.22472083568572998,0.9413539171218872],[0.017434529960155487,-0.09912088513374329,0.9949226379394531],[-0.01032331120222807,-0.11210950464010239,0.993642270565033],[-0.26237815618515015,-0.23019830882549286,0.9371053576469421],[-0.975777804851532,-0.06980238854885101,0.2073289453983307],[-0.9990457892417908,-0.007293658331036568,0.043061260133981705],[-0.7721172571182251,-0.06749111413955688,0.6318860650062561],[-0.8294135928153992,-0.08758260309696198,0.5517268180847168],[-0.04987340047955513,-0.5272462964057922,0.8482475280761719],[-0.05676192045211792,-0.4981537163257599,0.8652287721633911],[-0.07380927354097366,-0.42228904366493225,0.9034512639045715],[-0.07380927354097366,-0.42228904366493225,0.9034512042999268],[-0.15191736817359924,-0.44608259201049805,0.8820042610168457],[-0.06973143666982651,-0.5524761080741882,0.8306068181991577],[-0.05676192045211792,-0.4981537163257599,0.8652287721633911],[-0.04987340047955513,-0.5272462964057922,0.8482475280761719],[-0.3823562264442444,0.7435925006866455,-0.5485195517539978],[-0.37371256947517395,0.7407341003417969,-0.5582579374313354],[-0.36483970284461975,0.7376870512962341,-0.5680755376815796],[-0.382356196641922,0.7435925602912903,-0.5485196113586426],[-0.8538330793380737,0.20588931441307068,0.47809889912605286],[-0.952582061290741,0.091758131980896,0.2901168465614319],[-0.9451659917831421,0.2027226686477661,-0.2560560405254364],[-0.9093189835548401,0.4027748107910156,0.1044585332274437],[-0.12615735828876495,-0.3186514675617218,0.9394389390945435],[-0.12615734338760376,-0.3186514675617218,0.9394389390945435],[-0.12615735828876495,-0.3186514973640442,0.9394389390945435],[-0.12615734338760376,-0.3186514675617218,0.9394388794898987],[-0.7794650793075562,0.1058986485004425,0.617429792881012],[-0.8184667229652405,0.018256813287734985,0.5742636919021606],[-0.952582061290741,0.091758131980896,0.2901168465614319],[-0.8538330793380737,0.20588931441307068,0.47809889912605286],[-0.37371256947517395,0.7407341003417969,-0.5582579374313354],[-0.3530687987804413,0.7334728837013245,-0.5808269381523132],[-0.35306885838508606,0.7334729433059692,-0.580826997756958],[-0.36483970284461975,0.7376870512962341,-0.5680755376815796],[-0.952582061290741,0.091758131980896,0.2901168465614319],[-0.9957332015037537,-0.09205184876918793,-0.006468675099313259],[-0.9985544085502625,0.053307000547647476,0.006882904563099146],[-0.9451659917831421,0.2027226686477661,-0.2560560405254364],[-0.2771816551685333,-0.5325545072555542,0.7997224926948547],[-0.3361224830150604,-0.726291835308075,0.5996015071868896],[-0.3422775864601135,-0.7490001320838928,0.5673136711120605],[-0.2771816551685333,-0.5325545072555542,0.7997224926948547],[-0.8184667229652405,0.018256813287734985,0.5742636919021606],[-0.9033880233764648,-0.30862173438072205,0.2977290153503418],[-0.9957332015037537,-0.09205184876918793,-0.006468675099313259],[-0.952582061290741,0.091758131980896,0.2901168465614319],[-0.9957332015037537,-0.09205184876918793,-0.006468675099313259],[-0.9655999541282654,-0.2024228423833847,0.16322247684001923],[-0.9866953492164612,0.01157301478087902,0.16216762363910675],[-0.9985544085502625,0.053307000547647476,0.006882904563099146],[-0.3361224830150604,-0.726291835308075,0.5996015071868896],[-0.40485987067222595,-0.873597264289856,0.2700302004814148],[-0.4063848555088043,-0.8713362812995911,0.27499908208847046],[-0.3422775864601135,-0.7490001320838928,0.5673136711120605],[-0.9033880233764648,-0.30862173438072205,0.2977290153503418],[-0.9148621559143066,-0.37137898802757263,0.15844525396823883],[-0.9655999541282654,-0.2024228423833847,0.16322247684001923],[-0.9957332015037537,-0.09205184876918793,-0.006468675099313259],[-0.33072471618652344,0.7130166292190552,0.6182462573051453],[-0.33072471618652344,0.7130166888237,0.61824631690979],[-0.33072471618652344,0.7130166888237,0.6182462573051453],[-0.33072471618652344,0.7130166888237,0.6182462573051453],[-0.7358707785606384,0.20594705641269684,0.6450425386428833],[-0.7616881728172302,0.14306820929050446,0.6319513916969299],[-0.6089897155761719,0.4303660988807678,0.66627037525177],[-0.6089898347854614,0.4303662180900574,0.6662704348564148],[-0.40485987067222595,-0.873597264289856,0.2700302004814148],[-0.4520634412765503,-0.7724806070327759,0.4459960162639618],[-0.4520634114742279,-0.7724805474281311,0.4459960460662842],[-0.4063848555088043,-0.8713362812995911,0.27499908208847046],[-0.8172847032546997,-0.05075358599424362,0.5739944577217102],[-0.8172847628593445,-0.05075358971953392,0.5739944577217102],[-0.7616881728172302,0.14306820929050446,0.6319513916969299],[-0.7358707785606384,0.20594705641269684,0.6450425386428833],[-0.5218523144721985,0.12872415781021118,0.843267560005188],[-0.4824405908584595,0.4865904748439789,0.7283408641815186],[-0.4746325612068176,0.5189173817634583,0.7109490036964417],[-0.5218522548675537,0.12872417271137238,0.8432676196098328],[-0.0833234190940857,0.9758344888687134,0.20200049877166748],[-0.0833234190940857,0.9758344888687134,0.20200049877166748],[-0.08332342654466629,0.9758344888687134,0.20200051367282867],[-0.08332342654466629,0.9758344888687134,0.20200049877166748],[-0.4056936502456665,0.8296096324920654,-0.3836149275302887],[-0.42595726251602173,0.8905650973320007,-0.15954336524009705],[-0.7619723081588745,0.6466788649559021,0.03470776230096817],[-0.7022985219955444,0.7114459872245789,0.024928009137511253],[-0.7165502309799194,0.5546915531158447,-0.4229336977005005],[-0.6365807056427002,0.5654520392417908,-0.5244320034980774],[-0.8085176348686218,0.5237716436386108,-0.2682582139968872],[-0.8085176348686218,0.5237715840339661,-0.2682582139968872],[-0.5550318956375122,0.5669994950294495,-0.6086469292640686],[-0.555031955242157,0.5669995546340942,-0.6086468696594238],[-0.6365807056427002,0.5654520392417908,-0.5244320034980774],[-0.7165502309799194,0.5546915531158447,-0.4229336977005005],[-0.48476293683052063,0.7562461495399475,0.4394277036190033],[-0.484762966632843,0.7562462687492371,0.4394277036190033],[-0.48476290702819824,0.7562460899353027,0.43942761421203613],[-0.48476290702819824,0.7562460899353027,0.43942761421203613],[-0.2713889181613922,0.7295088171958923,0.6278254389762878],[-0.2713889181613922,0.7295088768005371,0.6278254389762878],[-0.2713888883590698,0.7295088768005371,0.6278254389762878],[-0.9646292328834534,-0.18377573788166046,0.18898944556713104],[-0.9646292328834534,-0.18377572298049927,0.18898946046829224],[-0.9646291136741638,-0.18377570807933807,0.18898943066596985],[-0.9646292328834534,-0.18377573788166046,0.18898946046829224],[-0.10347545146942139,0.23581929504871368,-0.966272234916687],[-0.12586091458797455,0.3021451234817505,-0.9449166059494019],[-0.12141623347997665,0.28894558548927307,-0.9496148228645325],[-0.10347545146942139,0.23581930994987488,-0.966272234916687],[0.5906820893287659,0.791027843952179,0.15927840769290924],[0.5870707631111145,0.7962804436683655,0.14589446783065796],[0.5851361155509949,0.7989506125450134,0.1389012187719345],[0.5906820297241211,0.791027843952179,0.15927839279174805],[0.015503320842981339,0.08264702558517456,0.9964582324028015],[-0.0007061606738716364,0.07823371142148972,0.9969347715377808],[-0.007696251384913921,0.07632371783256531,0.9970533847808838],[0.015503320842981339,0.08264703303575516,0.9964582324028015],[-0.9076508283615112,-0.3570781648159027,0.22060135006904602],[-0.907650887966156,-0.3570781648159027,0.2206013798713684],[-0.907650887966156,-0.3570782244205475,0.2206013947725296],[-0.9076509475708008,-0.3570781648159027,0.2206013798713684],[-0.12586091458797455,0.3021451234817505,-0.9449166059494019],[-0.21108824014663696,0.5587577223777771,-0.8020172119140625],[-0.21108822524547577,0.5587576627731323,-0.8020172119140625],[-0.12141623347997665,0.28894558548927307,-0.9496148228645325],[0.5870707631111145,0.7962804436683655,0.14589446783065796],[0.5699755549430847,0.816970944404602,0.08767196536064148],[0.5699754953384399,0.816970944404602,0.08767195791006088],[0.5851361155509949,0.7989506125450134,0.1389012187719345],[-0.0007061606738716364,0.07823371142148972,0.9969347715377808],[-0.10919831693172455,0.04812295362353325,0.9928544759750366],[-0.10919830948114395,0.04812295362353325,0.9928543567657471],[-0.007696251384913921,0.07632371783256531,0.9970533847808838],[-0.8077946901321411,-0.550134539604187,0.21170684695243835],[-0.7513380646705627,-0.646805465221405,-0.13089564442634583],[-0.8316102027893066,-0.4946551024913788,-0.25246918201446533],[0.7430096864700317,0.0557236447930336,0.6669567823410034],[0.7430096864700317,0.055723633617162704,0.6669567227363586],[0.7430097460746765,0.0557236522436142,0.6669568419456482],[0.7430096864700317,0.0557236447930336,0.6669568419456482],[-0.4017104208469391,0.8051612377166748,0.436284601688385],[-0.4017103314399719,0.80516117811203,0.4362845718860626],[-0.4017103910446167,0.80516117811203,0.4362845718860626],[-0.4017103612422943,0.80516117811203,0.436284601688385],[-0.722770631313324,0.05587755888700485,0.688825249671936],[-0.7227705717086792,0.055877555161714554,0.688825249671936],[-0.7227705717086792,0.05587755888700485,0.688825249671936],[-0.7227706909179688,0.05587756633758545,0.6888251900672913],[0.41099199652671814,0.8038304448127747,0.43004918098449707],[0.41099199652671814,0.8038303256034851,0.43004921078681946],[0.41099199652671814,0.8038303852081299,0.43004921078681946],[0.4109920263290405,0.8038303852081299,0.43004924058914185],[0.47810599207878113,-0.8609418272972107,-0.17376361787319183],[0.11485107243061066,-0.9807531833648682,-0.15790025889873505],[0.1343700885772705,-0.9893593192100525,-0.05579141527414322],[0.5313248038291931,-0.8438926935195923,-0.07442483305931091],[0.9485647082328796,-0.2816155254840851,-0.14462943375110626],[0.47810599207878113,-0.8609418272972107,-0.17376361787319183],[0.5313248038291931,-0.8438926935195923,-0.07442483305931091],[0.925125002861023,-0.375169962644577,-0.058234188705682755],[-0.8023288249969482,-0.39257118105888367,-0.4496179223060608],[-0.16912665963172913,-0.595000147819519,-0.7857295274734497],[-0.015343433246016502,-0.6270102262496948,-0.7788599729537964],[-0.015343430452048779,-0.6270101070404053,-0.7788599133491516],[-0.9602015614509583,-0.24244357645511627,-0.13868680596351624],[-0.16912665963172913,-0.595000147819519,-0.7857295274734497],[-0.8023288249969482,-0.39257118105888367,-0.4496179223060608],[0.01625058241188526,-0.6071835160255432,-0.7943953275680542],[0.2705770432949066,-0.6124230623245239,-0.7427825927734375],[0.7406501770019531,-0.43752405047416687,-0.5099119544029236],[0.01625058427453041,-0.6071835160255432,-0.7943953275680542],[-0.40848779678344727,-0.621504008769989,-0.6684836149215698],[-0.42732101678848267,-0.3530570864677429,-0.8323144912719727],[-0.42734047770500183,-0.3831574618816376,-0.8188837766647339]],"edges":[7,1,0,3,5,4,2,8,10,14,21,23,31,27,36,34,33,32,37,38,46,82,84,44,45,53,49,51,52,57,209,60,1481,59,64,67,492,74,71,80,76,79,88,83,96,86,95,91,98,94,99,101,106,102,107,109,110,115,117,122,118,123,125,130,126,131,133,138,134,139,141,145,142,495,17,494,150,151,160,155,158,159,168,163,166,167,170,171,174,175,178,179,182,183,186,187,190,137,129,105,93,85,193,194,199,220,207,1303,603,602,113,114,121,58,208,205,212,352,211,219,218,223,222,227,48,198,228,235,225,221,239,237,238,247,246,251,249,250,254,259,257,258,263,267,266,271,269,270,274,279,277,278,282,283,287,286,290,291,293,294,298,215,241,301,303,300,305,307,304,243,315,242,311,308,319,262,289,318,330,288,335,336,340,344,349,55,24,20,75,154,213,356,361,87,162,364,601,393,405,383,385,384,389,392,400,395,398,399,403,408,406,28,29,30,410,412,39,40,41,327,418,372,373,422,376,377,426,380,381,436,391,394,325,414,42,413,388,514,454,1460,458,448,449,452,455,457,470,459,474,462,478,482,471,473,475,476,479,480,484,487,210,332,18,16,19,69,65,15,204,11,62,496,451,598,466,483,506,504,477,508,587,512,515,516,517,521,518,520,523,524,525,526,530,531,532,472,538,539,540,543,544,547,549,550,552,554,556,536,562,567,535,576,578,467,583,463,461,460,591,510,595,456,501,202,201,499,609,611,610,615,614,617,619,618,622,625,627,626,631,630,633,635,634,638,675,652,643,642,645,647,646,650,653,655,146,147,659,148,149,661,663,368,666,370,671,369,673,676,683,687,693,63,613,629,641,657,696,698,697,700,701,704,705,709,712,714,688,716,689,720,690,691,731,729,730,727,733,734,728,738,736,740,749,747,761,751,764,758,759,760,763,762,770,806,812,772,771,779,775,781,780,783,939,788,1301,789,792,797,1222,798,801,808,804,809,816,813,824,810,825,821,822,818,829,827,830,826,837,835,834,845,843,846,842,853,851,854,850,861,859,862,858,869,867,1219,745,880,886,888,894,896,900,904,908,912,916,915,919,923,950,933,1332,838,782,935,936,1082,937,943,944,947,948,776,926,958,959,953,949,963,965,964,971,972,975,977,976,980,983,985,984,987,991,992,995,997,996,1000,1003,1005,1004,1008,1007,1011,1012,1016,1015,1021,1020,1024,969,1027,1030,1031,1034,967,1039,968,1035,1038,1043,988,1017,1044,1056,1018,1059,1066,1070,1074,785,754,750,805,884,942,1086,817,892,1094,1334,1117,1135,1111,1109,1110,1113,1118,1124,1122,1126,1125,1129,1132,1134,757,756,755,1138,1136,769,768,767,1051,1146,1099,1098,1150,1102,1101,1154,1106,1105,1160,1119,1123,1053,1142,766,1143,1114,1239,1184,1176,1175,1177,1189,1178,1183,1181,1200,1187,1204,1192,1208,1212,1199,1197,1203,1202,1207,1206,1210,1214,938,1062,746,743,795,791,739,928,735,786,1226,1179,1329,1196,1211,1232,1234,1201,1238,1316,1244,1243,1242,1245,1248,1246,1250,1249,1255,1254,1258,1257,1256,1198,1262,1261,1260,1265,1264,1269,1275,1274,1272,1278,1276,1295,1282,1285,1297,1311,1309,1195,1312,1191,1185,1186,1320,1236,1324,1182,1229,930,931,1223,1340,1341,1344,1345,1350,1349,1353,1356,1357,1360,1361,1366,1365,1369,1404,1387,1372,1373,1378,1377,1381,1384,876,1388,874,873,1394,1097,1397,1096,1411,1412,1416,1425,793,1346,1362,1374,1390,1429,1427,1428,1433,1432,1437,1436,1440,1445,1443,1423,1449,1422,1453,1421,1420,1174,1466,1462,574,1478,575,1486,1300,1307,447,1489],"indices":[3,2,1,-5,0,5,4,-2,144,0,1,-144,143,1,2,-143,141,21,41,-141,101,102,3,-5,100,101,4,-6,116,117,-119,6,7,10,-10,10,7,8,-12,120,121,119,-126,9,10,14,-14,10,11,71,-15,8,16,15,-12,65,100,5,-18,145,18,0,-145,142,194,19,-144,2,21,141,-143,22,21,2,-4,102,103,22,-4,12,23,6,-10,25,13,58,-58,13,105,12,-10,27,25,57,-57,26,24,25,-28,28,26,27,-30,29,27,56,-56,30,28,29,-32,31,29,55,-65,32,30,31,-34,33,31,64,-55,34,32,33,-36,35,33,54,-54,36,34,35,-38,37,35,53,-53,38,36,37,-40,39,37,-53,188,187,189,-191,22,42,41,-22,103,104,42,-23,12,44,43,-24,105,106,44,-13,26,46,45,-25,28,47,46,-27,30,48,47,-29,32,49,48,-31,34,50,49,-33,36,51,50,-35,38,51,-37,14,59,58,-14,14,71,72,-60,107,171,145,-145,66,65,17,-62,16,139,68,-68,94,65,-67,15,16,67,-70,60,73,74,-71,72,71,73,-61,15,73,71,-12,74,73,15,-70,67,68,76,-76,76,68,95,-97,69,67,75,-78,70,74,79,-79,74,69,77,-80,75,76,81,-81,81,76,96,-83,77,75,80,-84,78,79,85,-85,79,77,83,-86,80,81,87,-87,87,81,82,-89,83,80,86,-90,99,98,84,-91,84,85,91,-91,85,83,89,-92,93,92,60,-71,95,94,92,-94,97,93,70,-79,96,95,93,-98,82,96,97,-99,98,97,78,-85,120,125,116,-119,82,98,99,-89,100,139,16,-9,7,101,100,-9,6,102,101,-8,23,103,102,-7,23,43,104,-104,68,65,94,-96,24,105,13,-26,24,45,106,-106,19,107,144,-144,192,191,-194,118,117,-123,120,118,122,-124,121,120,123,-125,91,89,111,-113,111,89,86,-127,87,88,113,-111,88,114,-114,99,90,115,-115,90,91,112,-116,109,110,117,-117,112,111,119,-122,125,126,109,-117,110,113,122,-118,113,114,123,-123,114,115,124,-124,115,112,121,-125,86,87,110,-110,88,99,-115,111,126,125,-120,126,86,-110,129,18,-131,18,145,146,-131,128,127,169,-171,151,129,167,-169,130,166,167,-130,146,165,166,-131,132,131,135,-137,150,133,137,-150,133,134,138,-138,134,147,148,-139,68,139,-66,100,65,-140,20,141,140,-41,128,146,145,-172,128,170,165,-147,131,150,149,-136,127,151,168,-170,63,151,-128,152,153,-155,156,152,154,-156,154,153,-158,157,158,155,-155,137,138,159,-161,159,138,148,-165,136,135,161,-163,161,135,149,-164,149,137,160,-164,164,162,153,-153,160,159,156,-156,159,164,152,-157,162,161,157,-154,157,161,163,-159,163,160,155,-159,0,18,-368,165,147,134,-167,167,166,134,-134,168,167,133,-151,169,168,150,-132,170,169,131,-133,165,170,132,-148,171,107,108,-64,128,171,63,-128,20,40,172,-174,19,194,195,-175,108,107,175,-177,107,19,174,-176,173,172,177,-179,174,195,196,-180,176,175,180,-182,175,174,179,-181,179,196,197,-185,181,180,185,-187,180,179,184,-186,183,182,187,-189,184,197,188,-191,186,185,191,-193,185,184,190,-192,193,191,190,-190,178,177,182,-184,20,194,142,-142,195,194,20,-174,196,195,173,-179,203,202,204,-206,188,197,-184,197,196,198,-200,196,178,200,-199,178,183,201,-201,183,197,199,-202,199,198,202,-204,198,200,204,-203,200,201,205,-205,201,199,203,-206,209,210,207,-209,206,207,210,-212,316,315,207,-207,315,314,208,-208,313,140,41,-228,277,210,209,-279,276,211,210,-278,289,291,-291,212,215,216,-214,216,217,214,-214,293,298,292,-295,215,219,220,-217,216,220,250,-218,214,217,221,-223,245,223,211,-277,317,316,206,-225,314,315,225,-356,208,314,313,-228,228,209,208,-228,278,209,228,-280,218,215,212,-230,231,57,58,-220,219,215,218,-281,233,56,57,-232,232,233,231,-231,234,235,233,-233,235,55,56,-234,236,237,235,-235,237,64,55,-236,238,239,237,-237,239,54,64,-238,240,241,239,-239,241,53,54,-240,242,243,241,-241,243,52,53,-242,38,39,243,-243,39,52,-244,352,353,189,-188,228,227,41,-43,279,228,42,-105,218,229,43,-45,280,218,44,-107,232,230,45,-47,234,232,46,-48,236,234,47,-49,238,236,48,-50,240,238,49,-51,242,240,50,-245,38,242,-245,220,219,58,-60,220,59,72,-251,281,316,317,-343,66,61,223,-246,222,246,247,-313,94,66,-246,221,248,246,-223,60,249,252,-252,72,60,251,-251,221,217,250,-252,252,248,221,-252,246,253,254,-248,254,272,271,-248,248,255,253,-247,249,256,257,-253,252,257,255,-249,253,258,259,-255,259,260,272,-255,255,261,258,-254,256,262,263,-258,257,263,261,-256,258,264,265,-260,265,266,260,-260,261,267,264,-259,275,268,262,-275,262,268,269,-264,263,269,267,-262,270,249,60,-93,271,270,92,-95,273,256,249,-271,272,273,270,-272,260,274,273,-273,274,262,256,-274,293,291,289,-299,260,266,275,-275,276,214,222,-313,213,214,276,-278,212,213,277,-279,229,212,278,-280,229,279,104,-44,247,271,94,-246,230,231,219,-281,230,280,106,-46,225,315,316,-282,192,193,-355,291,295,-291,293,296,295,-292,294,297,296,-294,269,285,284,-268,284,299,264,-268,265,283,286,-267,266,286,-288,275,287,288,-269,268,288,285,-270,282,289,290,-284,285,294,292,-285,298,289,282,-300,283,290,295,-287,286,295,296,-288,287,296,297,-289,288,297,294,-286,264,282,283,-266,266,287,-276,284,292,298,-300,299,282,-265,62,151,-303,224,303,318,-318,301,341,340,-301,151,339,338,-303,303,302,338,-338,318,303,337,-337,305,309,308,-305,322,321,310,-307,306,310,311,-308,307,311,320,-320,247,245,-313,276,312,-246,226,40,140,-314,301,342,317,-319,301,318,336,-342,304,308,321,-323,300,340,339,-152,63,300,-152,323,325,-325,327,326,325,-324,325,328,-325,328,325,326,-330,310,331,330,-312,309,333,332,-309,332,334,321,-309,321,334,331,-311,335,323,324,-334,331,326,327,-331,333,324,328,-333,328,329,334,-333,334,329,326,-332,330,327,323,-336,330,335,320,-312,62,368,223,-62,206,211,223,-369,336,337,307,-320,338,306,307,-338,339,322,306,-339,340,304,322,-340,341,305,304,-341,336,319,305,-342,342,63,108,-282,301,300,63,-343,226,343,172,-41,225,344,356,-356,108,176,345,-282,281,345,344,-226,343,346,177,-173,344,347,357,-357,176,181,348,-346,345,348,347,-345,347,350,358,-358,181,186,351,-349,348,351,350,-348,349,352,187,-183,350,353,352,-359,186,192,354,-352,351,354,353,-351,193,189,353,-355,346,349,182,-178,226,313,314,-356,356,343,226,-356,357,346,343,-357,364,366,365,-364,352,349,-359,358,360,359,-358,357,359,361,-347,346,361,362,-350,349,362,360,-359,360,364,363,-360,359,363,365,-362,361,365,366,-363,362,366,364,-361,151,62,-130,136,148,147,-133,309,320,335,-334,309,305,319,-321,136,162,164,-149,367,62,61,-18,0,367,17,-6,224,368,62,-303,206,368,-225,62,367,18,-130,224,302,-304],"vertices":[[0.0157338739516657,-0.3731179032440599,-0.32995091819094924],[0.11687308808801855,-0.35310123346158495,-0.30618964469864796],[0.20075006391154804,-0.3372663122765826,-0.35346234278807576],[0.21376653949833713,-0.4586353926753043,-0.3644821931439939],[0.1462680608791268,-0.4789949608683861,-0.31827696717897946],[0.02909283600772916,-0.5189211101896504,-0.3429796328397152],[0.2266313792215815,-0.7336079497801105,-0.39612760920656453],[0.18517119924079262,-0.7556619933046275,-0.3344087141160079],[0.09432772032275161,-0.7898673630747339,-0.29925991060658697],[0.22226867697366093,-0.8420862070617336,-0.4150355298249529],[0.19372548486164387,-0.8609811631868679,-0.3710872863761998],[0.12479181300360287,-0.904793730260175,-0.3345827036261946],[0.24086914945346416,-0.8390654904968264,-0.4509747269824572],[0.20488551963023072,-0.9318172060262624,-0.4513162548461153],[0.18687376572179482,-0.9250028362338856,-0.4340865469444228],[0.04034784009380665,-0.9272736433976296,-0.3350249887126051],[-0.0078003602774770475,-0.8265943526910275,-0.3005164197585371],[-0.04373171759553546,-0.5172659428701358,-0.40378309583825756],[-0.09231542545243976,-0.3607376308873834,-0.38384447209790634],[0.15854741538183958,-0.13278122569164597,-0.34811464995196056],[0.2972139356461112,-0.1430455393723507,-0.44456236529564985],[0.23242065243943788,-0.32572418249098567,-0.41988411557904415],[0.24351925354214898,-0.44110500646333844,-0.42748771832946075],[0.252313553282717,-0.7308192054110468,-0.4513450337412126],[0.2433512022051315,-1.0189215634222721,-0.4529352257357231],[0.20102896114772306,-1.013305564646629,-0.45336631327220467],[0.2353650743605905,-1.1121492655025969,-0.45227552889553296],[0.19898175263022277,-1.1098628719296966,-0.4533390681460935],[0.2293866915720696,-1.2196178468059924,-0.4572879533035819],[0.19466017197241614,-1.2189368533761642,-0.45971414784690423],[0.23087171157634068,-1.3224632753063412,-0.4639676934142127],[0.19624807885840334,-1.325536119290168,-0.4671454917588955],[0.24046647291478918,-1.436182545573114,-0.46933615431146397],[0.2055254743763768,-1.446555466679321,-0.4703311662145881],[0.252759589885161,-1.554674573298902,-0.47019247411768966],[0.22173674930799536,-1.5634024649876934,-0.4699648545095093],[0.2687676611527293,-1.6862270170202698,-0.4779183845814437],[0.24120226749595863,-1.6983844161619797,-0.47879375214034814],[0.26825861566220754,-1.719871773499349,-0.5010424340581925],[0.26020185153787434,-1.7242664776298982,-0.5010424340581925],[0.3197018078010073,-0.1407680582408563,-0.5006491822967628],[0.2552811060983087,-0.3152468200074686,-0.5018674102944807],[0.2670241388944766,-0.43296294716576134,-0.5013808881294625],[0.27804397888709087,-0.7327584075746746,-0.5010438432338127],[0.2644026375247217,-0.8445926343043153,-0.5012655974254291],[0.27245442726315416,-1.02588222161335,-0.5010424340581925],[0.261020220924998,-1.1187079104064535,-0.5010424340581925],[0.2536758717681,-1.2182037947072404,-0.5010424340581925],[0.25622632232590437,-1.3184962025504028,-0.5010424340581925],[0.26545098935332867,-1.4316689536195342,-0.5010424340581925],[0.27729740646980294,-1.5491772136269946,-0.5010424340581925],[0.2911469258821232,-1.6794230519850688,-0.5011391413341425],[0.22696242460328386,-1.6998574976400886,-0.5010424340581925],[0.20443881977633327,-1.5657790607582625,-0.5010424340581925],[0.19011830892563286,-1.4453513336655854,-0.5010424340581925],[0.1802932335199744,-1.2211875971834414,-0.5010424340581925],[0.18347766956084377,-1.1098716600114549,-0.5010424340581925],[0.1854752171257671,-1.0132325240803182,-0.5010280889949845],[0.19111136216430857,-0.9315884257280386,-0.5010019172437798],[0.17386292777236012,-0.9277026012751475,-0.5010465165029092],[0.08906378370924217,-0.9548489029197704,-0.501088208199981],[-0.06665870366583032,-0.5265560049363746,-0.5014962457294326],[-0.078245084759337,-0.3738967988063995,-0.5013970703273921],[-0.01604988185546874,-0.10566638703784598,-0.5011546151739334],[0.18099271508406745,-1.3273355204833734,-0.5010424340581925],[-0.05480312538865528,-0.6709641919909357,-0.3976845816302308],[-0.06256868067170884,-0.6769721620122628,-0.5011454623726946],[-0.11204301087094687,-0.8565196364723835,-0.32028962444107667],[-0.12241249136023896,-0.7232612892861385,-0.3597764448083851],[-0.10270766375722834,-0.9002413380965681,-0.33380131050760065],[-0.08204717371623016,-0.9101598490507312,-0.413349793349582],[0.13048358825780237,-0.9546151482356457,-0.41622589000772553],[0.13346652021647087,-0.958536249375217,-0.5009846822849621],[0.04798418570308527,-0.9756241354622152,-0.3987578468415579],[-0.08720121785454632,-0.9262443600483095,-0.3680969861084156],[-0.21179569784386576,-0.8715243326505318,-0.3265818080735104],[-0.2193511682290395,-0.8426875895905401,-0.35474862571230337],[-0.19416174854460033,-0.909378787557864,-0.3298906555784211],[-0.1924488602128539,-0.932054401327302,-0.39099745248387646],[-0.18823163802592574,-0.9382437395312353,-0.3582642004046108],[-0.2750072921469279,-0.8740381385655331,-0.32588829577249834],[-0.2801507449885968,-0.8540190955864513,-0.3531126330959411],[-0.2821261772628692,-0.8679019848375231,-0.38047982856447427],[-0.2675889697263625,-0.9079510558978845,-0.32710078160922584],[-0.2765896650286004,-0.9321858494747322,-0.3837428909924891],[-0.26883188222351695,-0.9344988974654178,-0.35078252710693714],[-0.4267743033031933,-0.8256152484594821,-0.3125861453487443],[-0.41525332502097906,-0.8035847918147783,-0.3492709045014004],[-0.4280193610042675,-0.8188384767338728,-0.38258437724278593],[-0.4226837621438738,-0.8719605448408216,-0.32197409659336446],[-0.4306821186870878,-0.8817829672406664,-0.38352406982937093],[-0.42711614724762226,-0.8939579425458928,-0.3496974477290955],[0.008775288421379646,-0.8553944303816083,-0.5010269360786841],[-0.09516815286015318,-0.8814535385343818,-0.42935742935838395],[-0.05679333573437484,-0.7560765047364248,-0.5010469728121367],[-0.12058950328722012,-0.7788019867245188,-0.41608177790285594],[-0.2159641088691417,-0.8602680849679791,-0.3862440122234432],[-0.21207272968532798,-0.9019510759839108,-0.3946854725540805],[-0.28562601009646116,-0.9074875674915717,-0.39227286430224995],[-0.4302202987727124,-0.8450427955017354,-0.38708264186980895],[0.047167515897811096,-0.6791209516351804,-0.3398766109147567],[0.1709339679007159,-0.6310600310098489,-0.3169962700755864],[0.231705004121167,-0.604650394463928,-0.3798302877621651],[0.2622930004641656,-0.60038373931711,-0.43731419796280585],[0.28546111989100476,-0.603102427751403,-0.5010424340581925],[0.2409513926336917,-0.934164038387858,-0.4528639521127373],[0.27376094972001586,-0.941379177870981,-0.5010327615914043],[0.049126511972002684,-0.08819054030379636,-0.36489817616495357],[0.018218496802715256,-0.08854790847755756,-0.5010668748125175],[-0.46377085281879393,-0.7895889218239331,-0.2971575278588029],[-0.45636754682566677,-0.7549061146403834,-0.3498977496680369],[-0.45828259990024145,-0.877163130694887,-0.3169331782810771],[-0.4583390565893903,-0.8942146208583772,-0.3520752870961398],[-0.4644544163480042,-0.788427029637139,-0.4077718797159925],[-0.46387807156156546,-0.8406193642926086,-0.40818318888686617],[-0.46217133385071935,-0.8838545917022967,-0.390958071928828],[-0.49951540413434625,-0.7913033024714498,-0.3031468957495216],[-0.49959904053125,-0.7614625625238005,-0.3510575484674311],[-0.49896611178133565,-0.7953574891604771,-0.3519750117670216],[-0.49996629788781516,-0.8805045915173604,-0.31976269188791984],[-0.49952915429558187,-0.8451740156564786,-0.35314405463354825],[-0.49990291025336314,-0.889536542544342,-0.35328441522238424],[-0.49966809009205,-0.7952897131525778,-0.4044108633389465],[-0.49965027767758863,-0.8429828193937563,-0.4015198538864043],[-0.4997033879911181,-0.8820197065563317,-0.3935165022306816],[-0.49965733022978676,-0.8450465262911612,-0.302257786449566],[-0.463179983861855,-0.8383702371607491,-0.29531634182403005],[-0.10272930233589711,-0.16585560664736737,-0.44868022412420827],[-0.13205952520386238,-0.19296169867262497,-0.3831356739235531],[-0.16003569950300478,-0.3415203138292653,-0.43662639584227586],[-0.15760469638664498,-0.30427682750690266,-0.36785071255310703],[-0.30677624915600726,-0.232708306343606,-0.415839509764528],[-0.3094584587603607,-0.23335704917151023,-0.38487470887119096],[-0.30205394026067023,-0.3101054812798075,-0.4024668836921931],[-0.30504232331722175,-0.2984135602987709,-0.37090520312562025],[-0.4234108463680647,-0.24053069398557692,-0.413733981753992],[-0.41847725561324045,-0.22793260570626633,-0.38376743129626667],[-0.42432253212569737,-0.3068465952632886,-0.39068407653542603],[-0.4246738325849899,-0.2931137252003436,-0.3637795093189772],[-0.051220282490342606,-0.6930680519175892,-0.34476092934090247],[0.2719064157497424,-0.20831020782295456,-0.5016535894660049],[0.2511784813265716,-0.21130271547448226,-0.42484384776810785],[0.21959461292622018,-0.21522704996488917,-0.3620583303440626],[0.12108154291979645,-0.2197703431476189,-0.3193187072196598],[0.017971725808816563,-0.23448179927691126,-0.3169183587564141],[-0.08431503770164961,-0.23733875491264045,-0.3216714052112969],[-0.1516474961914186,-0.2578748645795091,-0.3571408700718523],[-0.3083902922945819,-0.26226681207120506,-0.36120380338942204],[-0.4237945736054485,-0.256448086343494,-0.3555723322009665],[-0.42830959569497495,-0.28334042486127,-0.41496676412152544],[-0.3020111190887069,-0.27108235658489127,-0.42389026317256434],[-0.1076786919476086,-0.22509585851325942,-0.501982106565876],[-0.5,-0.21596079261187445,-0.33077423087406194],[-0.49999734926115896,-0.185241741926996,-0.38373594757883583],[-0.4999942979158492,-0.22088300964060242,-0.38520442774998653],[-0.4996264874179352,-0.30819492328832554,-0.3853031796734226],[-0.4999790590012291,-0.2835335968470868,-0.3437950694118182],[-0.4999947817526028,-0.22138880105368064,-0.43861549213281975],[-0.49998963119053463,-0.28295841275069156,-0.42676496596632524],[-0.45393069880587344,-0.28608431685079405,-0.3407934316895016],[-0.45779052172912854,-0.31559875780995467,-0.3845846296300429],[-0.45572155027331196,-0.21269214436302508,-0.4416028595855832],[-0.45459817330568564,-0.17278154777017896,-0.38287177238820835],[-0.4550752739117502,-0.28277373867412203,-0.42454726037207285],[-0.45428692183454705,-0.21439535336887278,-0.3278947765054353],[-0.22387354826437772,-0.258915423203538,-0.3567911707430216],[-0.2216229702699638,-0.3012862681565195,-0.37382199647841524],[-0.22169967944587665,-0.3157089611842667,-0.41712619685761],[-0.22315190995641787,-0.2634123716909581,-0.4379340168093574],[-0.21796864130093413,-0.20472491918490737,-0.4234266659515598],[-0.22136836461827125,-0.22076128227228675,-0.38601531483165097],[-0.02890937411386968,-0.1216716394867371,-0.36486806040364544],[0.3824839467879616,-0.0681177739569852,-0.500636049440301],[0.34634768622400336,-0.07018745011747107,-0.4531830796948856],[0.2012077074144275,-0.07321005280369897,-0.39566503277100007],[0.1407647319441383,-0.061373252833299696,-0.40000969250672597],[0.09443549868393697,-0.05275910876877471,-0.5012453470437112],[0.4385008380433101,0.015364940330685029,-0.49941540699516873],[0.4366655383651865,0.01783509600940625,-0.47237079397524157],[0.30078032161773516,0.011838515259131266,-0.3857192974173338],[0.23099366693734358,0.00789565118124369,-0.4234622742639669],[0.2013940810728465,0.015051305299635609,-0.5011811777894433],[0.42289594075300685,0.09580283300843684,-0.5010181272020051],[0.42208818338913834,0.07572583843360992,-0.46825062931155204],[0.32322392173811354,0.10887145674075316,-0.40441861509030863],[0.25354985399194485,0.11311551988493806,-0.4200373992079185],[0.21850232068882236,0.11390259209410225,-0.5036258164432295],[0.37841357261814845,0.1460189270519252,-0.5011937110923375],[0.3790469777561918,0.12570971156195965,-0.4623441212176466],[0.34349205709118114,0.20098526945822714,-0.5045958380484868],[0.3353287582021377,0.17853677785837951,-0.46196078778581334],[0.28469796618738064,0.18731938779208046,-0.45704552453404257],[0.2517401724012108,0.19016755534605145,-0.504213288989222],[0.2952965586006234,0.20770433830738666,-0.5034788011559114],[0.21990634110934093,-0.14534830696550788,-0.39642938861788357],[0.29191546850380656,-0.06299651931239891,-0.413714757825146],[0.37619599138354365,0.014600252858074758,-0.3898211138513619],[0.3884891912603471,0.08487655292397467,-0.39827697917450383],[0.4472388443167665,0.03054821696267429,-0.3776938097443522],[0.45035853043449303,0.07633196735563008,-0.3874609957340894],[0.46825827775372786,0.03383881468931116,-0.4202576764152431],[0.46514116173538356,0.07918519220193365,-0.4172287521135995],[0.499099304526217,0.06935808558869894,-0.3669188960775318],[0.4976656865095882,0.0721331711231431,-0.3679765748797028],[0.5,0.06954023101910223,-0.36926747983749664],[0.49912202088849766,0.07276230657995475,-0.37004048904318687],[0.014025711286525078,-0.3769411540676397,-0.6762976767373217],[0.1166960414031637,-0.3541797839579317,-0.6952468329421674],[0.1997245942580851,-0.3349985311975949,-0.6496201591473352],[0.2131222736177436,-0.45565539094083046,-0.6375479774540894],[0.14562798177333314,-0.4804601092373136,-0.6833074155359549],[0.02779211700108508,-0.5221509297293871,-0.6575783682510077],[0.22611155589494125,-0.733508234069406,-0.6068996148655231],[0.18478332150017285,-0.7556419714013765,-0.6679505431993294],[0.09560634476535268,-0.7898673838013418,-0.7031108188862343],[0.22231386097892714,-0.8421591854482209,-0.5880210534872538],[0.19315857068180886,-0.8606810004509666,-0.6313146055716296],[0.12489440971280819,-0.9049104210627661,-0.6673919818424863],[0.24086143915531777,-0.839423542648649,-0.5506863856349979],[0.20505381968654335,-0.9317840020003741,-0.5513094948305568],[0.18648895551914713,-0.9240108193256059,-0.5691943915352168],[0.04060605217527735,-0.9273373155371607,-0.666763229827921],[-0.007180800513524488,-0.8276637005734577,-0.7007530843288725],[-0.044430577361390944,-0.5218498187511735,-0.5994006037603241],[-0.09172272737235188,-0.3602500685259711,-0.6433657393945322],[0.15781937255203238,-0.13131382330410718,-0.6561658188313297],[0.2976272242080412,-0.14265525734521217,-0.5587326776406795],[0.23243192771414645,-0.32559754291659293,-0.581638175400213],[0.24393950624434035,-0.4369945159438957,-0.5735269365686133],[0.2523594834458682,-0.7309077702066902,-0.5505988053532309],[0.24335252870803847,-1.018949627249396,-0.5491405123098729],[0.20114420108775977,-1.013432660206396,-0.5487046628352217],[0.2353650743605905,-1.1121492655025969,-0.549809339220852],[0.19898175263022277,-1.1098628719296966,-0.5487457999702915],[0.2293866915720696,-1.2196178468059924,-0.544796914812803],[0.19466017197241614,-1.2189368533761642,-0.5423707202694806],[0.23087171157634068,-1.3224632753063412,-0.5381171747021722],[0.19624807885840334,-1.325536119290168,-0.5349393763574893],[0.24046647291478918,-1.436182545573114,-0.532748713804921],[0.2055254743763768,-1.446555466679321,-0.5317537019017968],[0.252759589885161,-1.554674573298902,-0.5318923939986953],[0.22173674930799536,-1.5634024649876934,-0.5321200136068756],[0.2687676611527293,-1.6862270170202698,-0.5241664835349412],[0.24120226749595863,-1.6983844161619797,-0.5232911159760367],[0.2911469258821232,-1.6794230519850688,-0.5009457267822424],[-0.05484238158405624,-0.672512334879628,-0.6046755980191589],[-0.11204118692944987,-0.858167816334203,-0.6822526591855005],[-0.12278872074720759,-0.7234529275029692,-0.6435124526886958],[-0.10295783391482594,-0.9013768245848719,-0.6674776241864128],[-0.0820468835437193,-0.9101596003314363,-0.5887338726235435],[0.13201420679949805,-0.9545253191169193,-0.5885892009002601],[0.04599861811753991,-0.9755767958897252,-0.6012558942517867],[-0.08862426530113582,-0.9270451947251326,-0.6322341933485318],[-0.21114270606133784,-0.8741242783480497,-0.6765369446991532],[-0.21932345675425013,-0.8432597061489631,-0.6477895851358175],[-0.19589780922400163,-0.9154613008245763,-0.6696728310477678],[-0.19382369756942086,-0.9322362980384101,-0.6112669806002257],[-0.1909037330456141,-0.940904828722118,-0.6376876955180799],[-0.2750377602605707,-0.8769901464251846,-0.6774817463945905],[-0.27972848180543725,-0.8543324404449898,-0.6502125359650004],[-0.2821780559624936,-0.8677616242486872,-0.6211630031847952],[-0.2700695508888676,-0.9143649047188103,-0.6730120223066737],[-0.2784561997048598,-0.933285188758823,-0.6178712447681147],[-0.27270896004786566,-0.9386388715846272,-0.644430807232427],[-0.42572666654255964,-0.8270603075636829,-0.6890976214511677],[-0.4139749285710651,-0.8031217179406238,-0.6534145792592979],[-0.4275875014016409,-0.8185790832357507,-0.6190361734029692],[-0.4247734809342186,-0.8747751767431777,-0.6774742226359154],[-0.4309104740898493,-0.8802124707053322,-0.6177584816577245],[-0.42932257756716596,-0.8942068276537992,-0.6478504177300635],[-0.09504026968928514,-0.8814571864173757,-0.5726744719114608],[-0.12047770396409818,-0.7789066353679084,-0.5859783789152361],[-0.21665867822715762,-0.8602362488982136,-0.6158060559182437],[-0.21216902550572553,-0.90201317290124,-0.6074334493791174],[-0.2855788985166584,-0.9073714570340023,-0.6098593848398407],[-0.43029517364382436,-0.8450573663071035,-0.6150858166563185],[0.047357951971382484,-0.6792039409732931,-0.662085897671771],[0.17010888309262606,-0.6312954749125191,-0.6853874550004009],[0.2292896910470028,-0.6048164767731931,-0.6279650613720673],[0.2614418001300962,-0.5997977877479002,-0.5652052604867992],[0.24063037893022265,-0.9342026727850214,-0.5488849532342162],[0.047794868866341655,-0.08709733609564996,-0.6391417292435102],[-0.46269711089548465,-0.7894318141358975,-0.7047319090715018],[-0.4562206521736839,-0.7544916653884097,-0.6527699817529777],[-0.45818819538281663,-0.8776880113138599,-0.6840246598030355],[-0.4596655154522453,-0.8945779997484353,-0.647003124361587],[-0.4650906221689427,-0.7882718080704241,-0.5939648850203716],[-0.463919252740677,-0.8408684981198102,-0.5938237782736504],[-0.4626553545530033,-0.8834295718802838,-0.6111947172817116],[-0.49956175287782156,-0.7910449867569396,-0.701991851504443],[-0.4994893809065426,-0.7629113316908189,-0.6509875556516588],[-0.4992063691148421,-0.7965032353197015,-0.6498371460056525],[-0.4999477326764771,-0.8804072593665668,-0.6821375850583272],[-0.4994203452714323,-0.8450264007548706,-0.6487087272906495],[-0.4997690715831771,-0.8893797250288173,-0.648749164902702],[-0.49950178254285044,-0.7969555313577374,-0.5970185050753521],[-0.4995649540052589,-0.8423817477640687,-0.6016025156793413],[-0.4996591523900909,-0.8819662319078974,-0.6088373247133806],[-0.4996434631575284,-0.8445155313228518,-0.6999270046436026],[-0.46008564897644105,-0.8361049640013197,-0.7073144236917588],[-0.10073992105449436,-0.17157981904296205,-0.555338224063406],[-0.1309199763004063,-0.19583428217072602,-0.6189802841047122],[-0.1603829738187088,-0.33934092136975347,-0.5731183684916371],[-0.1550045641496558,-0.30652694951594234,-0.635000957149896],[-0.3073782534830513,-0.23318661427458193,-0.5859535225306877],[-0.30983226313420265,-0.23310039158563362,-0.6162887164368828],[-0.30155925830943725,-0.31064435235912646,-0.6003238186936125],[-0.3041533383769137,-0.2944227348501558,-0.6326613687377685],[-0.42350301241183413,-0.24037246706071363,-0.5880192813622765],[-0.4187311461969597,-0.22861152647530247,-0.617957208374464],[-0.42394422489628475,-0.30679386677273945,-0.6121638105616315],[-0.42450341841466954,-0.29365396423578527,-0.6381033676399208],[-0.050511349593037935,-0.6930275313991051,-0.6577023859094986],[0.25107791582494254,-0.2106731033056884,-0.5776820566565604],[0.2192018022529154,-0.21441363423705845,-0.6407266204080451],[0.12002829961172035,-0.21854890341626987,-0.6841317334595516],[0.018076934070619832,-0.23520737564037597,-0.6855676521296596],[-0.08445946070563803,-0.23725284312281097,-0.6836694057432822],[-0.15250342219209378,-0.25917744898086603,-0.6452775202558816],[-0.30830547901497224,-0.26038023476508687,-0.6396968292568307],[-0.42320864794449853,-0.2558019757947956,-0.6466892406112426],[-0.42830960605827895,-0.28334042486127,-0.5871181039948594],[-0.30200867334897236,-0.2710837038144061,-0.5781968019642602],[-0.4999985122181752,-0.21595045003452223,-0.6713120051984457],[-0.49999734926115896,-0.185241741926996,-0.6183489205375491],[-0.4999942979158492,-0.22088300964060242,-0.6168804403663984],[-0.4995978163659697,-0.30772459510139893,-0.6161100012600903],[-0.49998198436762503,-0.2836024506385979,-0.6582798913859809],[-0.4999947817526028,-0.22138880105368064,-0.5634693759835652],[-0.4999928085147582,-0.28288149630869946,-0.5752844441055601],[-0.45392641357968594,-0.286066927226749,-0.661290731722214],[-0.45751414795746775,-0.31472307935193145,-0.6155342989984971],[-0.4557215088200961,-0.21269243453553593,-0.5604824956060879],[-0.4545633785126395,-0.17269791590722067,-0.6192779389210551],[-0.4550770201284675,-0.2827709820352686,-0.5775334054245562],[-0.45481834169831864,-0.21375772000281373,-0.6741556647151941],[-0.22337188144627562,-0.25835456119321565,-0.6445138380237555],[-0.2199321557756524,-0.30128678632171746,-0.6291575149422399],[-0.21785663471173305,-0.31708638936682365,-0.5861226827412289],[-0.22315190995641787,-0.2634123716909581,-0.5641508616703315],[-0.2178508312615154,-0.20608462611769252,-0.578587260167566],[-0.22106061594387116,-0.2214999371253491,-0.6155040174243256],[-0.029719618670688674,-0.122189721778312,-0.6385841005840235],[0.34666016056500926,-0.07014748921740083,-0.5495322503812179],[0.2019645602292438,-0.07246750134834762,-0.6066075769599266],[0.14036450114519805,-0.06075821146987381,-0.6026488155737642],[0.43659929612627335,0.01781901216166004,-0.529588631528358],[0.29904542162837733,0.012538991700404511,-0.6157889979199253],[0.22906095220199474,0.010646362224773553,-0.5769670094099192],[0.4226667873758404,0.07812415568927944,-0.5327075403982874],[0.3214059495042114,0.11018668437294143,-0.5972140813476878],[0.2518522618968436,0.11460327580145468,-0.57895484137738],[0.37855998537649727,0.1268128230886919,-0.538634003033968],[0.3352456859575933,0.1802060159538459,-0.5380595858220658],[0.2827380581424406,0.18843995112268164,-0.5398540903541502],[0.21984714591712073,-0.1446188547263621,-0.6069750804449607],[0.2922245436811136,-0.06272404732467912,-0.5887529100129183],[0.37621986843586774,0.014609579831638908,-0.6122796722999058],[0.3901393608765269,0.08566321060098037,-0.6027022591322865],[0.44725144609438205,0.030569150836673664,-0.6243769020988232],[0.45060832751314794,0.07707485043670814,-0.6142136202684257],[0.4682288459704811,0.03379727856703896,-0.5817703593422244],[0.46533209524754504,0.07914506548900002,-0.5846038006412682],[0.499099304526217,0.06935808558869894,-0.6351659720388532],[0.4976657694160199,0.07213312966992724,-0.6341083243265939],[0.5,0.06954023101910223,-0.6328173882788882],[0.4991221037949293,0.07276230657995475,-0.632044399799806],[-0.07365745736226581,-0.40672151740641727,-0.3965094555042796],[-0.07860183113486058,-0.4044202110391185,-0.6115684698390338]]}')},function(e,t,n){"use strict";n.r(t),t.default="// scatter-vertex shader\n#define USE_SCALE_X\n#define USE_SCALE_Y\n#define USE_SCALE_Z\n#define USE_SCALE_SIZE_X\n#define USE_SCALE_SIZE_Y\n#define USE_SCALE_SIZE_Z\n#define USE_SCALE_AUX\n#include <scales>\n\n// for animation, all between 0 and 1\nuniform float animation_time_x;\nuniform float animation_time_y;\nuniform float animation_time_z;\nuniform float animation_time_aux;\nuniform float animation_time_vx;\nuniform float animation_time_vy;\nuniform float animation_time_vz;\nuniform float animation_time_size;\nuniform float animation_time_color;\n\nuniform vec2 domain_x;\nuniform vec2 domain_y;\nuniform vec2 domain_z;\nuniform vec2 domain_aux;\n\nuniform vec2 domain_size_x;\nuniform vec2 domain_size_y;\nuniform vec2 domain_size_z;\n\nuniform mat4 geo_matrix;\nuniform vec3 aspect;\n\nvarying vec4 vertex_color;\nvarying vec3 vertex_position;\nvarying vec2 vertex_uv;\n\n#ifdef IS_LINE\n    attribute vec3 position_previous;\n#else\n    attribute float x_next;\n    attribute float x_previous;\n    attribute float y_next;\n    attribute float y_previous;\n    attribute float z_next;\n    attribute float z_previous;\n#ifdef USE_AUX\n    attribute float aux_next;\n    attribute float aux_previous;\n#endif\n    attribute vec3 v_next;\n    attribute vec3 v_previous;\n\n    attribute float size_next;\n    attribute float size_previous;\n#endif\n\n#ifdef USE_COLORMAP\n    attribute float color_next;\n    attribute float color_previous;\n    uniform vec2 domain_color;\n#else\n    attribute vec4 color_next;\n    attribute vec4 color_previous;\n#endif\n\nuniform sampler2D colormap;\n\nattribute float instance_id;\nuniform float id_offset;\n\nvec4 encodeId(float v) {\n    vec4 color;\n    // matches Figure.readId\n    color.b = floor(v / 256.0 / 256.0);\n    color.g = floor((v - color.b * 256.0 * 256.0) / 256.0);\n    color.r = floor(v - color.b * 256.0 * 256.0 - color.g * 256.0);\n    color.a = 255.0;\n    // normalize\n    return color / 255.0;\n}\n\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n    // similar to phong\n    // varying vec3 vColor;\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <uv2_pars_vertex>\n    #include <envmap_pars_vertex>\n    #include <bsdfs>\n    #include <lights_pars_begin>\n    #include <color_pars_vertex>\n    #include <fog_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <shadowmap_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n\n#ifdef AS_LAMBERT\n    #define LAMBERT\n    varying vec3 vLightFront;\n\n    #ifdef DOUBLE_SIDED\n        varying vec3 vLightBack;\n    #endif\n\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <uv2_pars_vertex>\n    #include <envmap_pars_vertex>\n    #include <bsdfs>\n    #include <lights_pars_begin>\n    #include <color_pars_vertex>\n    #include <fog_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <shadowmap_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_LAMBERT\n#ifdef AS_PHONG\n    #define PHONG\n    varying vec3 vViewPosition;\n\n    #ifndef FLAT_SHADED\n        varying vec3 vNormal;\n    #endif\n\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <uv2_pars_vertex>\n    #include <displacementmap_pars_vertex>\n    #include <envmap_pars_vertex>\n    #include <color_pars_vertex>\n    #include <fog_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <shadowmap_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_PHONG\n#ifdef AS_PHYSICAL\n    #define PHYSICAL\n    varying vec3 vViewPosition;\n\n    #ifndef FLAT_SHADED\n        varying vec3 vNormal;\n    #endif\n\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <uv2_pars_vertex>\n    #include <displacementmap_pars_vertex>\n    #include <color_pars_vertex>\n    #include <fog_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <shadowmap_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_PHYSICAL\n#ifdef AS_DEPTH\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <displacementmap_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_DEPTH\n#ifdef AS_DISTANCE\n    #define DISTANCE\n\n    varying vec3 vWorldPosition;\n\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <displacementmap_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_DISTANCE\n\n\nvoid main(void) {\n    vec3 animation_time = vec3(animation_time_x, animation_time_y, animation_time_z);\n    vec3 animation_time_v = vec3(animation_time_vx, animation_time_vy, animation_time_vz);\n\n#ifdef IS_LINE\n    vec3 position_current = mix(position_previous, position, animation_time);\n    vec3 model_pos = vec3(SCALE_X(position_current.x), SCALE_Y(position_current.y), SCALE_Z(position_current.z));\n    vec4 view_pos = modelViewMatrix * vec4(model_pos, 1.0);\n#else\n    vec3 vector_next = v_next;\n    vec3 vector_previous = v_previous;\n    vec3 position_offset_next = vec3(x_next, y_next, z_next);\n    vec3 position_offset_previous = vec3(x_previous, y_previous, z_previous);\n\n    // assume the vector points to the y axis\n    vec3 vector_current = mix(normalize(vector_previous), normalize(vector_next), animation_time_v)\n           * mix(length(vector_previous), length(vector_next), (animation_time_vx+ animation_time_vy+ animation_time_vz)/3.);\n    vec3 y_axis = normalize(vector_current);\n    // we may have bad luck, and alight with 1 vector, so take two vectors, and we'll always find a non-zero vector\n    vec3 some_z_vector_a = vec3(0., 1., 1.);\n    vec3 some_z_vector_b = normalize(vec3(0., 2., 1.));\n    vec3 x_axis = normalize(cross(y_axis, some_z_vector_a)  + cross(y_axis, some_z_vector_b));\n    vec3 z_axis = -normalize(cross(y_axis, x_axis)); // - to keep it right handed\n    //float vector_length = length(vector_current);\n    // the following matrix should point it to the direction of 'vector'\n    mat3 move_to_vector = mat3(x_axis, y_axis, z_axis);\n\n    float size_current = mix(size_previous, size_next, animation_time_size);\n    // TODO: replace the 0. in SCALE_SIZE_X(0.) by a uniform, so we can make it work with log?\n    vec3 size_vector = vec3(SCALE_SIZE_X(size_current) - SCALE_SIZE_X(0.), SCALE_SIZE_Y(size_current) - SCALE_SIZE_Y(0.), SCALE_SIZE_Z(size_current) -  SCALE_SIZE_Z(0.));\n#ifdef USE_AUX\n    float aux_current = mix(aux_previous, aux_next, animation_time_aux);\n#endif\n    vec3 position_current_offset = mix(position_offset_previous, position_offset_next, animation_time);\n    vec3 model_pos = vec3(SCALE_X(position_current_offset.x), SCALE_Y(position_current_offset.y), SCALE_Z(position_current_offset.z));\n    // vec3 model_pos = vec3((position_current_offset.x), (position_current_offset.y), (position_current_offset.z));\n    SHADER_SNIPPET_SIZE;\n    //vec3 pos = (pos_object ) / size;// - 0.5;\n    #ifdef USE_SPRITE\n        // if we are a sprite, we add the position in view coordinates, and need to\n        vec4 view_pos = modelViewMatrix * vec4(model_pos, 1.0);\n        view_pos += vec4((position.xy)*(s*0.5),0,0);\n    #else\n        // the position is the orignal mesh position, so we scale and add that to the central location\n        // and we also rotate it into the direction of the vector v\n        vec4 position_transformed = geo_matrix * vec4(position, 1.0);\n        position_transformed.xyz = position_transformed.xyz / position_transformed.w;\n        // correct the aspect of the bounding box, so that glyphs are not transformed\n        position_transformed.xyz = position_transformed.xyz / aspect;\n        model_pos += move_to_vector * (position_transformed.xyz*size_vector);\n        vec4 view_pos = viewMatrix * vec4(model_pos, 1.0);\n    #endif\n#endif\n\n    // we repeat threejs's shader, up to begin_vertex\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n    #include <uv_vertex>\n    #include <uv2_vertex>\n    #include <color_vertex>\n\n    #include <beginnormal_vertex>\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n\n    #include <begin_vertex>\n#endif //defined( AS_DEFAULT ) || defined( AS_COORDINATE )\n#ifdef AS_LAMBERT\n    #include <uv_vertex>\n    #include <uv2_vertex>\n    #include <color_vertex>\n\n    #include <beginnormal_vertex>\n    objectNormal = move_to_vector * objectNormal;\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n\n    #include <begin_vertex>\n#endif //AS_LAMBERT\n#ifdef AS_PHONG\n    #include <uv_vertex>\n    #include <uv2_vertex>\n    #include <color_vertex>\n\n    #include <beginnormal_vertex>\n    objectNormal = move_to_vector * objectNormal;\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n\n    #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n        vNormal = normalize( transformedNormal );\n    #endif\n\n    #include <begin_vertex>\n#endif //AS_PHONG\n#ifdef AS_PHYSICAL\n    #include <uv_vertex>\n    #include <uv2_vertex>\n    #include <color_vertex>\n\n    #include <beginnormal_vertex>\n    objectNormal = move_to_vector * objectNormal;\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n\n    #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n        vNormal = normalize( transformedNormal );\n    #endif\n\n    #include <begin_vertex>\n#endif //AS_PHYSICAL\n#ifdef AS_DEPTH\n    #include <uv_vertex>\n\n    #include <skinbase_vertex>\n\n    #ifdef USE_DISPLACEMENTMAP\n\n        #include <beginnormal_vertex>\n        #include <morphnormal_vertex>\n        #include <skinnormal_vertex>\n\n    #endif\n\n    #include <begin_vertex>\n#endif //AS_DEPTH\n#ifdef AS_DISTANCE\n    #include <uv_vertex>\n\n    #include <skinbase_vertex>\n\n    #ifdef USE_DISPLACEMENTMAP\n\n        #include <beginnormal_vertex>\n        #include <morphnormal_vertex>\n        #include <skinnormal_vertex>\n\n    #endif\n\n    #include <begin_vertex>\n#endif //AS_DISTANCE\n\n    // after begin_vertex, we modify transformed\n    transformed = model_pos;\n\n    // mvPosition = view_pos;\n    gl_Position = projectionMatrix * view_pos;\n    // vec3 positionEye = ( modelViewMatrix * vec4( model_pos, 1.0 ) ).xyz;\n    // vertex_position = positionEye;\n    vertex_uv = position.xy / 2. - 0.5;\n#if defined( AS_COORDINATE )\n    vertex_color = vec4(model_pos + vec3(0.5, 0.5, 0.5), 1.0);\n#elif defined( AS_ID )\n    vertex_color = encodeId(instance_id + id_offset);\n#else\n    #ifdef USE_COLORMAP\n        float color_current = mix(color_previous, color_next, animation_time_color);\n        float color_index = scale_transform_linear(color_current, vec2(0.0, 1.0), domain_color);\n        vertex_color = texture2D(colormap, vec2(color_index, 0));\n    #else\n        vertex_color = mix(color_previous, color_next, animation_time_color);\n    #endif\n#endif\n    #if defined(USE_COLOR) && !(defined(AS_DEPTH) || defined(AS_DISTANCE))\n        vColor = vertex_color.rgb;\n    #endif\n\n\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n\n\n    #include <worldpos_vertex>\n    vec3 positionEye = ( modelViewMatrix * vec4(transformed, 1.0 ) ).xyz;\n    vertex_position = positionEye;\n    // vViewPosition = - mvPosition.xyz;\n    // #include <envmap_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>    \n#endif // defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n#ifdef AS_LAMBERT\n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n\n    #include <worldpos_vertex>\n    #include <envmap_vertex>\n    #include <lights_lambert_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n#endif //AS_LAMBERT\n#ifdef AS_PHONG\n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n\n    vViewPosition = - mvPosition.xyz;\n\n    #include <worldpos_vertex>\n    #include <envmap_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n#endif //AS_PHONG\n#ifdef AS_PHYSICAL\n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n\n    vViewPosition = - mvPosition.xyz;\n\n    #include <worldpos_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n#endif //AS_PHYSICAL\n#ifdef AS_DISTANCE\n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <worldpos_vertex>\n    #include <clipping_planes_vertex>\n\n    vWorldPosition = worldPosition.xyz;\n#endif //AS_DISTANCE\n#ifdef AS_DEPTH\n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n#endif //AS_DEPTH\n}\n"},function(e,t,n){"use strict";n.r(t),t.default="// scatter-fragment shader\nvarying vec4 vertex_color;\nvarying vec3 vertex_position;\nvarying vec2 vertex_uv;\n\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n    // extra only used for the default shading\n\n    #ifdef USE_TEXTURE\n        uniform sampler2D texture;\n        uniform sampler2D texture_previous;\n        uniform float animation_time_texture;\n    #endif\n    // end of extra only used for the default shading\n    // taken similar to phong shading\n    #include <common>\n    #include <packing>\n    #include <dithering_pars_fragment>\n    #include <color_pars_fragment>\n    #include <uv_pars_fragment>\n    #include <uv2_pars_fragment>\n    #include <map_pars_fragment>\n    #include <alphamap_pars_fragment>\n    #include <aomap_pars_fragment>\n    #include <lightmap_pars_fragment>\n    #include <emissivemap_pars_fragment>\n    #include <envmap_pars_fragment>\n    #include <gradientmap_pars_fragment>\n    #include <fog_pars_fragment>\n    #include <bsdfs>\n    #include <lights_pars_begin>\n    // #include <lights_phong_pars_fragment>\n    #include <shadowmap_pars_fragment>\n    #include <shadowmask_pars_fragment> // extra compared to phong\n\n    #include <bumpmap_pars_fragment>\n    #include <normalmap_pars_fragment>\n    #include <specularmap_pars_fragment>\n    #include <logdepthbuf_pars_fragment>\n    #include <clipping_planes_pars_fragment>\n\n\nvoid main(void)\n{\n    #if defined(AS_COORDINATE)\n        gl_FragColor = vertex_color;\n    #elif defined(AS_ID)\n        gl_FragColor = vertex_color;\n    #else //AS_COORDINATE\n        // 0 when in shadow, 1 if visible\n        #ifdef IS_LINE\n            gl_FragColor = vertex_color;\n        #else //IS_LINE\n            #ifdef USE_SPRITE\n                #ifdef USE_TEXTURE\n                    gl_FragColor = mix(texture2D(texture_previous, vertex_uv), texture2D(texture, vertex_uv), animation_time_texture);\n                #else\n                    gl_FragColor = vertex_color;\n                #endif //USE_TEXTURE\n            #else //USE_SPRITE\n                vec3 fdxmy = dFdx( vertex_position );\n                vec3 fdymy = dFdy( vertex_position );\n                vec3 normalmy = normalize( cross( fdxmy, fdymy ) );\n                float diffuse = dot( normalmy, vec3( 0.0, 0.0, 1.0 ) );\n\n                gl_FragColor = vec4(clamp(diffuse, 0.2, 1.) * vertex_color.rgb, vertex_color.a);\n            #endif//USE_SPRITE\n            float shadow_visibility = getShadowMask();\n            gl_FragColor.rgb *= shadow_visibility;\n        #endif //IS_LINE\n    #endif //AS_COORDINATE\n    #include <fog_fragment>\n}\n#endif //defined( AS_DEFAULT ) || defined( AS_COORDINATE )\n\n#ifdef AS_LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\nvarying vec3 vLightFront;\n\n#ifdef DOUBLE_SIDED\n\n\tvarying vec3 vLightBack;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\n\t#include <lightmap_fragment>\n\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\n\t#else\n\n\t\treflectedLight.directDiffuse = vLightFront;\n\n\t#endif\n\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n#endif //AS_LAMBERT\n#ifdef AS_PHONG\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n#endif //AS_PHONG\n#ifdef AS_PHYSICAL\n    #define PHYSICAL\n    uniform vec3 diffuse;\n    uniform vec3 emissive;\n    uniform float roughness;\n    uniform float metalness;\n    uniform float opacity;\n    uniform float emissiveIntensity;\n\n    #ifndef STANDARD\n        uniform float clearCoat;\n        uniform float clearCoatRoughness;\n    #endif\n\n    varying vec3 vViewPosition;\n\n    #ifndef FLAT_SHADED\n        varying vec3 vNormal;\n    #endif\n\n    #include <common>\n    #include <packing>\n    #include <dithering_pars_fragment>\n    #include <color_pars_fragment>\n    #include <uv_pars_fragment>\n    #include <uv2_pars_fragment>\n    #include <map_pars_fragment>\n    #include <alphamap_pars_fragment>\n    #include <aomap_pars_fragment>\n    #include <lightmap_pars_fragment>\n    #include <emissivemap_pars_fragment>\n    #include <bsdfs>\n    #include <cube_uv_reflection_fragment>\n    #include <envmap_pars_fragment>\n    #include <envmap_physical_pars_fragment>\n    #include <fog_pars_fragment>\n    #include <lights_pars_begin>\n    #include <lights_physical_pars_fragment>\n    #include <shadowmap_pars_fragment>\n    #include <bumpmap_pars_fragment>\n    #include <normalmap_pars_fragment>\n    #include <roughnessmap_pars_fragment>\n    #include <metalnessmap_pars_fragment>\n    #include <logdepthbuf_pars_fragment>\n    #include <clipping_planes_pars_fragment>\n\nvoid main(void)\n{\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0, 1.0, 1.0, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive * emissiveIntensity;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n#endif //AS_PHYSICAL\n#ifdef AS_DISTANCE\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main () {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist );\n\n}\n#endif//AS_DISTANCE\n\n#ifdef AS_DEPTH\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\n\t#endif\n\n}\n#endif //AS_DEPTH\n"},function(e,t,n){"use strict";function r(e,t,n){return[e[0]/t*2-1,1-e[1]/n*2]}Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(e){this.canvas=e,this.points=[]}mouseMove(e,t){this.points.push([e,t])}close(){this.canvas.getContext("2d").clearRect(0,0,this.canvas.width,this.canvas.height)}draw(){const e=this.canvas.getContext("2d");e.clearRect(0,0,this.canvas.width,this.canvas.height),e.lineWidth=1.5,e.strokeStyle="rgba(255, 0, 0, 1)",e.fillStyle="rgba(255, 0, 0, 0.5)",e.beginPath();for(const t of this.points)e.lineTo(t[0],t[1]);e.closePath(),e.fill(),e.stroke()}getData(e,t){return{type:"lasso",pixel:this.points,device:this.points.map(n=>r(n,e,t))}}}t.LassoSelector=i;class o{constructor(e){this.canvas=e,this.points=[],this.begin=null,this.end=null}mouseMove(e,t){this.begin?this.end=[e,t]:this.begin=[e,t]}close(){this.canvas.getContext("2d").clearRect(0,0,this.canvas.width,this.canvas.height),this.begin=null,this.end=null}draw(){if(this.begin&&this.end){const e=this.canvas.getContext("2d");e.clearRect(0,0,this.canvas.width,this.canvas.height),e.lineWidth=1.5,e.strokeStyle="rgba(255, 0, 0, 1)",e.fillStyle="rgba(255, 0, 0, 0.5)",e.beginPath();const t=this.begin[0]-this.end[0],n=this.begin[1]-this.end[1],r=Math.sqrt(t*t+n*n);e.arc(this.begin[0],this.begin[1],r,0,2*Math.PI),e.fill(),e.stroke()}}getData(e,t){return{type:"circle",pixel:{begin:this.begin,end:this.end},device:{begin:r(this.begin,e,t),end:r(this.end,e,t)}}}}t.CircleSelector=o;class a{constructor(e){this.canvas=e,this.points=[],this.begin=null,this.end=null}mouseMove(e,t){this.begin?this.end=[e,t]:this.begin=[e,t]}close(){this.canvas.getContext("2d").clearRect(0,0,this.canvas.width,this.canvas.height),this.begin=null,this.end=null}draw(){if(this.begin&&this.end){const e=this.canvas.getContext("2d");e.clearRect(0,0,this.canvas.width,this.canvas.height),e.lineWidth=1.5,e.strokeStyle="rgba(255, 0, 0, 1)",e.fillStyle="rgba(255, 0, 0, 0.5)",e.beginPath(),e.rect(this.begin[0],this.begin[1],this.end[0]-this.begin[0],this.end[1]-this.begin[1]),e.fill(),e.stroke()}}getData(e,t){return{type:"rectangle",pixel:{begin:this.begin,end:this.end},device:{begin:r(this.begin,e,t),end:r(this.end,e,t)}}}}t.RectangleSelector=a,t.selectors={lasso:i,circle:o,rectangle:a}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Transition=class{constructor(e,t,n,r=1){this.on_done=t,this.on_animation=e,this.animation_exponent=r,this.duration=n,this.time_start=(new Date).getTime(),this.cancelled=!1,this.called_on_done=!1}is_done(){return(new Date).getTime()-this.time_start>=this.duration||this.cancelled}cancel(){this.cancelled=!0}update(){if(this.cancelled)return;const e=((new Date).getTime()-this.time_start)/this.duration;let t=Math.min(1,e);t=Math.pow(t,this.animation_exponent),this.on_animation(t),e>=1&&!this.called_on_done&&(this.called_on_done=!0,this.on_done())}}},function(e,t,n){var r=n(48);"string"==typeof r&&(r=[[e.i,r,""]]);var i={transform:void 0};n(50)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(49)(!1)).push([e.i,"a.ipyvolume-toolicon  {\n    text-align: center;\n    padding: 2px 2px; /* Some top and bottom padding */\n    color: #1867c0;\n    position: relative;\n    display: inline-block;\n}\n\n.fa-inactive {\n    opacity: 0.3;\n}\n.fa-disabled {\n  opacity: 0.3;\n  cursor: not-allowed;\n}\n\n\n.ipyvolume-toolicon-inactive {\n    opacity: 0.3;\n}\n\n.ipyvolume-toolicon:hover .ipyvolume-toolicon-dropdown-container {\n\tdisplay: block;\n}\n.ipyvolume-toolicon-dropdown-container  {\n\tdisplay: none;\n\tposition: absolute;\n\tz-index: 10;\n\tmin-width: 200px;\n\tbackground-color: #999;\n\tbox-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n\tbackground-color: #f9f9f9;\n\tpadding-left: 2px;\n\tfont-family: Verdana, Geneva, Tahoma, sans-serif;\n\n}\n.ipyvolume-toolicon-dropdown  {\n\ttext-align: left;\n\tdisplay: block;\n}\n\n.ipyvolume-popup-container {\n\tposition: absolute;\n\tz-index: 3;\n\twhite-space: nowrap;\n}\n\n.ipyvolume-canvas-container {\n\tposition: relative;\n\tmargin: 5px; /* otherwise we get scrollbars */\n}\n\n/* the default is white */\n.ipyvolume-popup-container > .p-Widget > .vuetify-styles > .v-application {\n\tbackground-color: unset;\n}\n",""])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),o=r.sources.map((function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"}));return[n].concat(o).concat([i]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var a=e[i];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var r,i,o={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),s=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e.call(this,n)),t[n]}}((function(e){return document.querySelector(e)})),u=null,c=0,l=[],f=n(51);function h(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=o[r.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(g(r.parts[a],t))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(g(r.parts[a],t));o[r.id]={id:r.id,refs:1,parts:s}}}}function d(e,t){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],a=t.base?o[0]+t.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function _(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else{if("bottom"!==e.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(t)}}function p(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function m(e){var t=document.createElement("style");return e.attrs.type="text/css",v(t,e.attrs),_(e,t),t}function v(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function g(e,t){var n,r,i,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var a=c++;n=u||(u=m(t)),r=x.bind(null,n,a,!1),i=x.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",v(t,e.attrs),_(e,t),t}(t),r=E.bind(null,n,t),i=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=w.bind(null,n),i=function(){p(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return h(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var a=n[i];(s=o[a.id]).refs--,r.push(s)}e&&h(d(e,t),t);for(i=0;i<r.length;i++){var s;if(0===(s=r[i]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete o[s.id]}}}};var y,b=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function x(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=b(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function w(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function E(e,t,n){var r=n.css,i=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||o)&&(r=f(r)),i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var i,o=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(o)?e:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")}))}},function(e){e.exports=JSON.parse('{"demo":{"background-color":"white","box":{"color":"pink","visible":true},"axes":{"z":{"color":"#00f","ticklabel":{"color":"#0f0"},"label":{"color":"#f00"}},"ticklabel":{"color":"black"},"label":{"color":"black"},"x":{"color":"#f00","ticklabel":{"color":"#00f"},"label":{"color":"#0f0"}},"y":{"color":"#0f0","ticklabel":{"color":"#f00"},"label":{"color":"#00f"}},"color":"black","visible":true}},"dark":{"background-color":"black","box":{"visible":true},"axes":{"color":"white","ticklabel":{"color":"white"},"visible":true,"label":{"color":"white"}}},"light":{"background-color":"white","box":{"visible":true},"axes":{"color":"black","ticklabel":{"color":"black"},"visible":true,"label":{"color":"black"}}}}')},function(e,t){THREE.CombinedCamera=function(e,t,n,r,i,o,a){THREE.Camera.call(this),this.fov=n,this.far=i,this.near=r,this.left=-e/2,this.right=e/2,this.top=t/2,this.bottom=-t/2,this.aspect=e/t,this.zoom=1,this.view=null,this.cameraO=new THREE.OrthographicCamera(e/-2,e/2,t/2,t/-2,o,a),this.cameraP=new THREE.PerspectiveCamera(n,e/t,r,i),this.toPerspective()},THREE.CombinedCamera.prototype=Object.create(THREE.Camera.prototype),THREE.CombinedCamera.prototype.constructor=THREE.CombinedCamera,THREE.CombinedCamera.prototype.toPerspective=function(){this.near=this.cameraP.near,this.far=this.cameraP.far,this.cameraP.aspect=this.aspect,this.cameraP.fov=this.fov/this.zoom,this.cameraP.view=this.view,this.cameraP.updateProjectionMatrix(),this.projectionMatrix=this.cameraP.projectionMatrix,this.inPerspectiveMode=!0,this.inOrthographicMode=!1},THREE.CombinedCamera.prototype.toOrthographic=function(){var e=this.fov,t=this.cameraP.aspect,n=(this.cameraP.near+this.cameraP.far)/2,r=Math.tan(e*Math.PI/180/2)*n,i=r*t;r/=this.zoom,i/=this.zoom,this.cameraO.left=-i,this.cameraO.right=i,this.cameraO.top=r,this.cameraO.bottom=-r,this.cameraO.view=this.view,this.cameraO.updateProjectionMatrix(),this.near=this.cameraO.near,this.far=this.cameraO.far,this.projectionMatrix=this.cameraO.projectionMatrix,this.inPerspectiveMode=!1,this.inOrthographicMode=!0},THREE.CombinedCamera.prototype.copy=function(e){return THREE.Camera.prototype.copy.call(this,e),this.fov=e.fov,this.far=e.far,this.near=e.near,this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.zoom=e.zoom,this.view=null===e.view?null:Object.assign({},e.view),this.aspect=e.aspect,this.cameraO.copy(e.cameraO),this.cameraP.copy(e.cameraP),this.inOrthographicMode=e.inOrthographicMode,this.inPerspectiveMode=e.inPerspectiveMode,this},THREE.CombinedCamera.prototype.setViewOffset=function(e,t,n,r,i,o){this.view={fullWidth:e,fullHeight:t,offsetX:n,offsetY:r,width:i,height:o},this.inPerspectiveMode?(this.aspect=e/t,this.toPerspective()):this.toOrthographic()},THREE.CombinedCamera.prototype.clearViewOffset=function(){this.view=null,this.updateProjectionMatrix()},THREE.CombinedCamera.prototype.setSize=function(e,t){this.cameraP.aspect=e/t,this.left=-e/2,this.right=e/2,this.top=t/2,this.bottom=-t/2},THREE.CombinedCamera.prototype.setFov=function(e){this.fov=e,this.inPerspectiveMode?this.toPerspective():this.toOrthographic()},THREE.CombinedCamera.prototype.updateProjectionMatrix=function(){this.inPerspectiveMode?this.toPerspective():(this.toPerspective(),this.toOrthographic())},THREE.CombinedCamera.prototype.setLens=function(e,t){void 0===t&&(t=35);var n=.5*t/(e*Math.max(this.cameraP.aspect,1)),r=2*THREE.Math.RAD2DEG*Math.atan(n);return this.setFov(r),r},THREE.CombinedCamera.prototype.setZoom=function(e){this.zoom=e,this.inPerspectiveMode?this.toPerspective():this.toOrthographic()},THREE.CombinedCamera.prototype.toFrontView=function(){this.rotation.x=0,this.rotation.y=0,this.rotation.z=0},THREE.CombinedCamera.prototype.toBackView=function(){this.rotation.x=0,this.rotation.y=Math.PI,this.rotation.z=0},THREE.CombinedCamera.prototype.toLeftView=function(){this.rotation.x=0,this.rotation.y=-Math.PI/2,this.rotation.z=0},THREE.CombinedCamera.prototype.toRightView=function(){this.rotation.x=0,this.rotation.y=Math.PI/2,this.rotation.z=0},THREE.CombinedCamera.prototype.toTopView=function(){this.rotation.x=-Math.PI/2,this.rotation.y=0,this.rotation.z=0},THREE.CombinedCamera.prototype.toBottomView=function(){this.rotation.x=Math.PI/2,this.rotation.y=0,this.rotation.z=0}},function(e,t){THREE.DeviceOrientationControls=function(e){var t=this;this.object=e,this.object.rotation.reorder("YXZ"),this.enabled=!0,this.deviceOrientation={},this.screenOrientation=0,this.alpha=0,this.alphaOffsetAngle=0;var n,r,i,o,a=function(e){t.deviceOrientation=e},s=function(){t.screenOrientation=window.orientation||0},u=(n=new THREE.Vector3(0,0,1),r=new THREE.Euler,i=new THREE.Quaternion,o=new THREE.Quaternion(-Math.sqrt(.5),0,0,Math.sqrt(.5)),function(e,t,a,s,u){r.set(a,t,-s,"YXZ"),e.setFromEuler(r),e.multiply(o),e.multiply(i.setFromAxisAngle(n,-u))});this.connect=function(){s(),window.addEventListener("orientationchange",s,!1),window.addEventListener("deviceorientation",a,!1),t.enabled=!0},this.disconnect=function(){window.removeEventListener("orientationchange",s,!1),window.removeEventListener("deviceorientation",a,!1),t.enabled=!1},this.update=function(){if(!1!==t.enabled){var e=t.deviceOrientation.alpha?THREE.Math.degToRad(t.deviceOrientation.alpha)+this.alphaOffsetAngle:0,n=t.deviceOrientation.beta?THREE.Math.degToRad(t.deviceOrientation.beta):0,r=t.deviceOrientation.gamma?THREE.Math.degToRad(t.deviceOrientation.gamma):0,i=t.screenOrientation?THREE.Math.degToRad(t.screenOrientation):0;u(t.object.quaternion,e,n,r,i),this.alpha=e}},this.updateAlphaOffsetAngle=function(e){this.alphaOffsetAngle=e,this.update()},this.dispose=function(){this.disconnect()},this.connect()}},function(e,t){THREE.OrbitControls=function(e,t){var n,r,i,o,a;this.object=e,this.domElement=void 0!==t?t:document,this.enabled=!0,this.target=new THREE.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:THREE.MOUSE.LEFT,ZOOM:THREE.MOUSE.MIDDLE,PAN:THREE.MOUSE.RIGHT},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this.getPolarAngle=function(){return _.phi},this.getAzimuthalAngle=function(){return _.theta},this.reset=function(){s.target.copy(s.target0),s.object.position.copy(s.position0),s.object.zoom=s.zoom0,s.object.updateProjectionMatrix(),s.dispatchEvent(u),s.update(),h=f.NONE},this.update=(n=new THREE.Vector3,r=(new THREE.Quaternion).setFromUnitVectors(e.up,new THREE.Vector3(0,1,0)),i=r.clone().inverse(),o=new THREE.Vector3,a=new THREE.Quaternion,function(){var e=s.object.position;return n.copy(e).sub(s.target),n.applyQuaternion(r),_.setFromVector3(n),s.autoRotate&&h===f.NONE&&k(2*Math.PI/60/60*s.autoRotateSpeed),_.theta+=p.theta,_.phi+=p.phi,_.theta=Math.max(s.minAzimuthAngle,Math.min(s.maxAzimuthAngle,_.theta)),_.phi=Math.max(s.minPolarAngle,Math.min(s.maxPolarAngle,_.phi)),_.makeSafe(),_.radius*=m,_.radius=Math.max(s.minDistance,Math.min(s.maxDistance,_.radius)),s.target.add(v),n.setFromSpherical(_),n.applyQuaternion(i),e.copy(s.target).add(n),s.object.lookAt(s.target),!0===s.enableDamping?(p.theta*=1-s.dampingFactor,p.phi*=1-s.dampingFactor):p.set(0,0,0),m=1,v.set(0,0,0),!!(g||o.distanceToSquared(s.object.position)>d||8*(1-a.dot(s.object.quaternion))>d)&&(s.dispatchEvent(u),o.copy(s.object.position),a.copy(s.object.quaternion),g=!1,!0)}),this.dispose=function(){s.domElement.removeEventListener("contextmenu",Y,!1),s.domElement.removeEventListener("mousedown",D,!1),s.domElement.removeEventListener("wheel",F,!1),s.domElement.removeEventListener("touchstart",B,!1),s.domElement.removeEventListener("touchend",q,!1),s.domElement.removeEventListener("touchmove",V,!1),document.removeEventListener("mousemove",I,!1),document.removeEventListener("mouseup",U,!1),window.removeEventListener("keydown",H,!1)};var s=this,u={type:"change"},c={type:"start"},l={type:"end"},f={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY:4,TOUCH_PAN:5},h=f.NONE,d=1e-6,_=new THREE.Spherical,p=new THREE.Spherical,m=1,v=new THREE.Vector3,g=!1,y=new THREE.Vector2,b=new THREE.Vector2,x=new THREE.Vector2,w=new THREE.Vector2,E=new THREE.Vector2,A=new THREE.Vector2,M=new THREE.Vector2,S=new THREE.Vector2,T=new THREE.Vector2;function C(){return Math.pow(.95,s.zoomSpeed)}function k(e){p.theta-=e}function O(e){p.phi-=e}var L,j=(L=new THREE.Vector3,function(e,t){L.setFromMatrixColumn(t,0),L.multiplyScalar(-e),v.add(L)}),z=function(){var e=new THREE.Vector3;return function(t,n){e.setFromMatrixColumn(n,1),e.multiplyScalar(t),v.add(e)}}(),N=function(){var e=new THREE.Vector3;return function(t,n){var r=s.domElement===document?s.domElement.body:s.domElement;if(s.object instanceof THREE.PerspectiveCamera){var i=s.object.position;e.copy(i).sub(s.target);var o=e.length();o*=Math.tan(s.object.fov/2*Math.PI/180),j(2*t*o/r.clientHeight,s.object.matrix),z(2*n*o/r.clientHeight,s.object.matrix)}else s.object instanceof THREE.OrthographicCamera?(j(t*(s.object.right-s.object.left)/s.object.zoom/r.clientWidth,s.object.matrix),z(n*(s.object.top-s.object.bottom)/s.object.zoom/r.clientHeight,s.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),s.enablePan=!1)}}();function P(e){s.object instanceof THREE.PerspectiveCamera?m/=e:s.object instanceof THREE.OrthographicCamera?(s.object.zoom=Math.max(s.minZoom,Math.min(s.maxZoom,s.object.zoom*e)),s.object.updateProjectionMatrix(),g=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),s.enableZoom=!1)}function R(e){s.object instanceof THREE.PerspectiveCamera?m*=e:s.object instanceof THREE.OrthographicCamera?(s.object.zoom=Math.max(s.minZoom,Math.min(s.maxZoom,s.object.zoom/e)),s.object.updateProjectionMatrix(),g=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),s.enableZoom=!1)}function D(e){if(!1!==s.enabled){if(e.preventDefault(),e.button===s.mouseButtons.ORBIT){if(!1===s.enableRotate)return;!function(e){y.set(e.clientX,e.clientY)}(e),h=f.ROTATE}else if(e.button===s.mouseButtons.ZOOM){if(!1===s.enableZoom)return;!function(e){M.set(e.clientX,e.clientY)}(e),h=f.DOLLY}else if(e.button===s.mouseButtons.PAN){if(!1===s.enablePan)return;!function(e){w.set(e.clientX,e.clientY)}(e),h=f.PAN}h!==f.NONE&&(document.addEventListener("mousemove",I,!1),document.addEventListener("mouseup",U,!1),s.dispatchEvent(c))}}function I(e){if(!1!==s.enabled)if(e.preventDefault(),h===f.ROTATE){if(!1===s.enableRotate)return;!function(e){b.set(e.clientX,e.clientY),x.subVectors(b,y);var t=s.domElement===document?s.domElement.body:s.domElement;k(2*Math.PI*x.x/t.clientWidth*s.rotateSpeed),O(2*Math.PI*x.y/t.clientHeight*s.rotateSpeed),y.copy(b),s.update()}(e)}else if(h===f.DOLLY){if(!1===s.enableZoom)return;!function(e){S.set(e.clientX,e.clientY),T.subVectors(S,M),T.y>0?P(C()):T.y<0&&R(C()),M.copy(S),s.update()}(e)}else if(h===f.PAN){if(!1===s.enablePan)return;!function(e){E.set(e.clientX,e.clientY),A.subVectors(E,w),N(A.x,A.y),w.copy(E),s.update()}(e)}}function U(e){!1!==s.enabled&&(document.removeEventListener("mousemove",I,!1),document.removeEventListener("mouseup",U,!1),s.dispatchEvent(l),h=f.NONE)}function F(e){!1===s.enabled||!1===s.enableZoom||h!==f.NONE&&h!==f.ROTATE||(e.preventDefault(),e.stopPropagation(),function(e){e.deltaY<0?R(C()):e.deltaY>0&&P(C()),s.update()}(e),s.dispatchEvent(c),s.dispatchEvent(l))}function H(e){!1!==s.enabled&&!1!==s.enableKeys&&!1!==s.enablePan&&function(e){switch(e.keyCode){case s.keys.UP:N(0,s.keyPanSpeed),s.update();break;case s.keys.BOTTOM:N(0,-s.keyPanSpeed),s.update();break;case s.keys.LEFT:N(s.keyPanSpeed,0),s.update();break;case s.keys.RIGHT:N(-s.keyPanSpeed,0),s.update()}}(e)}function B(e){if(!1!==s.enabled){switch(e.touches.length){case 1:if(!1===s.enableRotate)return;!function(e){y.set(e.touches[0].pageX,e.touches[0].pageY)}(e),h=f.TOUCH_ROTATE;break;case 2:if(!1===s.enableZoom)return;!function(e){var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,r=Math.sqrt(t*t+n*n);M.set(0,r)}(e),h=f.TOUCH_DOLLY;break;case 3:if(!1===s.enablePan)return;!function(e){w.set(e.touches[0].pageX,e.touches[0].pageY)}(e),h=f.TOUCH_PAN;break;default:h=f.NONE}h!==f.NONE&&s.dispatchEvent(c)}}function V(e){if(!1!==s.enabled)switch(e.preventDefault(),e.stopPropagation(),e.touches.length){case 1:if(!1===s.enableRotate)return;if(h!==f.TOUCH_ROTATE)return;!function(e){b.set(e.touches[0].pageX,e.touches[0].pageY),x.subVectors(b,y);var t=s.domElement===document?s.domElement.body:s.domElement;k(2*Math.PI*x.x/t.clientWidth*s.rotateSpeed),O(2*Math.PI*x.y/t.clientHeight*s.rotateSpeed),y.copy(b),s.update()}(e);break;case 2:if(!1===s.enableZoom)return;if(h!==f.TOUCH_DOLLY)return;!function(e){var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,r=Math.sqrt(t*t+n*n);S.set(0,r),T.subVectors(S,M),T.y>0?R(C()):T.y<0&&P(C()),M.copy(S),s.update()}(e);break;case 3:if(!1===s.enablePan)return;if(h!==f.TOUCH_PAN)return;!function(e){E.set(e.touches[0].pageX,e.touches[0].pageY),A.subVectors(E,w),N(A.x,A.y),w.copy(E),s.update()}(e);break;default:h=f.NONE}}function q(e){!1!==s.enabled&&(s.dispatchEvent(l),h=f.NONE)}function Y(e){e.preventDefault()}s.domElement.addEventListener("contextmenu",Y,!1),s.domElement.addEventListener("mousedown",D,!1),s.domElement.addEventListener("wheel",F,!1),s.domElement.addEventListener("touchstart",B,!1),s.domElement.addEventListener("touchend",q,!1),s.domElement.addEventListener("touchmove",V,!1),window.addEventListener("keydown",H,!1),this.update()},THREE.OrbitControls.prototype=Object.create(THREE.EventDispatcher.prototype),THREE.OrbitControls.prototype.constructor=THREE.OrbitControls,Object.defineProperties(THREE.OrbitControls.prototype,{center:{get:function(){return console.warn("THREE.OrbitControls: .center has been renamed to .target"),this.target}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(e){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!e}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(e){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!e}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(e){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!e}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(e){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.enableDamping},set:function(e){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor},set:function(e){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor=e}}})},function(e,t){THREE.StereoEffect=function(e){var t=new THREE.StereoCamera;t.aspect=.5,this.setEyeSeparation=function(e){t.eyeSep=e},this.setSize=function(t,n){e.setSize(t,n)},this.render=function(n,r){n.updateMatrixWorld(),null===r.parent&&r.updateMatrixWorld(),t.update(r);var i=e.getSize();e.autoClear&&e.clear(),e.setScissorTest(!0),e.setScissor(0,0,i.width/2,i.height),e.setViewport(0,0,i.width/2,i.height),e.render(n,t.cameraL),e.setScissor(i.width/2,0,i.width/2,i.height),e.setViewport(i.width/2,0,i.width/2,i.height),e.render(n,t.cameraR),e.setScissorTest(!1)}}},function(e,t){var n=n||{};window.THREEx=n,n.FullScreen=n.FullScreen||{},n.FullScreen.available=function(){return this._hasWebkitFullScreen||this._hasMozFullScreen},n.FullScreen.activated=function(){return this._hasWebkitFullScreen?document.webkitIsFullScreen:this._hasMozFullScreen?document.mozFullScreen:void console.assert(!1)},n.FullScreen.request=function(e){e=e||document.body,this._hasWebkitFullScreen?e.webkitRequestFullScreen():this._hasMozFullScreen?e.mozRequestFullScreen():console.assert(!1)},n.FullScreen.cancel=function(){this._hasWebkitFullScreen?document.webkitCancelFullScreen():this._hasMozFullScreen?document.mozCancelFullScreen():console.assert(!1)},n.FullScreen.element=function(){return document.fullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement},n.FullScreen.addFullScreenChangeListener=function(e){document.addEventListener("webkitfullscreenchange",e,!1),document.addEventListener("mozfullscreenchange",e,!1),document.addEventListener("fullscreenchange",e,!1),document.addEventListener("MSFullscreenChange",e,!1)},n.FullScreen.removeFullScreenChangeListener=function(e){document.removeEventListener("webkitfullscreenchange",e,!1),document.removeEventListener("mozfullscreenchange",e,!1),document.removeEventListener("fullscreenchange",e,!1),document.removeEventListener("MSFullscreenChange",e,!1)},n.FullScreen._hasWebkitFullScreen="webkitCancelFullScreen"in document,n.FullScreen._hasMozFullScreen="mozCancelFullScreen"in document},function(e,t){THREE.TrackballControls=function(e,t){var n=this,r={NONE:-1,ROTATE:0,ZOOM:1,PAN:2,TOUCH_ROTATE:3,TOUCH_ZOOM_PAN:4};this.object=e,this.domElement=void 0!==t?t:document,this.enabled=!0,this.screen={left:0,top:0,width:0,height:0},this.rotateSpeed=1,this.zoomSpeed=1.2,this.panSpeed=.3,this.noRotate=!1,this.noZoom=!1,this.noPan=!1,this.staticMoving=!1,this.dynamicDampingFactor=.2,this.minDistance=0,this.maxDistance=1/0,this.keys=[65,83,68],this.target=new THREE.Vector3;var i=new THREE.Vector3,o=r.NONE,a=r.NONE,s=new THREE.Vector3,u=new THREE.Vector2,c=new THREE.Vector2,l=new THREE.Vector3,f=0,h=new THREE.Vector2,d=new THREE.Vector2,_=0,p=0,m=new THREE.Vector2,v=new THREE.Vector2;this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.up0=this.object.up.clone();var g={type:"change"},y={type:"start"},b={type:"end"};this.handleResize=function(){if(this.domElement===document)this.screen.left=0,this.screen.top=0,this.screen.width=window.innerWidth,this.screen.height=window.innerHeight;else{var e=this.domElement.getBoundingClientRect(),t=this.domElement.ownerDocument.documentElement;this.screen.left=e.left+window.pageXOffset-t.clientLeft,this.screen.top=e.top+window.pageYOffset-t.clientTop,this.screen.width=e.width,this.screen.height=e.height}},this.handleEvent=function(e){"function"==typeof this[e.type]&&this[e.type](e)};var x,w,E,A,M,S,T,C,k,O,L,j=(x=new THREE.Vector2,function(e,t){var r=n.domElement===document?n.domElement.body:n.domElement;return x.set(e/r.clientWidth,t/r.clientHeight),x}),z=function(){new THREE.Vector2;return function(e,t){return j(2*e*Math.PI,2*-t*Math.PI)}}();function N(e){!1!==n.enabled&&(window.removeEventListener("keydown",N),a=o,o===r.NONE&&(e.keyCode!==n.keys[r.ROTATE]||n.noRotate?e.keyCode!==n.keys[r.ZOOM]||n.noZoom?e.keyCode!==n.keys[r.PAN]||n.noPan||(o=r.PAN):o=r.ZOOM:o=r.ROTATE))}function P(e){!1!==n.enabled&&(o=a,window.addEventListener("keydown",N,!1))}function R(e){!1!==n.enabled&&(e.preventDefault(),e.stopPropagation(),o===r.NONE&&(o=e.button),o!==r.ROTATE||n.noRotate?o!==r.ZOOM||n.noZoom?o!==r.PAN||n.noPan||(m.copy(j(e.pageX,e.pageY)),v.copy(m)):(h.copy(j(e.pageX,e.pageY)),d.copy(h)):(c.copy(z(e.pageX,e.pageY)),u.copy(c)),document.addEventListener("mousemove",D,!1),document.addEventListener("mouseup",I,!1),n.dispatchEvent(y))}function D(e){!1!==n.enabled&&(e.preventDefault(),e.stopPropagation(),o!==r.ROTATE||n.noRotate?o!==r.ZOOM||n.noZoom?o!==r.PAN||n.noPan||v.copy(j(e.pageX,e.pageY)):d.copy(j(e.pageX,e.pageY)):(u.copy(c),c.copy(z(e.pageX,e.pageY))),n.update())}function I(e){!1!==n.enabled&&(e.preventDefault(),e.stopPropagation(),o=r.NONE,document.removeEventListener("mousemove",D),document.removeEventListener("mouseup",I),n.dispatchEvent(b))}function U(e){if(!1!==n.enabled){switch(e.preventDefault(),e.stopPropagation(),e.deltaMode){case 2:h.y-=.025*e.deltaY;break;case 1:h.y-=.01*e.deltaY;break;default:h.y-=25e-5*e.deltaY}n.dispatchEvent(y),n.dispatchEvent(b),n.update()}}function F(e){if(!1!==n.enabled){switch(e.touches.length){case 1:o=r.TOUCH_ROTATE,c.copy(z(e.touches[0].pageX,e.touches[0].pageY)),u.copy(c);break;default:o=r.TOUCH_ZOOM_PAN;var t=e.touches[0].pageX-e.touches[1].pageX,i=e.touches[0].pageY-e.touches[1].pageY;p=_=Math.sqrt(t*t+i*i);var a=(e.touches[0].pageX+e.touches[1].pageX)/2,s=(e.touches[0].pageY+e.touches[1].pageY)/2;m.copy(j(a,s)),v.copy(m)}n.dispatchEvent(y)}}function H(e){if(!1!==n.enabled){switch(e.preventDefault(),e.stopPropagation(),e.touches.length){case 1:u.copy(c),c.copy(z(e.touches[0].pageX,e.touches[0].pageY));break;default:var t=e.touches[0].pageX-e.touches[1].pageX,r=e.touches[0].pageY-e.touches[1].pageY;p=Math.sqrt(t*t+r*r);var i=(e.touches[0].pageX+e.touches[1].pageX)/2,o=(e.touches[0].pageY+e.touches[1].pageY)/2;v.copy(j(i,o))}n.update()}}function B(e){if(!1!==n.enabled){switch(e.touches.length){case 0:o=r.NONE;break;case 1:o=r.TOUCH_ROTATE,c.copy(z(e.touches[0].pageX,e.touches[0].pageY)),u.copy(c)}n.dispatchEvent(b),n.update()}}function V(e){e.preventDefault()}this.rotateCamera=(E=new THREE.Vector3,A=new THREE.Quaternion,M=new THREE.Vector3,S=new THREE.Vector3,T=new THREE.Vector3,C=new THREE.Vector3,function(){C.set(c.x-u.x,c.y-u.y,0),(w=C.length())?(s.copy(n.object.position).sub(n.target),M.copy(s).normalize(),S.copy(n.object.up).normalize(),T.crossVectors(S,M).normalize(),S.setLength(c.y-u.y),T.setLength(c.x-u.x),C.copy(S.add(T)),E.crossVectors(C,s).normalize(),w*=n.rotateSpeed,A.setFromAxisAngle(E,w),s.applyQuaternion(A),n.object.up.applyQuaternion(A),l.copy(E),f=w):!n.staticMoving&&f&&(f*=Math.sqrt(1-n.dynamicDampingFactor),s.copy(n.object.position).sub(n.target),A.setFromAxisAngle(l,f),s.applyQuaternion(A),n.object.up.applyQuaternion(A)),u.copy(c)}),this.zoomCamera=function(){var e;o===r.TOUCH_ZOOM_PAN?(e=_/p,_=p,s.multiplyScalar(e)):(1!==(e=1+(d.y-h.y)*n.zoomSpeed)&&e>0&&s.multiplyScalar(e),n.staticMoving?h.copy(d):h.y+=(d.y-h.y)*this.dynamicDampingFactor)},this.panCamera=(k=new THREE.Vector2,O=new THREE.Vector3,L=new THREE.Vector3,function(){k.copy(v).sub(m),k.lengthSq()&&(k.multiplyScalar(s.length()*n.panSpeed),L.copy(s).cross(n.object.up).setLength(k.x),L.add(O.copy(n.object.up).setLength(k.y)),n.object.position.add(L),n.target.add(L),n.staticMoving?m.copy(v):m.add(k.subVectors(v,m).multiplyScalar(n.dynamicDampingFactor)))}),this.checkDistances=function(){n.noZoom&&n.noPan||(s.lengthSq()>n.maxDistance*n.maxDistance&&(n.object.position.addVectors(n.target,s.setLength(n.maxDistance)),h.copy(d)),s.lengthSq()<n.minDistance*n.minDistance&&(n.object.position.addVectors(n.target,s.setLength(n.minDistance)),h.copy(d)))},this.update=function(){s.subVectors(n.object.position,n.target),n.noRotate||n.rotateCamera(),n.noZoom||n.zoomCamera(),n.noPan||n.panCamera(),n.object.position.addVectors(n.target,s),n.checkDistances(),n.object.lookAt(n.target),i.distanceToSquared(n.object.position)>1e-6&&(n.dispatchEvent(g),i.copy(n.object.position))},this.reset=function(){o=r.NONE,a=r.NONE,n.target.copy(n.target0),n.object.position.copy(n.position0),n.object.up.copy(n.up0),s.subVectors(n.object.position,n.target),n.object.lookAt(n.target),i.copy(n.object.position)},this.dispose=function(){this.domElement.removeEventListener("contextmenu",V,!1),this.domElement.removeEventListener("mousedown",R,!1),this.domElement.removeEventListener("wheel",U,!1),this.domElement.removeEventListener("touchstart",F,!1),this.domElement.removeEventListener("touchend",B,!1),this.domElement.removeEventListener("touchmove",H,!1),document.removeEventListener("mousemove",D,!1),document.removeEventListener("mouseup",I,!1),window.removeEventListener("keydown",N,!1),window.removeEventListener("keyup",P,!1)},this.domElement.addEventListener("contextmenu",V,!1),this.domElement.addEventListener("mousedown",R,!1),this.domElement.addEventListener("wheel",U,!1),this.domElement.addEventListener("touchstart",F,!1),this.domElement.addEventListener("touchend",B,!1),this.domElement.addEventListener("touchmove",H,!1),window.addEventListener("keydown",N,!1),window.addEventListener("keyup",P,!1),this.handleResize(),this.update()},THREE.TrackballControls.prototype=Object.create(THREE.EventDispatcher.prototype),THREE.TrackballControls.prototype.constructor=THREE.TrackballControls},function(e,t,n){"use strict";n.r(t),t.default="varying  vec2 tex_uv;\n\n#if defined(PANORAMA_360) || defined(PANORAMA_180)\nuniform samplerCube tex;\n#else\nuniform sampler2D tex;\n#endif\n\n\nvoid main(void) {\n\tconst float PI = 3.141592653589793238462643383;\n#if defined(PANORAMA_360)\n\tfloat phi   = (1.-tex_uv.x)* PI * 2.0;\n\tfloat theta = (1.-tex_uv.y) * PI;\n    vec3 uvw = vec3(sin(phi) * sin(theta),\n                               cos(theta),\n                    cos(phi) * sin(theta)\n                    );\n    gl_FragColor = textureCube(tex, uvw);\n#elif defined(PANORAMA_180)\n\tfloat x = (tex_uv.x-0.5)*2.;\n\tfloat y = (tex_uv.y-0.5)*2.;\n\tfloat r = sqrt(x*x + y*y);\n\tif(r > 1.)\n\t\tdiscard;\n\tfloat theta = r * PI/2.;\n\tfloat phi = atan(y, x);\n\tvec3 uvw = vec3(cos(phi) * sin(theta),\n\t\t\t\t\tsin(phi) * sin(theta),\n\t\t\t\t\t          -cos(theta));\n    gl_FragColor = textureCube(tex, uvw);\n#else\n    gl_FragColor = texture2D(tex, tex_uv);\n#endif\n}\n"},function(e,t,n){"use strict";n.r(t),t.default="varying vec2 tex_uv;\n\nvoid main(void) {\n    gl_Position = projectionMatrix *\n                modelViewMatrix *\n                vec4(position,1.0);\n    tex_uv = vec2(position.x+0.5, position.y+0.5);\n}\n"},function(e,t,n){"use strict";n.r(t),t.default="precision highp float;\n#include <common>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n\nuniform mat3 normalMatrix;\n\nuniform sampler2D back_tex;\nuniform sampler2D geometry_depth_tex;\n\n\n#include <ipyvolume>\n\n// samplers in structs has bad support, so we put it here\n#if (VOLUME_COUNT > 0)\nuniform sampler2D data[VOLUME_COUNT];\nuniform sampler2D transfer_function[VOLUME_COUNT];\nuniform Volume volumes[VOLUME_COUNT];\n#endif\n\n#if (VOLUME_COUNT_MAX_INT > 0)\nuniform Volume volumes_max_int[VOLUME_COUNT_MAX_INT];\nuniform sampler2D data_max_int[VOLUME_COUNT_MAX_INT];\nuniform sampler2D transfer_function_max_int[VOLUME_COUNT_MAX_INT];\nfloat max_values[VOLUME_COUNT_MAX_INT];\nfloat max_depth[VOLUME_COUNT_MAX_INT];\nbool  has_values[VOLUME_COUNT_MAX_INT];\n// for MAX_INT, we cannot add the coordinate directly, we do it after we found the max\nvec4  max_weighted_coordinate[VOLUME_COUNT_MAX_INT];\nvec4  max_colors[VOLUME_COUNT_MAX_INT];\n#endif\n\nstruct Layer {\n    float depth;\n    vec4 color;\n    bool skip;\n};\n\nLayer layers[VOLUME_COUNT_MAX_INT+1];\n\n\n//uniform float brightness;\n\n//uniform sampler2D colormap;\n//uniform int colormap_index;\n//uniform int surfaces;\n//uniform float opacity[4];\n//uniform float level[4];\n//uniform float width[4];\nuniform vec2 render_size;\n\nvarying vec3 front;\n\n// for lighting\nuniform mat3 mvMatrix;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvec3 light_dir;\nvec3 eye;\n//uniform float color_index;\n\nuniform int steps;\n\n\nuniform float ambient_coefficient;\nuniform float diffuse_coefficient;\nuniform float specular_coefficient;\nuniform float specular_exponent;\n\nmat3 transpose3(mat3 m) {\n    vec3 v0 = m[0];\n    vec3 v1 = m[1];\n    vec3 v2 = m[2];\n    return mat3(\n        vec3(v0.x, v1.x, v2.x),\n        vec3(v0.y, v1.y, v2.y),\n        vec3(v0.z, v1.z, v2.z)\n        );\n}\n\nvec2 sample(sampler2D data, Volume volume, vec3 ray_pos, inout vec3 normal) {\n    vec3 pos_relative = (ray_pos+volume.offset)*volume.scale;\n    if(any(lessThan(pos_relative, vec3(0.))) || any(greaterThan(pos_relative, vec3(1.))))\n        return vec2(0.0);\n    vec4 sample = sample_as_3d_texture(data, volume.size, pos_relative, volume.slice_size, volume.slices, volume.rows, volume.columns);\n    normal = (-sample.xyz)*2.+1.;\n    // this seems to match observations, not fully sure why x and z are flipped.\n    normal.xyz = normal.zyx;\n\n    float raw_data_value = sample.a; //(sample.a - data_min) * data_scale;\n    float scaled_data_value = (raw_data_value*(volume.data_range[1] - volume.data_range[0])) + volume.data_range[0];\n    float data_value = (scaled_data_value - volume.show_range[0])/(volume.show_range[1] - volume.show_range[0]);\n    // TODO: how do we deal with this with multivolume rendering\n    // if(((data_value < 0.) && !volume.clamp_min) || ((data_value > 1.) && !volume.clamp_max)) {\n    //     ray_pos += ray_delta;\n    //     continue;\n    // }\n    data_value = clamp(data_value, 0., 1.);\n    return vec2(data_value, 1);\n}\n\nvec4 apply_lighting(vec4 color, vec3 objectNormal, vec3 position, Volume volume) {\n    // only do phong lighting when we have lights\n    #if ( NUM_POINT_LIGHTS > 0 ) || ( NUM_SPOT_LIGHTS > 0 ) || ( NUM_DIR_LIGHTS > 0 ) || ( NUM_RECT_AREA_LIGHTS > 0 ) || ( NUM_HEMI_LIGHTS > 0 )\n        vec3 normal = normalize(normalMatrix * objectNormal);\n        vec3 vViewPosition = position;\n        vec3 emissive = volume.emissive;\n\n\n        // this is quite similar to meshphong_frag.glsl\n        vec4 diffuseColor = color;\n        ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n        vec3 totalEmissiveRadiance = emissive;\n\n\n        // the replacement for: #include <lights_phong_fragment>\n        BlinnPhongMaterial material;\n        material.diffuseColor = diffuseColor.rgb;\n        material.specularColor = volume.specular;\n        material.specularShininess = volume.shininess;\n        material.specularStrength = 1.0;\n\n        #include <lights_fragment_begin>\n        // we don't support light maps\n        // #include <lights_fragment_maps>\n        // no need to include this for Phong, but more consistent with mesh_phong_frag.glsl\n        #include <lights_fragment_end>\n\n        // modulation (not supported)\n        #include <aomap_fragment>\n\n        vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n        // also not supported\n        // #include <envmap_fragment>\n\n        vec4 result = vec4( outgoingLight, diffuseColor.a );\n    #else\n        vec4 result = color;\n    #endif\n\n    return result;\n}\n\nvec4 add_sample(sampler2D data, sampler2D transfer_function, Volume volume, vec3 ray_pos, vec4 color_in) {\n    vec4 color;\n    vec3 pos_relative = (ray_pos+volume.offset)*volume.scale;\n    /*vec4 sample_x = sample_as_3d_texture(volume, size, pos + vec3(delta, 0, 0), slice_size, slices, rows, columns);\n    vec4 sample_y = sample_as_3d_texture(volume, size, pos + vec3(0, delta, 0), slice_size, slices, rows, columns);\n    vec4 sample_z = sample_as_3d_texture(volume, size, pos + vec3(0, 0, delta), slice_size, slices, rows, columns);\n\n    vec3 normal = normalize(vec3((sample_x[0]-sample[0])/delta, (sample_y[0]-sample[0])/delta, (sample_z[0]-sample[0])/delta));\n    normal = -vec3(normal.x, normal.y, normal.z);\n    float cosangle_light = max((dot(light_dir, normal)), 0.);\n    float cosangle_eye = max((dot(eye, normal)), 0.);*/\n\n    vec3 normal;\n    vec2 sample = sample(data, volume, ray_pos, normal);\n    float data_value = sample[0];\n    if(sample[1] == 0.0)\n        return color_in;\n    if(((data_value < 0.) && !volume.clamp_min) || ((data_value > 1.) && !volume.clamp_max))\n        return color_in;\n\n    vec4 color_sample = texture2D(transfer_function, vec2(data_value, 0.5));\n    if(volume.lighting) {\n        color_sample = apply_lighting(color_sample, normal, ray_pos, volume);\n    }\n\n    // float intensity = color_sample.a;\n    //float alpha_sample = intensity * sign(data_value) * sign(1.-data_value) * 100. / float(steps) * ray_length;//clamp(1.-chisq, 0., 1.) * 0.5;//1./128.* length(color_sample) * 100.;\n    // float alpha_sample = intensity * 100. / float(steps);//clamp(1.-chisq, 0., 1.) * 0.5;//1./128.* length(color_sample) * 100.;\n    // alpha_sample = clamp(alpha_sample * volume.opacity_scale, 0., 1.);\n\n    //float intensity = texture2D(transfer_function, vec2(data_value, 0.5)).a;\n    //color_sample = texture2D(transfer_function, data_value);\n    //vec4 color_sample = texture2D(colormap, vec2(sample.a, colormap_index_scaled));\n    //color_sample = texture2D(volume, ray_pos.yz);\n    //float alpha_sample = opacity*intensity;//1./128.* length(color_sample) * 100.;\n    // float alpha_total = color_in.a + alpha_sample;\n    // color.rgb = color_in.rgb + (1.0 - alpha_total) * color_sample.rgb * alpha_sample;\n    // color.a = alpha_total;\n    vec4 dst = color_in;\n    vec4 src = color_sample;\n    src.a *= clamp(100./float(steps) * volume.opacity_scale, 0.0, 1.0);\n    #ifdef COORDINATE\n        color.a   = src.a  + dst.a;\n        color.rgb = dst.xyz + ray_pos * src.a;\n    #else\n        color.rgb = (1.0-dst.a) * src.rgb * src.a * volume.brightness + dst.rgb;\n        color.a   = src.a  + dst.a;\n    #endif\n    return color;\n}\n\nvec4 blend_pre_multiplied(vec4 dst, vec4 src) {\n    return dst * (1.0-src.a) + src;\n}\n\nconst int MAX_STEPS = 1000;\nvec2 pixel;\n\nvec4 cast_ray(vec3 ray_begin, vec3 ray_end, vec4 color) {\n    vec3 ray_direction = ray_end - ray_begin;\n    vec3 ray_delta = normalize(ray_direction) * (1./float(steps));\n    vec3 ray_pos = ray_begin;\n\n    float ray_length = length(ray_direction);\n    float ray_length_delta = length(ray_delta);\n    float ray_length_traveled = 0.;\n\n    vec2 pixel = vec2(gl_FragCoord.x, gl_FragCoord.y) / render_size;\n    vec4 voxel_view_space_coord;\n    float voxel_frag_depth;\n    vec4 geometry_depth;\n\n    for(int i = 0; i < MAX_STEPS; i++) {\n        geometry_depth = texture2D(geometry_depth_tex, pixel); \n        voxel_view_space_coord = projectionMatrix * modelViewMatrix * vec4(ray_pos+vec3(-0.5, -0.5, -0.5),1.0);\n        voxel_frag_depth = ((voxel_view_space_coord.z / voxel_view_space_coord.w)+1.0)/2.0;\n        if(geometry_depth.x > 0.0 && voxel_frag_depth > geometry_depth.x){\n            break;\n        }\n\n        {{#volumes}}\n            color = add_sample(data[{{.}}], transfer_function[{{.}}], volumes[{{.}}], ray_pos, color);\n        {{/volumes}}\n        if(color.a >= 1.)\n            break;\n        ray_pos += ray_delta;\n        ray_length_traveled += ray_length_delta;\n        if(ray_length_traveled >= ray_length)\n            break;\n    }\n    return color;\n}\n\nvoid cast_ray_max(vec3 ray_begin, vec3 ray_end);\n\nvoid main(void) {\n#ifdef METHOD_MAX_INTENSITY\n    float max_value = 0.;\n    float max_cosangle_light = 0.;\n    float max_cosangle_eye = 0.;\n#endif\n\n\n    pixel = vec2(gl_FragCoord.x, gl_FragCoord.y) / render_size;\n    vec4 color = vec4(0, 0, 0, 0);\n    // float color_index;\n\n    //mat3 rotation = mat3(mvMatrix);\n    mat3 rotation = (mat3(viewMatrix));\n    light_dir = normalize(vec3(-1,-1,1) * rotation);\n    eye = vec3(0, 0, 1) * rotation;\n\n    float delta = 1.0/256./2.;\n\n#ifdef COORDINATE\n    // contains the weighted coordinate, where the last component is the weight\n    // diving by w gives it the average value\n    vec4 weighted_coordinate = vec4(0., 0., 0., 0.);\n#endif \n    vec3 ray_begin = front;\n    vec3 ray_end = texture2D(back_tex, pixel).rgb;\n    vec3 ray_begin0 = ray_begin;\n    vec3 ray_end0 = ray_end;\n    cast_ray_max(ray_begin, ray_end);\n    #if (VOLUME_COUNT_MAX_INT > 1)\n        // TODO: horrible sort, fix!!\n        for(int i = 0; i < VOLUME_COUNT_MAX_INT-1; i++) {\n            for(int j = 1; j < VOLUME_COUNT_MAX_INT; j++) {\n                if(has_values[i] && has_values[j] && (i < j)) {\n                    if(max_depth[j] < max_depth[i]) {\n                        float depth = max_depth[i];\n                        max_depth[i] = max_depth[j];\n                        max_depth[j] = depth;\n                        vec4 color = max_colors[i];\n                        max_colors[i] = max_colors[j];\n                        max_colors[j] = color;\n                    }\n                }\n            }\n        }\n    #endif\n    #if (VOLUME_COUNT_MAX_INT > 0)\n        for(int i = 0; i < VOLUME_COUNT_MAX_INT; i++) {\n            layers[i].depth = 0.0;\n            layers[i].color = vec4(0.0);\n            if(has_values[i]) {\n                layers[i].depth = max_depth[i];\n                layers[i].color = max_colors[i];\n            }\n        }\n    #endif\n    // last layer is the absolute end of the volume, its color is fully transparant\n    layers[VOLUME_COUNT_MAX_INT].depth = 1.0;\n    layers[VOLUME_COUNT_MAX_INT].color = vec4(0.0);\n    float depth = -100.0;\n    ray_begin = ray_begin0;\n    for(int i = 0; i < VOLUME_COUNT_MAX_INT+1; i++) {\n        // TODO: debug this, it seems that > makes more sense, but gives artifacts in the situation of\n        // having 2 max int volr, 1 normal, the 2nd will have holes when it's the only volume in the los.\n        if(layers[i].depth >= depth)\n        {\n            ray_end = ray_begin0 + (ray_end0 - ray_begin0) * layers[i].depth;\n            color = cast_ray(ray_begin, ray_end, color);\n            #ifdef COORDINATE\n                // color += layers[i].color;\n                color = blend_pre_multiplied(layers[i].color, color);\n            #else\n                color = blend_pre_multiplied(layers[i].color, color);\n            #endif\n            ray_begin = ray_end;\n            depth = layers[i].depth;\n        }\n    }\n\n    #ifdef COORDINATE\n        vec3 average_coordinate = color.xyz/color.a;\n        gl_FragColor = vec4(average_coordinate, color.a);\n    #else\n        gl_FragColor = color;\n    #endif\n    // code below is used for debugging purposes\n    // float x = floor((pixel.x *500. / 10.));\n    // float y = floor((pixel.y *500. / 10.));\n    // // gl_FragColor = vec4(x / 10., 0.0, 0.0, 1.0);\n    // // gl_FragColor = vec4(y / 10., 0.0, 0.0, 1.0);\n    // vec2 result;\n    // float eps = 1. - 1e-4;\n    // float modulo = mod(x, y * eps);\n    // float offset = x - modulo * y;\n    // offset = floor(x / y);\n    // gl_FragColor = vec4(mod(x, x) > 0. ? 1.0 : 0., 0.0, 0.0, 1.0);\n    // gl_FragColor = vec4(modulo >= x ? 1.0 : 0., 0.0, 0.0, 1.0);\n    // gl_FragColor = vec4(offset >= 0.5 ? 1.0 : 0., 0.0, 0.0, 1.0);\n    // gl_FragColor = vec4(offset/x, 0.0, 0.0, 1.0);\n    // eps = 0.;\n    // gl_FragColor = vec4(float(int(x / (y - eps))) / 1., 0.0, 0.0, 1.0);\n    // gl_FragColor = vec4(texture2D(data[0], pixel).a * 140., 0., 0., 1.0);\n    // gl_FragColor = vec4(ray_begin.xyz, 1.);\n    // gl_FragColor = vec4(ray_begin.xyz, 0.1) * brightness;\n    //gl_FragColor = vec4(rotation[0], 1) * brightness;\n    // gl_FragColor = vec4(alpha_total, 0., 0., 1.);\n    //gl_FragColor = texture2D(volume, vec2(ray_begin.x, ray_begin.y));\n    // gl_FragColor = vec4(ray_begin.x, ray_begin.y, ray_begin.z, 1.);\n    // gl_FragColor = texture2D(transfer_function, vec2(pixel.x, 0.5));\n    //gl_FragColor = vec4(texture2D(volume, vec2(pixel.x, pixel.y)).rgb, 1.0);\n    // gl_FragColor = vec4(pixel.x, pixel.y, 0, 1);\n    // gl_FragColor = vec4(ray_end, 1.);\n    // gl_FragColor = vec4(ray_begin, 1);\n    //float tintensity = texture2D(transfer_function, vec2(pixel.x / 1., 0.5)).a;\n    //gl_FragColor = vec4(0, tintensity, 0., 1.);\n    //gl_FragColor = vec4(ray_e, 1);\n}\n\n\n\n\nvoid cast_ray_max(vec3 ray_begin, vec3 ray_end) {\n    vec3 ray_direction = ray_end - ray_begin;\n    vec3 ray_delta = normalize(ray_direction) * (1./float(steps));\n    vec3 ray_pos = ray_begin;\n\n    float ray_length = length(ray_direction);\n    float ray_length_delta = length(ray_delta);\n    float ray_length_traveled = 0.;\n\n    vec4 voxel_view_space_coord;\n    float voxel_frag_depth;\n    vec4 geometry_depth;\n    for(int i = 0; i < MAX_STEPS; i++) {\n\n        {{#volumes_max_int}}\n        {\n            vec3 normal;\n            vec2 sample = sample(data_max_int[{{.}}], volumes_max_int[{{.}}], ray_pos, normal);\n            if(sample.x > max_values[{{.}}] && sample.y > 0.0) {\n                max_values[{{.}}] = sample.x;\n                has_values[{{.}}] = true;\n                // the weight of the coordinate equals its opacity\n                max_colors[{{.}}] = texture2D(transfer_function_max_int[{{.}}], vec2(max_values[{{.}}], 0.5));\n                if(volumes_max_int[{{.}}].lighting)\n                    max_colors[{{.}}] = apply_lighting(max_colors[{{.}}], normal, ray_pos, volumes_max_int[{{.}}]);\n                float alpha = clamp(max_colors[{{.}}].a * volumes_max_int[{{.}}].opacity_scale * 10., 0., 1.);\n                max_colors[{{.}}].a = alpha;\n                #ifdef COORDINATE\n                    max_colors[{{.}}].rgb = ray_pos * alpha; // no need to use brightness for the coordinates\n                #else\n                    max_colors[{{.}}].rgb *= alpha * volumes_max_int[{{.}}].brightness; // pre-blend\n                #endif\n                max_weighted_coordinate[{{.}}].xyz = ray_pos * alpha;\n                max_weighted_coordinate[{{.}}].a = alpha;\n                max_depth[{{.}}] = ray_length_traveled/ray_length;\n            }\n        }\n        {{/volumes_max_int}}\n\n        ray_pos += ray_delta;\n        ray_length_traveled += ray_length_delta;\n        if(ray_length_traveled >= ray_length)\n            break;\n    }\n}"},function(e,t,n){"use strict";n.r(t),t.default="//attribute vec3 aVertexPosition;\n\n//uniform mat4 uMVMatrix;\n//uniform mat4 uPMatrix;\nvarying vec3 front;\n\nvoid main(void) {\n    //gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n    gl_Position = projectionMatrix *\n                modelViewMatrix *\n                vec4(position,1.0);\n    //vertex_color = vec4(aVertexPosition, 1);\n    front = position+vec3(0.5, 0.5, 0.5);\n}\n"},function(e,t,n){"use strict";n.r(t),t.default="uniform sampler2D map;\nvarying vec2 vUv;\n#include <packing>\n\nvoid main ()\n{\n    vec4 rgbaDepth = texture2D (map, vUv);\n    float fDepth = unpackRGBAToDepth(rgbaDepth);\n    gl_FragColor = vec4 (vec3 (fDepth), 1.0);\n    // gl_FragColor = vec4 (vec3 (rgbaDepth.w), 1.0);\n}\n\n"},function(e,t,n){"use strict";n.r(t),t.default="varying vec2 vUv;\n\nvoid main ()\n{\n    vUv = vec2 (uv.x, 1.0 - uv.y);\n    gl_Position = projectionMatrix * modelViewMatrix * vec4 (position, 1.0);\n}\n"},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(2)),a=i(n(12)),s=r(n(6)),u=n(1);class c extends o.DOMWidgetView{render(){this.img=document.createElement("img"),this.img.setAttribute("src",this.model.get("rgba")),this.img.setAttribute("style",this.model.get("style")),this.model.on("change:rgba",(function(){this.img.setAttribute("src",this.model.get("rgba"))}),this),this.model.on("change:style",(function(){this.img.setAttribute("style",this.model.get("style"))}),this),this.el.appendChild(this.img)}}t.TransferFunctionView=c;class l extends o.DOMWidgetModel{defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:"TransferFunctionModel",_view_name:"TransferFunctionView",_model_module:"ipyvolume",_view_module:"ipyvolume",_model_module_version:u.semver_range,_view_module_version:u.semver_range,rgba:null})}get_data_array(){const e=[],t=this.get("rgba");for(let n=0;n<t.shape[0];n++)for(let r=0;r<4;r++)e.push(255*t.get(n,r));return new Uint8Array(e)}}t.TransferFunctionModel=l,l.serializers=Object.assign(Object.assign({},o.WidgetModel.serializers),{rgba:s.ndarray});t.TransferFunctionJsBumpsModel=class extends l{constructor(...e){super(...e),this.on("change:levels",this.recalculate_rgba,this),this.on("change:opacities",this.recalculate_rgba,this),this.on("change:widths",this.recalculate_rgba,this),this.recalculate_rgba()}defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:"TransferFunctionJsBumpsModel",levels:[.1,.5,.8],opacities:[.01,.05,.1],widths:[.1,.1,.1]})}recalculate_rgba(){const e=[],t=[[1,0,0],[0,1,0],[0,0,1]],n=this.get("levels"),r=this.get("widths"),i=this.get("opacities");window.rgba=e,window.tfjs=this;for(let o=0;o<256;o++){const a=o/255,s=[0,0,0,0];for(let e=0;e<n.length;e++){const o=t[e],u=Math.exp(-Math.pow(a-n[e],2)/Math.pow(r[e],2));for(let t=0;t<3;t++)s[t]+=o[t]*u*i[e];s[3]+=u*i[e]}let u=s[0];for(let e=1;e<3;e++)u=Math.max(u,s[e]);for(let e=0;e<3;e++)s[e]=Math.min(1,s[e]/u);s[3]=Math.min(1,s[3]),e.push(s)}this.set("rgba",e),this.save_changes()}};t.TransferFunctionWidgetJs3Model=class extends l{constructor(...e){super(...e),this.on("change:level1",this.recalculate_rgba,this),this.on("change:level2",this.recalculate_rgba,this),this.on("change:level3",this.recalculate_rgba,this),this.on("change:opacity1",this.recalculate_rgba,this),this.on("change:opacity2",this.recalculate_rgba,this),this.on("change:opacity3",this.recalculate_rgba,this),this.on("change:width1",this.recalculate_rgba,this),this.on("change:width2",this.recalculate_rgba,this),this.on("change:width3",this.recalculate_rgba,this),this.recalculate_rgba()}defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:"TransferFunctionWidgetJs3Model",level1:.1,level2:.5,level3:.8,opacity1:.01,opacity2:.05,opacity3:.1,width1:.1,width2:.1,width3:.1})}recalculate_rgba(){let e=[];const t=[[1,0,0],[0,1,0],[0,0,1]],n=[this.get("level1"),this.get("level2"),this.get("level3")],r=[this.get("width1"),this.get("width2"),this.get("width3")],i=[this.get("opacity1"),this.get("opacity2"),this.get("opacity3")];for(let o=0;o<256;o++){const a=o/255,s=[0,0,0,0];for(let e=0;e<3;e++){const o=t[e],u=Math.exp(-Math.pow(a-n[e],2)/Math.pow(r[e],2));for(let t=0;t<3;t++)s[t]+=o[t]*u*i[e];s[3]+=u*i[e]}let u=s[0];for(let e=1;e<3;e++)u=Math.max(u,s[e]);for(let e=0;e<3;e++)s[e]=Math.min(1,s[e]/u);s[3]=Math.min(1,s[3]),e.push(s)}e=a.default(e),this.set("rgba",e),this.save_changes()}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,